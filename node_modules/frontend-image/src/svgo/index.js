/**
 * Module dependencies
 */
const config = require('frontend-config');
const fs = require('fs');
const { optimize, extendDefaultPlugins } = require('svgo');
const glob = require('glob');
const decode = require('ent/decode');
const svgtojsx = require('svg-to-jsx');
const pretty = require('pretty');
const indent = require('indent-string');
const svgoPlugins = require('./svgo-plugins-config');
const template = require('./component-template');

class Svgo {
  createComponents(from, to, callback) {
    try {
      // Take the config values if the args were not specified.
      let fromFolder = from;
      let toFolder = to;
      if (!from || !to) {
        fromFolder = config.get('assets.svg.from');
        toFolder = config.get('assets.svg.to');
      }
      if (!fromFolder || !toFolder) {
        callback('The parameters "from" or "to" were not found. Those must be provided from the config file or via the command line.');
      }
      this.initPaths(fromFolder, toFolder);
      this.process(fromFolder, toFolder);
    } catch (error) {
      callback(error);
    }
  }

  initPaths(from, to) {
    if (!fs.existsSync(from)) {
      throw new Error(`${from} directory does not exist`);
    }
    if (!fs.existsSync(to)) {
      throw new Error(`${to} directory does not exist`);
    }
  }

  process(from, to) {
    return glob(`${from}/**/*.svg`, (error, files) => {
      files.forEach((file) => {
        const optimizedSvg = this.optimize(file);
        this.reactify(optimizedSvg.data)
          .then((jsx) => {
            const componentFilename = this.writeComponentFile(file, to, jsx);
            console.log(`The file ${componentFilename} was created`);
          });
      });
    });
  }

  /**
  * Optimize the svg.
  */
  optimize(file) {
    const svg = fs.readFileSync(file, 'utf8');

    return optimize(svg, {
      path: file,
      plugins: extendDefaultPlugins(svgoPlugins),
    });
  }

  /**
  * Convert the svg into a React component. Svgtojsx returns a promise by itself.
  */
  reactify(svg) {
    return svgtojsx(svg, (error, jsx) => jsx);
  }

  /**
  * Write the component file.
  */
  writeComponentFile(file, to, jsx) {
    // Get only the filename.
    const svgFileName = file.split('/').pop();

    // Remove the file extension.
    const rawFileName = svgFileName.split('.')[0];

    // Capitalize the first character.
    const componentName = rawFileName.replace(/^\w/, c => c.toUpperCase());

    // eslint-disable-next-line
    jsx = indent(pretty(jsx), 2);

    const content = template(componentName, jsx);
    const filePath = `${to}/${rawFileName}.js`;
    const stream = fs.createWriteStream(filePath);

    stream.write(decode(content));
    stream.end();

    return filePath;
  }
}

module.exports = Svgo;
