/// <reference types="node" />

import { Request, Response, NextFunction } from 'express';

/**
 * Express type extension
 */
declare global {
  namespace Express {
    interface Request {
      /**
       * Browser the user is using.
       */
      browser?: DeviceDetection.UserBrowser;
  
      /**
       * Device the user is using.
       */
      device?: DeviceDetection.UserDevice;
    }
  }
}

/**
 * Device detection middleware in charge of completing req.device and req.browser variables
 * with the device and browser info obtained from the request headers.
 */
declare function DeviceDetection(req: Request, res: Response, next: NextFunction): void;

export = DeviceDetection;

declare namespace DeviceDetection {
  export interface BrowserSupport {
    /**
     * Browser supports WebP image format.
     *
     * @example true
     */
    webp: boolean;

    /**
     * Browser supports prefetch.
     *
     * @see [W3C](https://www.w3.org/TR/resource-hints/#dfn-prefetch) for more info.
     * @example true
     */
    prefetch: boolean;

    /**
     * Browser supports preconnect.
     *
     * @see [W3C](https://www.w3.org/TR/resource-hints/#preconnect) for more info.
     * @example true
     */
    preconnect: boolean;

    /**
     * Browser supports receiving push notifications
     *
     * @example true
     */
    pushNotifications: boolean;

    /**
     * Browser supports Service Workers
     *
     * @example true
     */
    serviceWorkers: boolean;

    /**
     * Browser supports Brotli compression.
     *
     * @example true
     */
    brotli: boolean;

    /**
     * Browser supports SameSite cookie attribute.
     *
     * Only true when browser has complete support for attribute without any known issues.
     *
     * @see [Incompatible clients](https://www.chromium.org/updates/same-site/incompatible-clients) for more info.
     * @example true
     */
    sameSite: boolean;
  }

  export interface BrowserDevice {
    /**
     * Determined dynamically
     * 
     * @example 'Evo Shift 4G'
     */
    model?: string;

    /**
     * Possible type:
     * console, mobile, tablet, smarttv, wearable, embedded
     * 
     * @example 'mobile'
     */
    type?: string;

    /**
     * Possible vendor:
     * Acer, Alcatel, Amazon, Apple, Archos, Asus, BenQ, BlackBerry, Dell, GeeksPhone,
     * Google, HP, HTC, Huawei, Jolla, Lenovo, LG, Meizu, Microsoft, Motorola, Nexian,
     * Nintendo, Nokia, Nvidia, Ouya, Palm, Panasonic, Polytron, RIM, Samsung, Sharp,
     * Siemens, Sony-Ericsson, Sprint, Xbox, ZTE
     * 
     * @example 'HTC'
     */
    vendor?: string;
  }

  export interface UserBrowser {
    /**
     * Browser name.
     *
     * @example 'chrome'
     */
    name?: string;

    /**
     * Browser version.
     *
     * @example '54.3.1234'
     */
    version?: string;

    /**
     * The browser's major version number.
     *
     * @example 54
     */
    major: number;

    /**
     * The browser's minor version number.
     *
     * @example 3
     */
    minor: number;

    /**
     * The browser's patch version number.
     *
     * @example 1234
     */
    patch: number;

    /**
     * The browser's complete user-agent.
     *
     * @example 'Chrome 54.0.2840 / Mac OS X 10.11.6'
     */
    userAgent: string;

    /**
     * Properties showing browser's support capabilities
     */
    support: BrowserSupport;

    /**
     * True if browser is outdated for MELI.
     *
     * @example false
     */
    outdated: boolean;

    /**
     * User's device info
     */
    device: BrowserDevice;
  }

  export interface NativeApp {
    /**
     * App name.
     *
     * @example 'MercadoLibre'
     */
    name: string;

    /**
     * OS the app is running in.
     *
     * @example 'iOS'
     */
    os: string;

    /**
     * App version.
     *
     * @example '2.94.1'
     */
    version: string;
  }

  export interface UserDevice {
    /**
     * Device type.
     *
     * @example 'desktop'
     */
    type: string;

    /**
     * True if device is a mobile device.
     *
     * @example true
     */
    mobile: boolean;

    /**
     * True if device is a tablet.
     *
     * @example false
     */
    tablet: boolean;

    /**
     * True if device is a desktop / laptop computer.
     *
     * @example false
     */
    desktop: boolean;

    /**
     * Special type determined by headers.
     * Defaults to 'desktop'.
     *
     * @example 'desktop'
     */
    originalType: string;

    /**
     * True when type is different than originalType.
     *
     * @example true
     */
    forced: boolean;

    /**
     * True if the device is considered lowEnd.
     *
     * @see [Docs](https://github.com/mercadolibre/fury_frontend-device_detection#low-end-definitions) for low-end definitions
     * @example false
     */
    lowEnd: boolean;

    /**
     * True if requests comes from a webview.
     *
     * @example false
     */
    webView: boolean;

    /**
     * True if requests comes from officially supported (webkit-landing) webview.
     *
     * @example true
     */
    nativeWebview: boolean;

    /**
     * Name of the OS from where requests is coming from.
     *
     * @example 'mac os'
     */
    osName?: string;

    /**
     * Version of the OS from where request is coming from.
     *
     * @example '10.11.6'
     */
    osVersion?: string;

    /**
     * True if device is PCI Compliant.
     *
     * @see [Docs](https://github.com/mercadolibre/fury_frontend-device_detection#pci-non-compliant-definitions) for PCI compliant definitions
     * @example true
     */
    pciCompliant: boolean;

    /**
     * Same data as req.browser, but based on original user-agent from webviews.
     */
    webviewUserAgent?: UserBrowser;

    /**
     * Indicates device capability for memory i.e. device RAM, in order to enable web apps to customize content depending on device memory constraints.
     *
     * @example '8'
     */
    memory?: string;

    /**
     * Indicates the client's current Device Pixel Ratio (DPR).
     *
     * @example '2'
     */
    dpr?: string;

    /**
     * Indicates the layout viewport width in CSS px.
     *
     * @example '1440'
     */
    viewportWidth?: string;

    /**
     * Indicates the effective round-trip time estimate in milliseconds, rounded to nearest multiple of 25 milliseconds,
     * and is based on recently observed application-layer RTT measurements across recently active connections.
     *
     * @example '300'
     */
    rtt?: string;

    /**
     * Indicates the effective bandwidth estimate in megabits per second,
     * rounded to nearest multiple of 25 kilobits per second, and is based on recently observed application layer throughput across recently active connections.
     *
     * @example '8.55'
     */
    downlink?: string;

    /**
     * Represents the effective connection type of the current connection.
     *
     * @example '4g'
     */
    ect?: string;

    /**
     * Indicates user agent's preference for reduced data usage.
     *
     * @example 'off'
     */
    saveData?: string;

    /**
     * Information on the native app making the request.
     */
    nativeApp?: NativeApp;

    /**
     * Indicates when the native app (identified by the platform) can be installed.
     * Defaults to false.
     *
     * @example true
     */
    appCapable: boolean
  }
}
