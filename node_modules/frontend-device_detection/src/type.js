/**
 * Module dependencies
 */
const defineOriginalType = require('./original-type');

/**
 * Uses nginx headers to check for FORCED device type in production.
 * @returns Boolean
 * @todo Backwards compatibility: headers['x-device-forced-desktop'] === 'true'
 */
const getByHeader = (headers = {}) => headers['x-device-force-view'] || false;

/**
 * Uses user agent to check for FORCED device type in development.
 * @returns Boolean
 * @todo Backwards compatibility: cookies.forced_desktop === '1'
 */
const getByCookie = (cookies = {}) => {
  const cookie = cookies.device_force_view;
  return (cookie && cookie !== 'default') ? cookie : false;
};

/**
 * Process type into booleans
 * @returns Object
 */
const processResult = (type, originalType) => ({
  type,
  mobile: (type === 'mobile'),
  tablet: (type === 'tablet'),
  desktop: (type === 'desktop'),
  forced: (type !== originalType),
  originalType,
});

/**
 * Exports module
 */
if (process.env.NODE_ENV === 'production') {
  // Exports for production, getting the result from headers
  module.exports = (headers) => {
    const originalType = defineOriginalType(headers);
    const type = getByHeader(headers) || originalType;
    return processResult(type, originalType);
  };
} else {
  // Exports for development and testing, getting the result from cookies/headers
  exports = module.exports = (headers, cookies) => { // eslint-disable-line no-multi-assign
    const originalType = defineOriginalType(headers);
    const type = getByCookie(cookies) || getByHeader(headers) || originalType;
    return processResult(type, originalType);
  };
  exports.getByHeader = getByHeader;
  exports.getByCookie = getByCookie;
  exports.processResult = processResult;
}
