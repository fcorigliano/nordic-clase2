/* eslint-disable security/detect-object-injection */
/**
 * Check if the device can install the app
 */
const feConfig = require('frontend-config');
const regexp = require('./regexp');

function minimumExist(os, minimum) {
  return os && minimum[os];
}

function isCapableOSVersion(version, value) {
  return !Number.isNaN(version) && parseInt(version, 10) >= value;
}

function phoneIsHuawei(os, vendor) {
  return os === 'android' && vendor === 'huawei';
}

function isHuaweiModelCompatible(model) {
  return model !== '' ? !regexp.huaweiNoGPS.test(model) : false;
}

function checkOsAndVersion({
  type,
  os = false,
  version = 0,
  minimum,
  vendor = '',
  model = '',
}) {
  if (type !== 'mobile') {
    return false;
  }
  if (minimumExist(os, minimum) && isCapableOSVersion(version, minimum[os])) {
    if (phoneIsHuawei(os, vendor)) {
      return isHuaweiModelCompatible(model);
    }
    return true;
  }
  return false;
}

/**
 * Returns if the device can install the related app
 * @returns Boolean
 */
module.exports = (agent, { id = '', siteId = '' } = {}) => {
  const minimum = feConfig.get('mobileAppsMinimum', id, siteId);

  if (minimum) {
    const osName = agent.os?.name?.toLowerCase();
    const osVersion = agent.os?.version;
    const type = agent.device?.type;
    const vendor = agent.device?.vendor?.toLowerCase();
    const model = agent.device?.model?.toUpperCase();
    return checkOsAndVersion({
      type,
      os: osName,
      version: osVersion,
      minimum,
      vendor,
      model,
    });
  }
  return false;
};
