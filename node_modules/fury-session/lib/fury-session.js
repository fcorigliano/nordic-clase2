const session = require('express-session');
const logger = require('frontend-logger');
const KvsStore = require('connect-kvs')(session);

const log = logger('fury-session');

module.exports = function furySession(options = {}) {
  const scope = process.env.SCOPE || 'local';
  const scopeName = scope.toUpperCase().replace(/-/g, '_');
  const SM_NAME = `KEY_VALUE_STORE_SM_${scopeName}_CONTAINER_NAME`;
  const CONTAINER_NAME = `SM_${scopeName}`;

  if (!options.secret) {
    options.secret = 'furysessions';
  }

  // Avoid the default cookie name of express-session
  if (!options.name) {
    options.name = 'NSESSIONID';
  }

  options.cookie = { ...options.cookie };

  // Prevents an "uninitialized" session to be saved to the store to prevent memory leaks when memory-store is used
  options.saveUninitialized = false;

  // Forces the session to be saved back to the session store, even if the session was never modified during the request
  // `false` value depends on store.touch method
  options.resave = true;

  if (process.env[SM_NAME]) {
    log.info('using Fury Sessions');
    options.container = CONTAINER_NAME;
    options.store = new KvsStore(options);
  } else {
    log.info('using Express Sessions');
  }

  return session(options);
};
