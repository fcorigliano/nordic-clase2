function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const assert = require('assert'); // TODO - minify on build
// eslint-disable-next-line no-unused-vars


const cookiesConsentListenerCode = `
d.addEventListener('cookiesConsentChange',function(e){
  try {
    var dle = {event: 'cookieConsentEvent'};
    var dlek = Object.keys(e.detail);
    for(var k=0;k<dlek.length;k++){
      dle['user_consent_cookies_'+dlek[k]] = e.detail[dlek[k]];
    }
    w[l].push(dle);
  } catch (err) {}});
`; // Important: If we want to change this variable content we have to be sure minified version does not collapse with GTM minification

const cookiesConsentListenerCodeMinified = 'd.addEventListener("cookiesConsentChange",function(e){try{for(var n={event:"cookieConsentEvent"},t=Object.keys(e.detail),o=0;o<t.length;o++)n["user_consent_cookies_"+t[o]]=e.detail[t[o]];w[l].push(n)}catch(e){}});';

class Tracker {
  /**
   * @param {object} req
   */
  constructor(req) {
    assert(req, 'Request is required');
    this.req = req;
  }
  /**
   * If given options are valid and GTM must be enabled, returns the GTM Loader JS code
   * @param {object} options
   */


  async track(options = {}) {
    if (!this.isValidId(options.id) || options.disabled) {
      return null;
    }

    return this.getGTMCode(options);
  }
  /**
   * Returns the GTM Loader JS code.
   * @param {object} options
   */


  async getGTMCode({
    dataLayer,
    id
  } = {}) {
    const dataLayerObject = await this.mergeDataLayer(dataLayer);
    let dataLayerString = '';

    if (dataLayerObject) {
      try {
        dataLayerString = `w[l].push(${JSON.stringify(dataLayerObject)});`;
      } catch (e) {} // eslint-disable-line no-empty

    }

    return `
(function(w,d,s,l,i){
  w[l]=w[l]||[];${dataLayerString}w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});
  var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;
  j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);${cookiesConsentListenerCodeMinified}
})(window,document,'script','dataLayer','${id}');`;
  }

  async mergeDataLayer(dataLayer = []) {
    let data = await this.getCommonDataLayer();

    if (Array.isArray(dataLayer)) {
      data = data.concat(dataLayer);
    }

    const dataLayerArr = [...new Set(data)].filter(d => !!d && typeof d === 'object' && Object.keys(d).length > 0);

    if (dataLayerArr.length === 0) {
      return null;
    }

    return dataLayerArr.reduce((d, acc) => _objectSpread(_objectSpread({}, acc), d), {});
  }

  isValidId(id) {
    return id && typeof id === 'string' && id.startsWith('GTM-');
  }

  async getCommonDataLayer() {
    let commonData = [];

    if (this.req.meliCookies && this.req.meliCookies.getCookiesUserPreferences && this.req.meliCookies.userConsentCookieCategory) {
      try {
        const cookiesPrefs = await this.req.meliCookies.getCookiesUserPreferences();

        if (cookiesPrefs && cookiesPrefs.categories) {
          const consents = await Promise.all(Object.keys(cookiesPrefs.categories).map(c => this.req.meliCookies.userConsentCookieCategory(c).then(userConsent => ({
            [`user_consent_cookies_${c}`]: userConsent
          }))));
          commonData = commonData.concat(consents);
        }
      } catch (e) {} // eslint-disable-line no-empty

    }

    if (typeof this.req.data_audience_3p_denied !== 'undefined') {
      commonData.push({
        data_audience_3p_denied: this.req.data_audience_3p_denied
      });
    }

    return commonData;
  }

}

exports = module.exports = Tracker; // eslint-disable-line no-multi-assign