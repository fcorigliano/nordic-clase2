class TrafficSlots {
  constructor(req) {
    this.req = req;
  }
  /**
       * Returns an array of non-overlapping slots
       * @param {Array} slotIds
       */


  buildSlots(slotIds = []) {
    const slots = Array.isArray(slotIds) ? slotIds : [slotIds];
    return Array(slots.length).fill(Math.round(100 / slots.length)).reduce((acc, c, index) => {
      acc.slots.push({
        from: acc.base,
        to: index + 1 === slots.length ? 99 : acc.base + c - 1
      });
      acc.base += c;
      return acc;
    }, {
      slots: [],
      base: 0
    }).slots.map((slot, index) => Object.assign(slot, {
      enabled: this.isSlotEnabled(slot),
      id: slots[index]
    }));
  }
  /**
       * Returns an array of slots that could overlap
       * @param {Array} slots
       */


  buildCustomSlots(slots = []) {
    const slotIdentifier = this.getSlotIdentifier();
    return slots.map(slot => {
      slot.enabled = this.isSlotEnabled(slot, slotIdentifier);
      return slot;
    });
  }
  /**
       * Returns a boolean indicating if the given slot is enabled or not
       * @param {object} slot
       */


  isSlotEnabled(slot, slotIdentifier = this.getSlotIdentifier()) {
    const {
      from,
      to
    } = slot;
    return slotIdentifier >= from && slotIdentifier <= to;
  }

  getSlotIdentifier() {
    const {
      cookies
    } = this.req;
    const d2id = cookies && cookies._d2id ? cookies._d2id : ''; // eslint-disable-line no-underscore-dangle

    return d2id.split('').reduce((sum, l) => sum + l.charCodeAt(0), 0) % 100;
  }

}

exports = module.exports = TrafficSlots; // eslint-disable-line no-multi-assign