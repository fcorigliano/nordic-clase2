/* eslint-disable global-require */

const httpMocks = require('node-mocks-http');

const middleware = require('../../src/middleware');

const req = httpMocks.createRequest({
  device: {
    webView: true,
  },
  app: {
    get: param => jest.fn().mockImplementation(() => `${param}-etag`),
  },
});

const res = httpMocks.express.response.createResponse();
res.set = jest.fn();

describe('CSR Prerender middleware module', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.resetAllMocks();
    res.removeHeader('Link');
  });

  it('Should execute middleware without config', (done) => {
    middleware()(req, res, () => {
      expect(res.set).toHaveBeenCalled();
      expect(res.set).toBeCalledWith('ETag', 'etag fn-etag');
      done();
    });
  });

  it('Should merge header links and custom preload, prefetch', (done) => {
    const customConfig = () => ({
      prefetches: [
        'https://www.mercadolibre.com.ar/login',
        'https://www.mercadolibre.com.ar/help',
      ],
      preloads: [
        'https://www.mercadolibre.com.ar/api',
        'https://www.mercadolibre.com.ar/api/main',
      ],
    });

    res.header('Link', '<https://www.google.com.ar>; rel=dns-prefetch');

    middleware(customConfig)(req, res, () => {
      expect(res.getHeader('Link')).toEqual(expect.stringContaining('https://www.google.com.ar'));
      expect(res.getHeader('Link')).toEqual(expect.stringContaining('https://www.mercadolibre.com.ar'));
      done();
    });
  });

  it('Should use custom config and make prefetch, preloads header links', (done) => {
    const customConfig = () => ({
      prefetches: [
        'https://www.mercadolibre.com.ar/login',
        'https://www.mercadolibre.com.ar/help',
      ],
      preloads: [
        'https://www.mercadolibre.com.ar/api',
        'https://www.mercadolibre.com.ar/api/main',
      ],
    });

    middleware(customConfig)(req, res, () => {
      expect(res.getHeader('Link')).not.toBe('');
      done();
    });
  });

  it('Should use custom config and only prefetch header links', (done) => {
    const customConfig = () => ({
      prefetches: [
        'https://www.mercadolibre.com.ar/login',
        'https://www.mercadolibre.com.ar/help',
      ],
    });

    middleware(customConfig)(req, res, () => {
      expect(res.getHeader('Link')).not.toBe('');
      done();
    });
  });

  it('Should use custom config and only preloads header links', (done) => {
    const customConfig = () => ({
      preloads: [
        'https://www.mercadolibre.com.ar/api',
        'https://www.mercadolibre.com.ar/api/main',
      ],
    });

    middleware(customConfig)(req, res, () => {
      expect(res.getHeader('Link')).not.toBe('');
      done();
    });
  });

  it('Snapshot prefetch and preloads links', (done) => {
    const customConfig = () => ({
      prefetches: [
        'https://www.mercadolibre.com.ar/login',
        'https://www.mercadolibre.com.ar/help',
      ],
      preloads: [
        'https://www.mercadolibre.com.ar/api',
        'https://www.mercadolibre.com.ar/api/main',
      ],
    });

    middleware(customConfig)(req, res, () => {
      expect(res.getHeader('Link')).toMatchSnapshot();
      done();
    });
  });

  it('Should call customConfig with req and res params', (done) => {
    const customConfig = jest.fn();

    middleware(customConfig)(req, res, () => {
      expect(customConfig).toBeCalledWith(req, res);
      done();
    });
  });

  it('Should not execute middleware is not webview', (done) => {
    req.device.webView = false;

    middleware()(req, res, () => {
      expect(res.set).not.toHaveBeenCalled();
      done();
    });
  });
});
