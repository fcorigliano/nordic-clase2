const propagateParams = require('../propagateParams');

const testUrl = 'https://test.ml/something';
const testRelativeUrl = '/testing/ground';
const addedParams = '?passed=true';
const goodParams = { device: '123', code: 'mercadoLibre' };
const badParams = { somethingElse: '420', otherThing: 'something' };
const mixedParams = { ...goodParams, ...badParams };
const testRegex = new RegExp(/^(device|code)$/);
const goodParamsInString = new URLSearchParams(goodParams).toString();
const urlHash = '#some-hash';

describe('url: propagateParams', () => {
  describe.each([
    ['Propagate params with absolute URL', testUrl],
    ['Propagate params with relative URL', testRelativeUrl],
  ])('%s', (testName, baseUrl) => {
    test.each([
      ['With hash', baseUrl + urlHash, mixedParams, testRegex, (baseUrl + '?' + goodParamsInString + urlHash)],
      ['With only good queryparams', baseUrl, goodParams, testRegex, (baseUrl + '?' + goodParamsInString)],
      ['With only bad queryparams', baseUrl, badParams, testRegex, (baseUrl)],
      ['With good and bad queryparams', baseUrl, mixedParams, testRegex, (baseUrl + '?' + goodParamsInString)],
      ['With empty queryparams', baseUrl, { }, testRegex, baseUrl],
      ['With undefined queryparams', baseUrl, undefined, testRegex, baseUrl],
      ['With params in baseURL', baseUrl + addedParams, mixedParams, testRegex, (baseUrl + addedParams + '&' + goodParamsInString)],
      ['With params and hash in baseURL', baseUrl + addedParams + urlHash, mixedParams, testRegex, (baseUrl + addedParams + '&' + goodParamsInString + urlHash)],
      ['With null regex', baseUrl, mixedParams, null, baseUrl],
    ])('%s', (testName, baseUrl, queryParams, regexValidator, expectedValue) => {
      expect(propagateParams(baseUrl, queryParams, regexValidator)).toEqual(expectedValue);
    });
  });
  test('Propagate params with hash instead of URL', () => {
    expect(propagateParams('#', mixedParams)).toEqual('#');
  });
  describe('For wrong parameters', () => {
    test.each([
      ['should return the undefined if no baseURL', undefined, mixedParams, testRegex, undefined],
      ['should return the baseURL if no params given', testUrl, undefined, testRegex, testUrl],
      ['should propagate all params that pass the standard regex validation, when regex is not given.', testUrl, mixedParams, undefined, (testUrl + '?' + goodParamsInString)],
    ])('%s', (testName, baseUrl, queryParams, regex, expectedValue) => {
      expect(propagateParams(baseUrl, queryParams, regex)).toEqual(expectedValue);
    });
  });
});
