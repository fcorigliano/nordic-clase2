/* eslint-disable no-undef */
const filterObjectKeysByRegex = require('../filterObjectByRegex');

describe('filterObjectKeysByRegex', () => {
  describe('if an empty object is sent', () => {
    it('should return empty object', () => {
      const filtered = filterObjectKeysByRegex(new RegExp(/.+/), {});
      expect(Object.keys(filtered).length).toEqual(0);
    });
  });

  describe('if an object is sent', () => {
    it('should return params that matchs regex', () => {
      const filtered = filterObjectKeysByRegex(new RegExp(/(code)/), {
        code: 'code',
        device: 'device',
      });

      expect(Object.keys(filtered).length).toEqual(1);
      expect(Object.keys(filtered)[0]).toEqual('code');
      expect(filtered.code).toEqual('code');
      expect(filtered.device).toEqual(undefined);
    });
  });

  describe('If wrong params are given', () => {
    test.each([
      [null],
      [undefined],
      [{}],
      [{ object: 'test' }],
      [13],
      ['string'],
    ])('if given %s as a regexp', (wrongRegex) => {
      expect(filterObjectKeysByRegex(wrongRegex, { test: 'test' })).toEqual({ test: 'test' });
    });

    test.each([
      [null],
      [undefined],
    ])('if given %s as a filtered object', (wrongObject) => {
      expect(filterObjectKeysByRegex(new RegExp(/(code)/), wrongObject)).toEqual(wrongObject);
    });

    test.each([
      [13],
      ['string'],
    ])('if given %s as a filtered object', (wrongObject) => {
      expect(filterObjectKeysByRegex(new RegExp(/(code)/), wrongObject)).toEqual({});
    });
  });
});
