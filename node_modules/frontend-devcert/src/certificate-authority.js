const {
  existsSync: exists,
  writeFileSync: writeFile,
  copyFileSync: copyFile,
  readFileSync: readFile,
  unlinkSync: rmFile,
  chmodSync: chmod,
} = require('fs');
const path = require('path');
const createDebug = require('debug');

const {
  rootCAKeyPath,
  rootCACertPath,
  // caSelfSignConfig,
  opensslSerialFilePath,
  opensslDatabaseFilePath,
  caVersion,
  caVersionFile,
  isMac, isLinux,
} = require('./constants');
const { mktmp, cleanConfigDir, run } = require('./utils');

const originalCAKeyPath = path.resolve(__dirname, '../ca/private-key.key');
const originalCACertPath = path.resolve(__dirname, '../ca/certificate.cert');

const debug = createDebug('frontend-devcert:certificate-authority');

/**
 * Initializes the files OpenSSL needs to sign certificates as a certificate
 * authority, as well as our CA setup version
 */
function seedConfigFiles() {
  writeFile(caVersionFile, `${caVersion}`);
  // OpenSSL CA files
  writeFile(opensslDatabaseFilePath, '');
  writeFile(opensslSerialFilePath, `0${caVersion}`);

  copyFile(originalCAKeyPath, rootCAKeyPath);
  chmod(rootCAKeyPath, 400);
  copyFile(originalCACertPath, rootCACertPath);
}

/**
 * Wipe everything when local CA version does not match the CA version from this module
 */
if (exists(caVersionFile)) {
  const localCaVersion = parseInt(readFile(caVersionFile).toString().trim(), 10);
  if (caVersion !== localCaVersion) {
    debug(`Root CA version mismatch, local is ${localCaVersion} when module has ${caVersion}`);
    cleanConfigDir();
  }
}

if (!exists(rootCAKeyPath)) {
  debug('Root CA is not installed yet, so it must be our first run. Preparing root CA ...');
  seedConfigFiles();
}

async function withCertificateAuthorityCredentials(cb) {
  debug('Retrieving MeliDev\'s certificate authority credentials');
  const tmpCAKeyPath = mktmp();
  const caKey = readFile(rootCAKeyPath);
  writeFile(tmpCAKeyPath, caKey);
  await cb({ caKeyPath: tmpCAKeyPath, caCertPath: rootCACertPath });
  rmFile(tmpCAKeyPath);
}

async function installCertificateAuthority() {
  debug('Uninstalling existing certificates, which will be void once any existing CA is gone');
  // TODO: enable uninstall, requires copying of CA from ../ca/ to `rootCADir`
  // uninstall();

  if (isMac) {
    debug('Adding devcert root CA to macOS system keychain');
    // Chrome, Safari, system utils but not Firefox
    try {
      run('sudo', [
        'security',
        'add-trusted-cert',
        '-d',
        '-r',
        'trustRoot',
        '-k',
        '/Library/Keychains/System.keychain',
        '-p',
        'ssl',
        '-p',
        'basic',
        rootCACertPath,
      ]);
    } catch (err) {
      console.log(`Failed to install the certificate in macOS cert store: ${err.message}`);
    }
  } else if (isLinux) {
    debug('Adding devcert root CA to Linux system-wide trust stores');
    try {
      run('sudo', ['cp', rootCACertPath, '/usr/local/share/ca-certificates/devcert.crt']);
      run('sudo', ['update-ca-certificates']);
    } catch (err) {
      console.log(`Failed to install the certificate in /usr/local/share/ca-certificates: ${err.message}`);
    }
  } else {
    throw new Error('Unsupported platform');
  }
}

// eslint-disable-next-line no-unused-vars
function uninstall() {
  if (isMac) {
    debug('Removing devcert root CA from macOS system keychain');
    try {
      run('sudo', [
        'security',
        'remove-trusted-cert',
        '-d',
        rootCACertPath,
      ], {
        stdio: 'ignore',
      });
    } catch (err) {
      debug(`failed to remove ${rootCACertPath} from macOS cert store, continuing. ${err.message}`);
    }
  } else if (isLinux) {
    try {
      run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);
      run('sudo', ['update-ca-certificates']);
    } catch (err) {
      debug(`failed to remove ${rootCACertPath} from /usr/local/share/ca-certificates, continuing. ${err.message}`);
    }
  } else {
    throw new Error('Unsupported platform');
  }
}

module.exports = {
  withCertificateAuthorityCredentials,
  installCertificateAuthority,
};

