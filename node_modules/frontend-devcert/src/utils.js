const { execFileSync } = require('child_process');
const { unlinkSync: rm, writeFileSync: writeFile, readFileSync: readFile } = require('fs');
const tmp = require('tmp');
const createDebug = require('debug');
const path = require('path');
const eol = require('eol');
const rimraf = require('rimraf');
const { sync: mkdirp } = require('mkdirp');

const { configPath, configDir, domainsDir, rootCADir, pathForDomain, opensslSerialFilePath, opensslDatabaseFilePath } = require('./constants');
const { domainCertificateSigningConfTemplate, domainCertificatesConfTemplate } = require('./templates');

const debug = createDebug('frontend-devcert:util');

function run(cmd, args, options = {}) {
  debug(`execFileSync: \`${cmd} ${args.join(' ')}\``);
  return execFileSync(cmd, args, options);
}

function openssl(args) {
  return run('openssl', args, {
    stdio: 'pipe',
    env: { RANDFILE: path.join(configPath('.rnd')), ...process.env },
  });
}

function mktmp() {
  return tmp.fileSync({ discardDescriptor: true }).name;
}

function withDomainSigningRequestConfig(domain, cb) {
  const tmpFile = mktmp();
  const result = domainCertificateSigningConfTemplate({ domain });
  writeFile(tmpFile, eol.auto(result));
  cb(tmpFile);
  rm(tmpFile);
}

function withDomainCertificateConfig(domain, cb) {
  const tmpFile = mktmp();
  const result = domainCertificatesConfTemplate({
    domain,
    serialFile: opensslSerialFilePath,
    databaseFile: opensslDatabaseFilePath,
    domainDir: pathForDomain(domain),
  });
  writeFile(tmpFile, eol.auto(result));
  cb(tmpFile);
  rm(tmpFile);
}

function removeDomain(domain) {
  /**
   * Remove the current domain's record from openssl DB file
   */
  try {
    const dbContent = readFile(opensslDatabaseFilePath, { encoding: 'utf-8' });
    const dbArray = dbContent.split('\n');
    let lastIndex = -1;

    for (let index = 0; index < dbArray.length; index++) { // eslint-disable-line
      if (dbArray[index].endsWith(`CN=${domain}`)) {
        lastIndex = index;
        break;
      }
    }

    dbArray.splice(lastIndex, 1);
    writeFile(opensslDatabaseFilePath, dbArray.join('\n'));
  } catch (err) {
    debug(`There was a problem with ${opensslDatabaseFilePath}: ${err.message}`);
  }

  return rimraf.sync(pathForDomain(domain));
}

function ensureConfigDirs() {
  debug(`Bootstrapping config directory: ${configDir}`);
  mkdirp(configDir);
  mkdirp(domainsDir);
  mkdirp(rootCADir);
}

ensureConfigDirs();

function cleanConfigDir() {
  debug(`Deleting config directory: ${configDir}`);
  rimraf.sync(configDir);
  ensureConfigDirs();
}

module.exports = {
  openssl,
  run,
  mktmp,
  withDomainSigningRequestConfig,
  withDomainCertificateConfig,
  removeDomain,
  cleanConfigDir,
};

