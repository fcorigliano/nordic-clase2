const createDebug = require('debug');
const { sync: mkdirp } = require('mkdirp');
const { chmodSync: chmod, statSync: stat, existsSync: exists } = require('fs');
const { pathForDomain } = require('./constants');
const { openssl, withDomainSigningRequestConfig, withDomainCertificateConfig, removeDomain } = require('./utils');
const { withCertificateAuthorityCredentials } = require('./certificate-authority');

const debug = createDebug('frontend-devcert:certificates');

/**
 * Generate a cryptographic key, used to sign certificates or certificate signing requests
 */
function generateKey(filename) {
  debug(`generateKey: ${filename}`);
  openssl(['genrsa', '-out', filename, '2048']);
  chmod(filename, 400);
}

/**
 * Generate a domain certificate signed by the MeliDev root CA. Domain
 * certificates are cached in their own directories under
 * CONFIG_ROOT/domains/<domain>, and reused on subsequent requests. Because the
 * individual domain certificates are signed by the MeliDev root CA (which should be
 * added to the OS/browser trust stores), they are trusted.
 */
async function generateDomainCertificate(domain) {
  mkdirp(pathForDomain(domain));

  debug(`Generating private key for ${domain}`);
  const domainKeyPath = pathForDomain(domain, 'private-key.key');
  generateKey(domainKeyPath);

  debug(`Generating certificate signing request for ${domain}`);
  const csrFile = pathForDomain(domain, 'certificate-signing-request.csr');
  withDomainSigningRequestConfig(domain, (configpath) => {
    openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);
  });

  debug(`Generating certificate for ${domain} from signing request and signing with root CA`);
  const domainCertPath = pathForDomain(domain, 'certificate.crt');

  await withCertificateAuthorityCredentials(({ caKeyPath, caCertPath }) => {
    withDomainCertificateConfig(domain, (domainCertConfigPath) => {
      openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch']);
    });
  });
}

/**
 * Ensure that previously generated certificates are still fresh, renew if creation time is more than 1 year ago
 */
function ensureDomainCertificateFreshnessFor(domain) {
  const domainCertPath = pathForDomain(domain, 'certificate.crt');
  if (exists(domainCertPath)) {
    const { mtime } = stat(domainCertPath);

    if (Date.now() > (new Date(mtime)).setFullYear(mtime.getFullYear() + 1)) {
      debug(`Certificate for ${domain} is outdated, deleting...`);
      removeDomain(domain);
    } else {
      debug(`Certificate for ${domain} still fresh`);
    }
  }
}

module.exports = {
  generateDomainCertificate,
  generateKey,
  ensureDomainCertificateFreshnessFor,
};
