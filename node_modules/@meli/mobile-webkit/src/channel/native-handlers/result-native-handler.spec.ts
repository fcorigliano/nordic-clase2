import { ErrorCodes, FromNativeMessageType, MessageFromNative, NativeResult } from "../../models";
import { Callback, CallbackContainer } from "../../utils";
import { ResultNativeHandler } from "./result-native-handler";

describe("ResultNativeHandler", ()=>{

    let callbackContainer: CallbackContainer;
    let resultHandler: ResultNativeHandler;

    beforeEach(()=>{
        callbackContainer = new CallbackContainer();
        resultHandler = new ResultNativeHandler(callbackContainer);
    });

    it("should do nothing if message has not arguments", ()=>{
        // Given
        const callback: Callback = jest.fn();
        const callbackId = callbackContainer.add(callback);
        const message = givenMessageFromNative(callbackId, null);

        // When
        resultHandler.handleMessage(message);

        // Then
        expect(callback).not.toBeCalled();
    });
    it("should call callback with a result and error", ()=>{
        // Given
        const callback: Callback = jest.fn();
        const callbackId = callbackContainer.add(callback);
        const message = givenMessageFromNative(callbackId, {
            result: "result test",
            error: "error"
        });

        // When
        resultHandler.handleMessage(message);

        // Then
        expect(callback).toBeCalledWith("result test", {
            code: ErrorCodes.Native,
            data: "error"
        });
    });
});

function givenMessageFromNative(callbackId: number = 1, args: NativeResult = {}): MessageFromNative {
    return {
        args,
        callback_msg: callbackId,
        message_type: FromNativeMessageType.NativeExecutionResult,
        method: "test method"
    };
}