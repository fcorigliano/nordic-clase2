
import { ErrorCodes, ErrorMessage, FromNativeMessageType, MultiNativeResult  } from "../../models";
import { MessageFromNative } from "../../models/from-native/message-from-native";
import { CallbackContainer } from "../../utils";
import { NativeHandler } from "./native-handler";

export class MultiResultNativeHandler implements NativeHandler {

    messageType = FromNativeMessageType.NativeMultiExecutionResult;

    constructor(private callbackContainer: CallbackContainer) { }

    handleMessage(message: MessageFromNative): void {
        const callbackId = message.callback_msg;
        const callback = this.callbackContainer.getAndRemove(callbackId);
        if (!callback) {
            return;
        }

        const args: MultiNativeResult = message.args;
        if (!args) {
            return;
        }

        const result = args.result?.map(item=>({
            ...item,
            error: item.error ? {
                code: ErrorCodes.Native,
                data: item.error
            } : undefined
        }));

        const error:ErrorMessage = args.error  ? {
            code: ErrorCodes.Native,
            data: args.error
        } : undefined;

        callback(result, error);
    }
} 
