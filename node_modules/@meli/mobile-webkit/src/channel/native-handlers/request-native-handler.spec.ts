import { EventEmitter } from "../../events/event-emitter";
import { FromNativeMessageType, MessageFromNative, ToNativeMessageType } from "../../models";
import { NativeChannel } from "../native-channel";
import { RequestNativeHandler } from "./request-native-handler";

describe("RequestNativeHandler", () => {
    it("should emit an event with the request information", () => {
        // Given
        const eventEmitter = new EventEmitter();
        const dispatchSpy = jest.spyOn(eventEmitter, "dispatchEvent");

        const channel: NativeChannel = {} as any;
        const requestHandler = new RequestNativeHandler(eventEmitter, channel);
        const message: MessageFromNative = {
            message_type: FromNativeMessageType.NativeRequest,
            method: "method test",
            args: {
                data:1
            },
            callback_msg: 1
        };

        // When
        requestHandler.handleMessage(message);

        // Then
        const event = dispatchSpy.mock.calls[0][0];
        expect(event.type).toEqual(FromNativeMessageType.NativeRequest);
        expect((event as any).method).toEqual(message.method);
        expect((event as any).args).toEqual(message.args);
    });
});