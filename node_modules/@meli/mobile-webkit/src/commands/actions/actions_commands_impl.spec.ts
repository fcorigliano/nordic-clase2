import { MobileWebkit } from "../../mobile-webkit";
import { ActionCommands } from "./actions_commands";
import { ActionsCommandsImpl } from "./actions_commands_impl";
import { DownloadImageOptions } from "./download_image_options";
import { PickImageOptions } from "./pick_image_options";
import { ShareImageOptions } from "./share_image_options";

describe("ActionsCommandsImpl", ()=>{

    let executeNativeSpy: jest.Mock<any, any>;
    let mobileWebKit: MobileWebkit;
    let commands: ActionCommands;

    beforeEach(() => {
        executeNativeSpy = jest.fn();
        mobileWebKit = {
            executeNative: executeNativeSpy
        } as any;
        commands = new ActionsCommandsImpl(mobileWebKit);
    })

    it("shareImage should call executeNative with method share_image", ()=>{
        // Given 
        const args: ShareImageOptions = {
            path: "/path",
            params: {}
        };

        // When
        commands.shareImage(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "share_image",
            args
        });
    });

    it("downloadImage should call executeNative with method download_image", ()=>{
        // Given 
        const args : DownloadImageOptions = {
            path:"/path",
            method: "GET"
        };

        // When
        commands.downloadImage(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "download_image",
            args
        });
    });

    it("pickImage should call executeNative with method pick_image", ()=>{
        // Given 
        const args: PickImageOptions = {
            is_base64: true,
            max_size: 1000
        };

        // When
        commands.pickImage(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "pick_image",
            args
        });
    });

    it("share should call executeNative with method share", ()=>{
        // Given 
        const title = "Test title";
        const data = "test data";

        // When
        commands.share(title, data);
        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "share",
            args:{
                title,
                data
            }
        });
    });
});