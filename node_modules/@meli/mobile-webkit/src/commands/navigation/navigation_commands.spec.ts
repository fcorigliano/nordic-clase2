import { NavigationCommandsImpl } from "./navigation_commands_impl";
import { MobileWebkit } from "../../mobile-webkit";
import { PushOptions } from "./push_options";

describe("NavigationCommandsImpl", () => {

    let executeNativeSpy: jest.Mock<any, any>;
    let mobileWebKit: MobileWebkit;
    let navigationCommands: NavigationCommandsImpl;

    beforeEach(() => {
        executeNativeSpy = jest.fn();
        mobileWebKit = {
            executeNative: executeNativeSpy
        } as any;
        navigationCommands = new NavigationCommandsImpl(mobileWebKit);
    });

    it("reload should call executeNative with method reload", () => {
        //When
        navigationCommands.reload()

        //Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "reload",
            args: {}
        });
    })

    it("push should call executeNative with method push", () => {
        // Given
        const deeplink = "test deeplink";
        const args: PushOptions = {
            screens_group: "test",
            replace: false,
            transition: "present"
        }

        // When
        navigationCommands.push(deeplink, args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "push",
            args: {
                deeplink,
                ...args
            }
        });
    });

    it("pop should call executeNative with method pop", () => {
        // Given
        const args = {
            screens: 3
        }

        // When
        navigationCommands.pop(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "pop",
            args
        });
    });

    it("openForResult should call executeNative with method open_for_result", () => {
        // Given
        const deeplink = "test deeplink";
        const requestCode = 1

        // When
        navigationCommands.openForResult(deeplink, requestCode);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "open_for_result",
            args: {
                deeplink,
                request_code: requestCode
            }
        });
    });

    it("closeScreenGroup should call executeNative with method close_all", () => {
        // Given
        const args = {
            result: 123
        };

        // When
        navigationCommands.closeScreenGroup(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "close_all",
            args
        });
    });

    it("canOpenDeeplink should call executeNative with method can_open_deeplink", () => {
        // Given
        const args = {
            only_current_app: true
        };
        const deeplink = "test deeplink";
        // When
        navigationCommands.canOpenDeeplink(deeplink, args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "can_open_deeplink",
            args: {
                deeplink,
                ...args
            }
        });
    });

    it("openLinkInAppBrowser should call executeNative with method open_in_app_browser", () => {
        // Given
        const args = {
            show_title: true
        };
        const url = "test url";
        // When
        navigationCommands.openLinkInAppBrowser(url, args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "open_in_app_browser",
            args: {
                url,
                ...args
            }
        });
    });

    it("openLinkOutsideApp should call executeNative with method open_link", () => {
        // Given
        const url = "test url";

        // When
        navigationCommands.openLinkOutsideApp(url);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "open_link",
            args: {
                url
            }
        });
    });

    describe("getGroupStore", () => {
        it("should call executeNative with method get_group_store", () => {
            // Given
            executeNativeSpy.mockReturnValue(Promise.resolve("{}"));
            // When
            navigationCommands.getGroupStore();

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith({
                method: "get_group_store",
                args: {}
            });
        });

        it("should return a store object", () => {
            // Given
            const store = { value: "Test" };
            const storeString = JSON.stringify(store);
            executeNativeSpy.mockReturnValue(Promise.resolve(storeString));

            // When
            return navigationCommands.getGroupStore()
                .then(result => {
                    // Then
                    expect(result).toEqual(store);
                });
        });

        it("should select a fragment of the store if it has selector", () => {
            // Given
            const selector = "section";
            const store = { value: "Test", section: { value1: 1, value2: true } };
            const storeString = JSON.stringify(store);
            executeNativeSpy.mockReturnValue(Promise.resolve(storeString));

            // When
            return navigationCommands.getGroupStore(selector)
                .then(result => {
                    // Then
                    expect(result).toEqual(store.section);
                });

        });
    });


    describe("setGroupStore", () => {
        it("should call executeNative with method set_group_store", () => {
            // Given
            const store = { value: "Test" };
            const value2 = 123;
            const getGroupStoreSpy = jest.fn();
            navigationCommands.getGroupStore = getGroupStoreSpy;

            getGroupStoreSpy.mockReturnValue(Promise.resolve(store));

            // When
            navigationCommands.setGroupStore(store => ({ ...store, value2 }))
                .then(() => {
                    // Then
                    expect(executeNativeSpy).toHaveBeenCalledWith({
                        method: "set_group_store",
                        args: {
                            store: JSON.stringify({ ...store, value2 })
                        }
                    });
                });
        });

        it("should set a section of store if it has selector", () => {
            // given
            const selector = "section";
            const store = { value: "Test", section: { value1: 1, value2: true } };
            const value2 = 123;
            const getGroupStoreSpy = jest.fn();
            navigationCommands.getGroupStore = getGroupStoreSpy;

            getGroupStoreSpy.mockReturnValue(Promise.resolve(store));

            // when
            navigationCommands.setGroupStore(store => ({ ...store, value2 }), selector)
                .then(() => {
                    // Then
                    expect(executeNativeSpy).toHaveBeenCalledWith({
                        method: "set_group_store",
                        args: {
                            store: JSON.stringify({ ...store, section: { ...store.section, value2 } })
                        }
                    });
                });
        });
    });
});
