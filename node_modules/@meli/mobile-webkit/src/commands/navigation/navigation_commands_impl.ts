import { MobileWebkit } from "../../mobile-webkit";
import { NavigationCommands } from "./navigation_commands";
import { PushOptions } from "./push_options";

export class NavigationCommandsImpl implements NavigationCommands {

    constructor(private mobileWebKit: MobileWebkit) { }
    
    reload() : Promise<string>{
        return this.mobileWebKit.executeNative({
            method: 'reload',
            args: {}
        });
    }

    push(deeplink: string, receivedArgs?: PushOptions): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: 'push',
            args: {
                deeplink,
                ...receivedArgs
            }
        });
    }

    pop(args?: { screens?: number, isHistoryEnabled?: boolean }): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: 'pop',
            args
        });
    }

    // TODO: se deberia subscribir a un evento para capturar el resultado?
    openForResult(deeplink: string, request_code: number): Promise<any> {
        return this.mobileWebKit.executeNative({
            method: 'open_for_result',
            args: {
                deeplink,
                request_code
            }
        });
    }

    closeScreenGroup(args?: { result?: any }): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: "close_all",
            args
        });
    }

    canOpenDeeplink(deeplink: string, args: { only_current_app: boolean }): Promise<boolean> {
        return this.mobileWebKit.executeNative({
            method: "can_open_deeplink",
            args: {
                deeplink,
                ...args
            }
        });
    }

    openLinkInAppBrowser(url: string, args: { show_title: boolean; }): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: "open_in_app_browser",
            args: {
                url,
                ...args
            }
        });
    }
    
    openLinkOutsideApp(url: string): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: "open_link",
            args: {
                url
            }
        });
    }

    getGroupStore(selector?: string): Promise<any> {
        return this.mobileWebKit.executeNative({
            method: "get_group_store",
            args: {}
        }).then(storeString => {
            const store = JSON.parse(storeString);
            return selector != null ? store[selector] : store;
        });
    }

    setGroupStore(newStore: (store: any) => any, selector?: string): Promise<string> {
        return this.getGroupStore()
            .then(store => {
                const storeSection = selector != null ? store[selector] : store;
                const updatedStore = newStore(storeSection);
                
                let completeUpdatedStore = selector != null 
                ? { ...store, [selector]: updatedStore }
                : updatedStore;

                return this.mobileWebKit.executeNative({
                    method: "set_group_store",
                    args: {
                        store: JSON.stringify(completeUpdatedStore)
                    }
                })
            });
    }
}
