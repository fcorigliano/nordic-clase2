import { NativeEventType } from "../../events/native-event-type";
import { MobileWebkit } from "../../mobile-webkit";
import { EventSubscriptionId, Subscription } from "../events/utils/event_subscription_id";
import { LifecycleCommands } from "./lifecycle_commands";

export class LifecycleCommandsImpl implements LifecycleCommands {

    constructor(private mobileWebKit: MobileWebkit){}

    onConnected(): Promise<void> {
        if(this.mobileWebKit.isConnected()){
            return Promise.resolve();
        }

        return new Promise((resolve)=>{
            const subscription = ()=> {
                resolve();
                this.mobileWebKit.off(NativeEventType.connect, subscription);
            };
            this.mobileWebKit.on(NativeEventType.connect, subscription);
        });
    }

    onViewAppeared(subscription: () => void): EventSubscriptionId {
        return this.mobileWebKit.events.subscribeMethod("view_appeared", subscription);
    }

    onViewDisappeared(subscription: () => void): EventSubscriptionId {
        return this.mobileWebKit.events.subscribeMethod("view_disappeared", subscription);
    }
    
    unsubscribe(eventId: EventSubscriptionId): Promise<string> {
        return this.mobileWebKit.events.unsubscribe(eventId);
    }
}