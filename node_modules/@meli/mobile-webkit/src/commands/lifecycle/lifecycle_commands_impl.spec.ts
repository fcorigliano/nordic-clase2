import { NativeEvent } from "../../events/native-event";
import { MobileWebkit } from "../../mobile-webkit";
import { EventCommands } from "../events/event_commands";
import { LifecycleCommands } from "./lifecycle_commands";
import { LifecycleCommandsImpl } from "./lifecycle_commands_impl";

describe("LifecycleCommands", () => {

    let mobileWebKit: MobileWebkit;
    let eventCommands: EventCommands;
    let lifecycleCommands: LifecycleCommands;

    let isConnectedSpy: jest.Mock<any, any>;
    let subscribeSpy: jest.Mock<any, any>;
    let unsubscribeSpy: jest.Mock<any, any>;

    beforeEach(()=>{
        (window as any).__SDK_VERSION__ = 1;
        subscribeSpy = jest.fn();
        unsubscribeSpy = jest.fn();
        isConnectedSpy = jest.fn();

        mobileWebKit = new MobileWebkit();
        eventCommands =  {
           subscribeMethod: subscribeSpy,
           unsubscribe: unsubscribeSpy 
        } as any;


        mobileWebKit["commandProvider"] = {
            getEventCommands: ()=>eventCommands
        } as any;
        mobileWebKit["isConnected"] = isConnectedSpy;

        lifecycleCommands = new LifecycleCommandsImpl(mobileWebKit);

    });

    describe("onConnected", () => {

        it("should resolve if MobileWebkit is connected", () => {
            // Given
            isConnectedSpy.mockReturnValue(true);

            // When
            return lifecycleCommands.onConnected()
                .then(()=> {
                    // Then
                    expect(true);
                });
        });

        it("should resolve if MobileWebkit if connection event is triggered", () => {
            // Given
            isConnectedSpy.mockReturnValue(false);

            // When
            const promise =  lifecycleCommands.onConnected()
                .then(()=> {
                    // Then
                    expect(true);
                });

            mobileWebKit.dispatchEvent(NativeEvent.connect({data:{}}));
            return promise;
        });

    });

    it("onViewAppeared should call subscripbeMethod of eventCommands", () => {
        // Given
        const subscription = ()=>{};

        // When
        lifecycleCommands.onViewAppeared(subscription);

        // Then
        expect(subscribeSpy).toBeCalledWith("view_appeared", subscription);
    });

    it("onViewDisappeared should call subscripbeMethod of eventCommands", () => {
        // Given
        const subscription = ()=>{};

        // When
        lifecycleCommands.onViewDisappeared(subscription);

        // Then
        expect(subscribeSpy).toBeCalledWith("view_disappeared", subscription);
    });

    it("unsubscribe should call subscripbeMethod of eventCommands", () => {
        // Given
        const subscriptionId = {} as any;

        // When
        lifecycleCommands.unsubscribe(subscriptionId);

        // Then
        expect(unsubscribeSpy).toBeCalledWith(subscriptionId);
    });

});