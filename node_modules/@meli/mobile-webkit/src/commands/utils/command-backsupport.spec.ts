import { ErrorCodes, ErrorMessage } from "../../models";
import { BacksupportCallback, sendUnavailableArgsError, UnavailableArgs } from "./command-backsupport";

describe("CommandBackSupport", () => {

    describe("sendUnavailableArgsError", () => {

        it("should return a result if backSupportCallback is not undefined", () => {
            // Given
            const result = "Test Result";
            const command = "test command"
            const unavailable: UnavailableArgs = [{ field: "test field", value: 123 }];
            const backSupportCallback: BacksupportCallback = jest.fn();
            // When
            return sendUnavailableArgsError({
                command,
                expectedResult: result,
                unavailableArgs: unavailable,
                backsupportCallback: backSupportCallback
            })
                .then(res => {
                    // Then        
                    expect(res).toEqual(result);
                    expect(backSupportCallback).toHaveBeenCalledWith({ command, unavailableArgs: unavailable });
                });
        });

        it("should return an error if backSupportCallback is undefined", () => {
            // Given
            const result = "Test Result";
            const command = "test command"
            const unavailable: UnavailableArgs = [{ field: "test field", value: 123 }]
            // When
            return sendUnavailableArgsError({
                command,
                expectedResult: result,
                unavailableArgs: unavailable
            })
                .catch(error => {
                    // Then        
                    const expectedError: ErrorMessage = { code: ErrorCodes.UnavailableCommand, data: { command, unavailableArgs: unavailable } };
                    expect(error).toEqual(expectedError);
                });
        });
    });

});