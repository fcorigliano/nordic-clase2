import { MobileWebkit } from "../../mobile-webkit";
import { MobileWebkitEngine } from "../../mobile-webkit-engine";
import { ErrorCodes, ErrorMessage } from "../../models";

export type CommandBuilder<T> = (mobileWebKit: MobileWebkit) => T;
export type UnavailableArgs = { field: string, value: any }[];
export type BacksupportCallback = (unavailable: { command: string, unavailableArgs: UnavailableArgs }) => void;

export interface CommandBackSupport<T> {
    [MobileWebkitEngine.Legacy]: CommandBuilder<T>;
    [MobileWebkitEngine.V200]: CommandBuilder<T>;
}

export function sendUnavailableArgsError<T>(data: {
    command: string,
    unavailableArgs: UnavailableArgs,
    expectedResult?: T,
    backsupportCallback?: BacksupportCallback
}): Promise<T> {
    const { command, unavailableArgs, expectedResult, backsupportCallback } = data
    if (backsupportCallback) {
        backsupportCallback({ command, unavailableArgs: unavailableArgs ?? []});
        return Promise.resolve(expectedResult);
    }
    const error: ErrorMessage = {
        code: ErrorCodes.UnavailableCommand, data: {
            command,
            unavailableArgs
        }
    };
    return Promise.reject(error);
}


