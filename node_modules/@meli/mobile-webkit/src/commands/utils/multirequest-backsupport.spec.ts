import { UnavailableArgs } from "./command-backsupport";
import { getSupportMultirequest, MultiRequestBackSupport } from "./multirequest-backsupport";

describe("getSupportMultirequest", () => {

    it("should return a list of request with back support", () => {
        // Given
        const args = { field1: 123, field2: true };
        const requestSupport: MultiRequestBackSupport = {
            field1: (value) => [{ method: "field_1", args: { value } }],
            field2: (value) => [{ method: "field_2", args: { enabled: value } }]
        }

        // When
        const { requests, unavailable } = getSupportMultirequest(args, requestSupport);

        // Then
        const requestExpected = [
            { method: "field_1", args: { value: 123 } },
            { method: "field_2", args: { enabled: true } }
        ];
        expect(requests).toEqual(requestExpected);
        expect(unavailable).toHaveLength(0);

    });

    it("should return a list of unavailable args", () => {
        // Given
        const args = { field1: 123, field2: true };
        const requestSupport: MultiRequestBackSupport = {}

        // When
        const { requests, unavailable } = getSupportMultirequest(args, requestSupport);

        // Then
        const expectedUnavailable: UnavailableArgs = [
            { field: "field1", value: 123 },
            { field: "field2", value: true }
        ]
        expect(requests).toHaveLength(0);
        expect(unavailable).toEqual(expectedUnavailable);
    });

});