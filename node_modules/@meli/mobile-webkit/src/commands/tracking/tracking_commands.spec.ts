import { MobileWebkit } from "../../mobile-webkit";
import { AnalyticsOptions } from "./analytics_options";
import { FirebaseOptions } from "./firebase_options";
import { MelidataOptions } from "./melidata_options";
import { TrackingCommandsImpl } from "./tracking_commands_impl";

describe("TrackingCommands", ()=>{

    let executeNativeSpy: jest.Mock<any, any>;
    let mobileWebKit: MobileWebkit;
    let commands: TrackingCommandsImpl;

    beforeEach(() => {
        executeNativeSpy = jest.fn();
        mobileWebKit = {
            executeNative: executeNativeSpy
        } as any;
        commands = new TrackingCommandsImpl(mobileWebKit);
    })

    it("analytics should call executeNative with method track_analytics", ()=>{
        // Given 
        const args : AnalyticsOptions = {
            type: "pageview",
            action: "testAction"
        };

        // When
        commands.analytics(args);

        // Then
        expect(executeNativeSpy).toHaveBeenLastCalledWith({
            method: 'track_analytics',
            args
        });
    });

    it("melidata should call executeNative with method track_melidata", ()=>{
        // Given 
        const args : MelidataOptions = {
            type: "event",
            deeplink: "test deeplink"
        };

        // When
        commands.melidata(args);

        // Then
        expect(executeNativeSpy).toHaveBeenLastCalledWith({
            method: 'track_melidata',
            args
        });
    });

    it("firebase should call executeNative with method track_firebase", ()=>{
        // Given 
        const args : FirebaseOptions = {
            type: "event",
            data: {
                event_name: "event name"
            }
        };

        // When
        commands.firebase(args);

        // Then
        expect(executeNativeSpy).toHaveBeenLastCalledWith({
            method: 'track_firebase',
            args
        });
    });
});
