import { MobileWebkit } from "../mobile-webkit";
import { MobileWebkitEngine } from "../mobile-webkit-engine";
import { ActionsCommandsImpl } from "./actions/actions_commands_impl";
import { BarCommandsImpl } from "./bar/bar_commands_impl";
import { CommandProvider } from "./command-provider";
import { EventCommandsImpl } from "./events/event_commands_impl";
import { TrackingCommandsImpl } from "./tracking/tracking_commands_impl";
import { SettingsCommandsImpl } from "./settings/settings_commands_impl";
import { LifecycleCommandsImpl } from "./lifecycle/lifecycle_commands_impl";

describe("CommandProvider", () => {

    let mobileWebKit: MobileWebkit;
    let commandProvider: CommandProvider;

    beforeEach(() => {
        mobileWebKit = {
            engine: MobileWebkitEngine.V200
        } as MobileWebkit;
        commandProvider = new CommandProvider(mobileWebKit);
    });

    describe("events", () => {
        it("should return and mantain an instance of EventCommands", () => {
            // When
            const command = commandProvider.getEventCommands();

            // Then
            expect(command).toEqual(commandProvider["events"]);
            expect(command).toBeInstanceOf(EventCommandsImpl)
        });
    });

    describe("bar", () => {
      it("should return and mantain an instance of BarCommands", () => {
        // When
        const command = commandProvider.getBarCommands();

        // Then
        expect(command).toEqual(commandProvider["bar"]);
        expect(command).toBeInstanceOf(BarCommandsImpl);
      });
    });

    describe("settings", () => {
      it("should return and mantian an instance of SettingsCommands", () => {
        // When
        const command = commandProvider.getSettingsCommands();

        // Then
        expect(command).toEqual(commandProvider["settings"]);
        expect(command).toBeInstanceOf(SettingsCommandsImpl);
      });
    });

    describe("tracking", () => {
        it("should return and mantain an instance of TrackingCommands", () => {
            // When
            const command = commandProvider.getTrackingCommands();

            // Then
            expect(command).toEqual(commandProvider["tracking"]);
            expect(command).toBeInstanceOf(TrackingCommandsImpl)
        });
    });

    describe("actions", () => {
        it("should return and maintain an instance of ActionCommandsImpl", () => {
            // When
            const command = commandProvider.getActionsCommands();

            // Then
            expect(command).toEqual(commandProvider["actions"]);
            expect(command).toBeInstanceOf(ActionsCommandsImpl);
        });

        it("should return and maintain an instance of ActionCommandsImpl when using Legacy engine", () => {
            // When
            mobileWebKit = {
                engine: MobileWebkitEngine.Legacy
            } as MobileWebkit;
            const command = commandProvider.getActionsCommands();

            // Then
            expect(command).toEqual(commandProvider["actions"]);
            expect(command).toBeInstanceOf(ActionsCommandsImpl);
        });
    });

    describe("lifecycle", () => {
        it("should return and mantain an instance of LifecycleCommands", () => {
            // When
            const command = commandProvider.getLifecycleCommands();

            // Then
            expect(command).toEqual(commandProvider["lifecycle"]);
            expect(command).toBeInstanceOf(LifecycleCommandsImpl)
        });
    });
});
