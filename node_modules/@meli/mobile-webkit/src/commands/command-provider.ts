import { MobileWebkit } from "../mobile-webkit";
import { EventCommands } from "./events/event_commands";
import { NavigationCommands } from "./navigation/navigation_commands";
import { eventsBackSupport } from "./events/event_backsupport";
import { navigationBackSupport } from "./navigation/navigation_backsupport";
import { BarCommands } from "./bar/bar_commands";
import { barBackSupport } from "./bar/bar-backsupport";
import { ActionCommands } from "./actions/actions_commands";
import { actionsbackSupport } from "./actions/actions_backsupport";
import { SettingsCommands } from "./settings/settings_commands";
import { settingsBackSupport } from "./settings/settings-backsupport";
import { SessionCommands } from "./session/session_commands";
import { sessionBackSupport } from "./session/session_backsupport";
import { TrackingCommands } from "./tracking/tracking_commands";
import { trackingBackSupport } from "./tracking/tracking_backsupport";
import { LifecycleCommands } from "./lifecycle/lifecycle_commands";
import { lifecycleBackSupport } from "./lifecycle/lifecycle_backsupport";

export class CommandProvider {

    private events: EventCommands;
    private bar: BarCommands;
    private actions: ActionCommands;
    private tracking: TrackingCommands;
    private navigation: NavigationCommands;
    private settings: SettingsCommands;
    private session: SessionCommands;
    private lifecycle: LifecycleCommands;

    constructor(private mobileWebKit: MobileWebkit) { }

    getEventCommands(): EventCommands {
        if (!this.events) {
            this.events = eventsBackSupport[this.mobileWebKit.engine](this.mobileWebKit)
        }
        return this.events;
    }

    getBarCommands(): BarCommands {
        if (!this.bar) {
            this.bar = barBackSupport[this.mobileWebKit.engine](this.mobileWebKit)
        }
        return this.bar;
    }

    getSettingsCommands(): SettingsCommands {
      if (!this.settings) {
        this.settings = settingsBackSupport[this.mobileWebKit.engine](
          this.mobileWebKit
        );
      }
      return this.settings;
    }

    getActionsCommands(): ActionCommands {
        if (!this.actions) {
            this.actions = actionsbackSupport[this.mobileWebKit.engine](this.mobileWebKit);
        }
        return this.actions;
    }

    getNavigationCommands():NavigationCommands{
        if (!this.navigation) {
            this.navigation = navigationBackSupport[this.mobileWebKit.engine](this.mobileWebKit)
        }
        return this.navigation;
    }

    getSessionCommands(): SessionCommands {
        if (!this.session) {
            this.session = sessionBackSupport[this.mobileWebKit.engine](this.mobileWebKit);
        }
        return this.session;
    }
    
    getTrackingCommands(): TrackingCommands {
        if (!this.tracking) {
            this.tracking = trackingBackSupport[this.mobileWebKit.engine](this.mobileWebKit);
        }
        return this.tracking;
    }

    getLifecycleCommands(): LifecycleCommands {
        if (!this.lifecycle) {
            this.lifecycle = lifecycleBackSupport[this.mobileWebKit.engine](this.mobileWebKit);
        }
        return this.lifecycle;
    }
}