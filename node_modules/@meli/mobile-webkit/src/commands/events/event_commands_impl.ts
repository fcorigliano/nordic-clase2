import { RequestNativeEventArgs } from "../../events/native-event";
import { NativeEventType } from "../../events/native-event-type";
import { MobileWebkit } from "../../mobile-webkit";
import { EventCommands } from "./event_commands";
import { EventIdGenerator } from "./utils/event_id_generator";
import { EventSubscriptionId, Subscription } from "./utils/event_subscription_id";

export class EventCommandsImpl implements EventCommands {

    private idGenerator = new EventIdGenerator();

    constructor(private mobileWebKit: MobileWebkit) { }

    subscribe(topic: string, subscription: Subscription): EventSubscriptionId {
        const eventMethod = this.idGenerator.generateId();
        return this.subscribeWithMethod(topic, eventMethod, subscription);
    }

    subscribeWithMethod(topic: string, eventMethod: string, subscription: Subscription): EventSubscriptionId {
        this.mobileWebKit.executeNative({
            method: "subscribe_event",
            args: {
                topic,
                event_method: eventMethod
            }
        });

        const eventSubscription = (event: CustomEvent<RequestNativeEventArgs>) => {
            const { method } = event.detail;
            if (method == eventMethod) {
                subscription(event);
            }
        }

        this.mobileWebKit.on(NativeEventType.nativeRequest, eventSubscription);

        return {
            id: eventMethod,
            topic,
            subscription: eventSubscription
        }
    }

    subscribeMethod(eventMethod: string, subscription: Subscription): EventSubscriptionId {
        const eventSubscription = (event: CustomEvent<RequestNativeEventArgs>) => {
            const { method } = event.detail;
            if (method == eventMethod) {
                subscription(event);
            }
        }

        this.mobileWebKit.on(NativeEventType.nativeRequest, eventSubscription);

        return {
            id: eventMethod,
            topic: undefined,
            subscription: eventSubscription
        }
    }

    unsubscribe(eventId: EventSubscriptionId): Promise<string> {
        const { topic, id, subscription } = eventId;

        this.mobileWebKit.off(NativeEventType.nativeRequest, subscription);

        if(!topic) return Promise.resolve("Success");

        return this.mobileWebKit.executeNative({
            method: "unsubscribe_event",
            args: {
                topic,
                event_method: id
            }
        });
    }

    dispatch(topic: string, data: { [key: string]: any }): Promise<string> {
        return this.mobileWebKit.executeNative({
            method: "dispatch_event",
            args: {
                topic,
                data
            }
        });
    }
}
