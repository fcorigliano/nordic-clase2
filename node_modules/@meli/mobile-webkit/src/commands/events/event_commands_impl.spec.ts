import { MobileWebkit } from "../../mobile-webkit";
import { EventCommandsImpl } from "./event_commands_impl";
import { EventIdGenerator } from "./utils/event_id_generator";
import { EventSubscriptionId, Subscription } from "./utils/event_subscription_id";

describe("EventCommands", () => {

    let offSpy: jest.Mock<any, any>;
    let onSpy: jest.Mock<any, any>;
    let executeNativeSpy: jest.Mock<any, any>;
    let generateIdSpy: jest.Mock<any, any>;

    let mobileWebKit: MobileWebkit;
    let eventCommands: EventCommandsImpl;

    beforeEach(() => {

        offSpy = jest.fn();
        onSpy = jest.fn();
        executeNativeSpy = jest.fn();
        generateIdSpy = jest.fn();

        const idGenerator: EventIdGenerator = {
            generateId: generateIdSpy
        };

        mobileWebKit = {
            executeNative: executeNativeSpy,
            on: onSpy,
            off: offSpy
        } as any

        eventCommands = new EventCommandsImpl(mobileWebKit);
        eventCommands["idGenerator"] = idGenerator;
    });

    describe("subscribe", () => {
        it("should call executeNative with method subscribe_event", () => {
            // Given
            const topic = "test topic";
            const subscription: Subscription = () => { };
            const id = "123";
            generateIdSpy.mockReturnValue(id);

            // When
            eventCommands.subscribe(topic, subscription);

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith({
                method: "subscribe_event",
                args: {
                    topic,
                    event_method: id
                }
            });
        });

        it("should add event listener to MobileWebKit", () => {
            // Given
            const topic = "test topic";
            const subscription: Subscription = () => { };

            // When
            eventCommands.subscribe(topic, subscription);

            // Then
            expect(onSpy).toHaveBeenCalled();
        });

        it("should return a EventSubscriptionId", () => {
            // Given
            const topic = "test topic";
            const subscription: Subscription = () => { };
            const id = "123";
            generateIdSpy.mockReturnValue(id);

            // When
            const result = eventCommands.subscribe(topic, subscription);

            // Then
            expect(result.id).toEqual(id);
            expect(result.topic).toEqual(topic);
        });
    });

    describe("subscribeWithMethod", () => {
        it("should call executeNative with method subscribe_event", () => {
            // Given
            const topic = "test topic";
            const method = "test method";
            const subscription: Subscription = () => { };

            // When
            eventCommands.subscribeWithMethod(topic, method, subscription);

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith({
                method: "subscribe_event",
                args: {
                    topic,
                    event_method: method
                }
            });
        });

        it("should add event listener to MobileWebKit", () => {
            // Given
            const topic = "test topic";
            const method = "test method";
            const subscription: Subscription = () => { };

            // When
            eventCommands.subscribeWithMethod(topic, method, subscription);

            // Then
            expect(onSpy).toHaveBeenCalled();
        });

        it("should return a EventSubscriptionId", () => {
            // Given
            const topic = "test topic";
            const method = "test method";
            const subscription: Subscription = () => { };

            // When
            const result = eventCommands.subscribeWithMethod(topic, method, subscription);

            // Then
            expect(result.id).toEqual(method);
            expect(result.topic).toEqual(topic);
        });
    });

    describe("subscribeMethod", () => {
        it("should add event listener to MobileWebKit", () => {
            // Given
            const method = "test method";
            const subscription: Subscription = () => { };

            // When
            eventCommands.subscribeMethod(method, subscription);

            // Then
            expect(onSpy).toHaveBeenCalled();
        });

        it("should return a EventSubscriptionId", () => {
            // Given
            const method = "test method";
            const subscription: Subscription = () => { };

            // When
            const result = eventCommands.subscribeMethod(method, subscription);

            // Then
            expect(result.id).toEqual(method);
            expect(result.topic).toEqual(undefined);
        });
    });


    describe("unsubscribe", () => {
        it("should remove subscription in MobileWebKit", () => {
            // Given
            const id = "123";
            const subscription = () => { };
            const topic = "test topic";
            const eventId: EventSubscriptionId = { id, subscription, topic };

            // When
            eventCommands.unsubscribe(eventId);

            // Then
            expect(offSpy).toHaveBeenCalledWith("native_request", subscription);
        });

        it("should call executeNative with method unsubscribe_event", () => {
            // Given
            const id = "123";
            const subscription = () => { };
            const topic = "test topic";
            const eventId: EventSubscriptionId = { id, subscription, topic };

            // When
            eventCommands.unsubscribe(eventId);

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith({
                method: 'unsubscribe_event',
                args: {
                    topic,
                    event_method: id
                }
            });
        });

        it("should not call executeNative if topic is undefined", () => {
            // Given
            const id = "123";
            const subscription = () => { };
            const eventId: EventSubscriptionId = { id, subscription, topic: undefined };

            // When
            eventCommands.unsubscribe(eventId);

            // Then
            expect(offSpy).toHaveBeenCalledWith("native_request", subscription);
            expect(executeNativeSpy).not.toHaveBeenCalled();
        });
    });

    describe("dispatch", () => {
        it("should call executeNative with method dispatch_event", () => {
            // Given
            const topic = "test topic";
            const data = { value: "test value" }

            // When
            eventCommands.dispatch(topic, data);

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith({
                method: 'dispatch_event',
                args: {
                    topic,
                    data
                }
            });
        });
    });
});
