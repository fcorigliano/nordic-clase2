import { MobileWebkit } from "../../../mobile-webkit";
import { BacksupportCallback, sendUnavailableArgsError } from "../../utils/command-backsupport";
import { getSupportMultirequest } from "../../utils/multirequest-backsupport";
import { BarCommands, BarRightButtonSubscription } from "../bar_commands";
import { BarCommandsImpl } from "../bar_commands_impl";
import { BarSetupOptions } from "../bar_setup_options";

export class BarCommandsLegacy implements BarCommands {

    private barCommands: BarCommandsImpl = new BarCommandsImpl(this.mobileWebKit);
    private readonly setupOptionsSupport = {
        bar_title: (value: string) => [{ method: "set_title", args: { title: value } }],
        bar_color: (value: string) => [{ method: "bar_color", args: { color: value } }],
        bar_left_button_style: (value: string) => [
            { method: "back_style", args: { type: value } },
            ...value != "none"
                ? [{ method: "back_action", args: { type: value } }]
                : []
        ]
    }

    constructor(private mobileWebKit: MobileWebkit) { }

    setup(args: BarSetupOptions, backsupport?: BacksupportCallback): Promise<string> {
        const { requests, unavailable } = getSupportMultirequest(args, this.setupOptionsSupport);
        return this.mobileWebKit.multiExecuteNative({
            args: requests
        }).then(result => sendUnavailableArgsError({
            command: "setup_bar",
            expectedResult: result,
            unavailableArgs: unavailable,
            backsupportCallback: backsupport
        }));
    }

    subscribeToRightButtonClick(barRightButtonSubscription: BarRightButtonSubscription): BarRightButtonSubscription {
        return this.barCommands.subscribeToRightButtonClick(barRightButtonSubscription);
    }
    unsubscribeToRightButtonClick(subscription: BarRightButtonSubscription): void {
        this.barCommands.unsubscribeToRightButtonClick(subscription);
    }

}