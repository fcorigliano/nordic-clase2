import { MobileWebkit } from "../../../mobile-webkit";
import { ErrorCodes, ErrorMessage } from "../../../models";
import { BacksupportCallback, UnavailableArgs } from "../../utils/command-backsupport";
import { BarRightButtonSubscription } from "../bar_commands";
import { BarCommandsImpl } from "../bar_commands_impl";
import { BarSetupOptions } from "../bar_setup_options";
import { BarCommandsLegacy } from "./bar_commands_legacy";

describe("BarCommandsLegacy", () => {

    let multiExecuteNativeSpy: jest.Mock<any, any>;
    let legacy: BarCommandsLegacy;
    let base: BarCommandsImpl;

    beforeEach(() => {
        multiExecuteNativeSpy = jest.fn();
        const mobileWebKit: MobileWebkit = {
            multiExecuteNative: multiExecuteNativeSpy
        } as any;
        base = {
            setup: jest.fn(),
            subscribeToRightButtonClick: jest.fn(),
            unsubscribeToRightButtonClick: jest.fn()
        } as any;
        legacy = new BarCommandsLegacy(mobileWebKit);
        legacy["barCommands"] = base;
    });

    describe("setup", () => {
        const args: BarSetupOptions = {
            bar_color: "#ff0000",
            bar_left_button_style: "back",
            bar_elevation: "default",
            bar_title: "test title"
        }

        const returnValue = "Success";
        let backsupportCallback: BacksupportCallback;

        beforeEach(() => {
            multiExecuteNativeSpy.mockResolvedValue(returnValue);
            backsupportCallback = jest.fn();
        });

        it("should call executeNative with supported methods", () => {
            // When
            legacy.setup(args, backsupportCallback);

            // Then
            const expectedRequests = [
                { method: "bar_color", args: { color: "#ff0000" } },
                { method: "back_style", args: { type: "back" } },
                { method: "back_action", args: { type: "back" } },
                { method: "set_title", args: { title: "test title" } }
            ]
            expect(multiExecuteNativeSpy).toHaveBeenCalledWith({
                args: expectedRequests
            });
        });

        it("should return a value and call backsupportCallback if it is setted", () => {
            // When
            return legacy.setup(args, backsupportCallback)
                .then(result => {
                    // Then
                    const expectedUnavailable: UnavailableArgs = [
                        { field: "bar_elevation", value: "default" }
                    ];
                    expect(result).toEqual(returnValue);
                    expect(backsupportCallback).toHaveBeenCalledWith({ command: "setup_bar", unavailableArgs: expectedUnavailable });
                });
        });

        it("setup return a error if backsupportCallback is not setted", () => {
            // When
            return legacy.setup(args)
                .catch(error => {
                    // Then
                    const expectedUnavailable: UnavailableArgs = [
                        { field: "bar_elevation", value: "default" }
                    ];
                    const expectedError: ErrorMessage = {
                        code: ErrorCodes.UnavailableCommand,
                        data: {
                            command: "setup_bar",
                            unavailableArgs: expectedUnavailable
                        }
                    };
                    expect(error).toEqual(expectedError);
                });
        });
    });


    it("subscribing to right button click should call the same method from base implementation", () => {
        // Given
        const barRightButtonSubscriptionSpy: BarRightButtonSubscription = jest.fn();

        // When
        legacy.subscribeToRightButtonClick(barRightButtonSubscriptionSpy);

        // Then
        expect(base.subscribeToRightButtonClick).toHaveBeenCalledWith(barRightButtonSubscriptionSpy);
    });

    it("unsubscribe should call the same method from base implementation", () => {
        // Given
        const subscription: BarRightButtonSubscription = () => { };

        // When
        legacy.unsubscribeToRightButtonClick(subscription);

        // Then
        expect(base.unsubscribeToRightButtonClick).toHaveBeenCalledWith(subscription);
    });

});