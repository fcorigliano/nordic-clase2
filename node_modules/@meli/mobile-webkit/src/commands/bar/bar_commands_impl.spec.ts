import { MobileWebkit } from "../../mobile-webkit";
import { BarCommands, BarRightButtonSubscription } from "./bar_commands";
import { BarSetupOptions } from "./bar_setup_options";
import { NativeEvent } from "../../events/native-event";
import { BarCommandsImpl } from "./bar_commands_impl";

describe("BarCommands", () => {

    let executeNativeSpy: jest.Mock<any, any>;
    let onSpy: jest.Mock<any, any>;
    let mobileWebKit: MobileWebkit;
    let barCommands: BarCommands;
    let offSpy: jest.Mock<any, any>;

    beforeEach(() => {
        executeNativeSpy = jest.fn();
        onSpy = jest.fn();
        offSpy = jest.fn();
        mobileWebKit = {
            executeNative: executeNativeSpy,
            on: onSpy,
            off: offSpy
        } as any;
        barCommands = new BarCommandsImpl(mobileWebKit);
    });

    it("setup should call executeNative with method setup_bar", () => {
        // Given
        const args: BarSetupOptions = {
            bar_color: "#ff0000",
            bar_left_button_style: "none",
            bar_elevation: "default",
            bar_title: "test title"
        }

        // When
        barCommands.setup(args);

        // Then
        expect(executeNativeSpy).toHaveBeenCalledWith({
            method: "setup_bar",
            args
        });
    });

    it("subscribing to right button click should subscribe to custom_navigation_icon_clicked", () => {
        // Given
        const eventMock = NativeEvent.nativeRequest({
            method: "custom_navigation_icon_clicked",
            args: null,
            callback: null
        })
        onSpy.mockImplementationOnce((event, callback) => {
            callback(eventMock);
        })
        const barRightButtonSubscriptionSpy: BarRightButtonSubscription = jest.fn();

        // When
        barCommands.subscribeToRightButtonClick(barRightButtonSubscriptionSpy);

        // Then
        expect(barRightButtonSubscriptionSpy).toHaveBeenCalledTimes(1);
    });

    it("should not call subscription if custom_navigation_icon_clicked event has not been received", () => {
        // Given
        const eventMock = NativeEvent.nativeRequest({
            method: "test_method",
            args: null,
            callback: null
        })
        onSpy.mockImplementationOnce((event, callback) => {
            callback(eventMock);
        })
        const barRightButtonSubscriptionSpy: BarRightButtonSubscription = jest.fn();

        // When
        barCommands.subscribeToRightButtonClick(barRightButtonSubscriptionSpy);

        // Then
        expect(barRightButtonSubscriptionSpy).toHaveBeenCalledTimes(0);
    });

    it("unsubscribe should remove subscription in MobileWebKit", ()=>{
        // Given
        const subscription: BarRightButtonSubscription = ()=>{};

        // When
        barCommands.unsubscribeToRightButtonClick(subscription);

        // Then
        expect(offSpy).toHaveBeenCalledWith("native_request", subscription);
    });
});
