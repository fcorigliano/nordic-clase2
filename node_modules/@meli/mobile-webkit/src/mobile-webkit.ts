import { NativeChannel } from './channel/native-channel';
import { ActionCommands, BarCommands, NavigationCommands, SessionCommands, TrackingCommands, EventCommands, CommandProvider, LifecycleCommands } from './commands';
import { DefaultConfig } from './config/default-config';
import { EventEmitter } from './events/event-emitter';
import { NativeEvent } from './events/native-event';
import { buildRequestInfo, JsInvocation, MessageFromNative, MultipleRequest, ProtocolValidator, Request, ToNativeMessageType } from './models';
import { CallbackContainer, Logger, toEnum } from './utils';
import { requestToPromise } from './utils/promises';
import { MobileWebkitEngine } from './mobile-webkit-engine';
import { SettingsCommands } from "./commands/settings/settings_commands";

export class MobileWebkit extends EventEmitter {

    readonly CALL_SCRIPT = "window.MobileWebKit.receiveMessageFromApp($___message___$)";
    readonly CALL_PLACEHOLDER = "$___message___$";

    private logger = new Logger();
    private callbackContainer = new CallbackContainer();
    private channel = new NativeChannel(this.logger, this.callbackContainer, this);
    private validator = new ProtocolValidator(this.logger);

    readonly Engines = MobileWebkitEngine;
    private _engine = MobileWebkitEngine.V200;
    get engine() {
        return this._engine
    }

    // Commands
    private commandProvider = new CommandProvider(this);
    get actions(): ActionCommands {
        return this.commandProvider.getActionsCommands();
    }
    get topbar(): BarCommands {
        return this.commandProvider.getBarCommands();
    }
    get events(): EventCommands {
        return this.commandProvider.getEventCommands();
    }
    get lifecycle(): LifecycleCommands {
        return this.commandProvider.getLifecycleCommands();
    }
    get navigation(): NavigationCommands {
        return this.commandProvider.getNavigationCommands();
    }
    get settings(): SettingsCommands {
        return this.commandProvider.getSettingsCommands();
    }
    get session(): SessionCommands {
        return this.commandProvider.getSessionCommands();
    }
    get tracking(): TrackingCommands {
        return this.commandProvider.getTrackingCommands();
    }


    connect() {
        this.logger.log("connecting to native");

        const jsInvocation: JsInvocation = {
            js_invocation: {
                call_script: this.CALL_SCRIPT,
                call_placeholder: this.CALL_PLACEHOLDER
            }
        };

        const request: Request = {
            args: jsInvocation,
            callback: (result, error) => {
                if (error) {
                    this.logger.log(error);
                    return
                }
                this._engine = toEnum<MobileWebkitEngine>({
                    enumType: MobileWebkitEngine,
                    value: result.webkit_engine,
                    defaultValue: MobileWebkitEngine.Legacy
                });
                this.channel.isConnected = true;
                this.logger.log("connected with app");

                const event = NativeEvent.connect({ data: result });
                this.dispatchEvent(event);
            }
        }

        const requestInfo = buildRequestInfo(ToNativeMessageType.Connect, request, DefaultConfig.connect);
        this.channel.sendMessageToApp(requestInfo);
    }

    executeNative(req: Request): Promise<any> {

        const promise = requestToPromise(req);

        if (!this.validator.hasRequestMethod(req)) {
            return;
        }

        if (!this.isConnected()) {
            return;
        }

        const requestInfo = buildRequestInfo(ToNativeMessageType.JSRequest, req, DefaultConfig.request);
        this.channel.sendMessageToApp(requestInfo);

        return promise;
    }

    multiExecuteNative(req: MultipleRequest): Promise<any> {

        const promise = requestToPromise(req);

        if (!this.validator.isValidMultiRequest(req)) {
            return;
        }

        if (!this.isConnected()) {
            return;
        }

        const requestInfo = buildRequestInfo(ToNativeMessageType.JSMultiRequest, req, DefaultConfig.multipleRequest);
        this.channel.sendMessageToApp(requestInfo);

        return promise;
    }

    receiveMessageFromApp(message: MessageFromNative) {
        this.logger.log("native -> js: receive message -> " + JSON.stringify(message));
        if (!this.validator.isValidNativeToJsMessage(message)) {
            return;
        }
        this.channel.receiveMessageFromApp(message);
    }

    isConnected() : boolean {
        return this.channel.isAppConnected()
    }
}

