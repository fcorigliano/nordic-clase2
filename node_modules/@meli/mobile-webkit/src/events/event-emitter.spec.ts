import { EventEmitter } from "./event-emitter";

describe("EventEmitter", ()=>{
    let eventEmitter:EventEmitter;
    beforeEach(()=>{
        eventEmitter = new EventEmitter();
    });

    it("addEventListener should add an eventListener", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        const callbackSpy = jest.fn();
        
        // When
        eventEmitter.addEventListener(type,callbackSpy);
        eventEmitter.dispatchEvent(event);
        
        // Then
        expect(callbackSpy).toBeCalled();
        
    });
    it("removeEventListener should remove an eventListener", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        const callbackSpy = jest.fn();
        
        // When
        eventEmitter.addEventListener(type,callbackSpy);
        eventEmitter.dispatchEvent(event);

        eventEmitter.removeEventListener(type, callbackSpy);
        eventEmitter.dispatchEvent(event);
        
        // Then
        expect(callbackSpy).toBeCalledTimes(1);
        
    });
    it("dispatchEvent should trigger an Event", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        // When
        eventEmitter.addEventListener(type, (value)=>{
            // Then
            expect(value).toEqual(event);
        });
        eventEmitter.dispatchEvent(event);
    });
    it("on should add an eventListener", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        const callbackSpy = jest.fn();
        
        // When
        eventEmitter.on(type,callbackSpy);
        eventEmitter.emit(event);
        
        // Then
        expect(callbackSpy).toBeCalled();
    });
    it("off should remove an eventListener", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        const callbackSpy = jest.fn();
        
        // When
        eventEmitter.on(type,callbackSpy);
        eventEmitter.emit(event);

        eventEmitter.off(type, callbackSpy);
        eventEmitter.emit(event);
        
        // Then
        expect(callbackSpy).toBeCalledTimes(1);
        
    });
    it("emit should trigger an Event", ()=>{
        // Given
        const type = "type";
        const event = new Event(type);
        // When
        eventEmitter.on(type, (value)=>{
            // Then
            expect(value).toEqual(event);
        });
        eventEmitter.emit(event);
        
    });
});