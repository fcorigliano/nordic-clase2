import { Callback } from ".";
import { ErrorCodes, ErrorMessage, Request } from "../models";
import { requestToPromise } from "./promises";

describe("requestToPromise", () => {

    it("should return a promise that resolve with the callback request", () => {
        // Given
        const result = 123;
        const request: Request = {
            args: {},
            method: "method"
        }

        // When
        const promise = requestToPromise(request);
        delay(100).then(() => request.callback(result, undefined))

        // Then
        return promise.then(value => expect(value).toEqual(result));

    });

    it("should return a promise that reject with the callback request", () => {
        // Given
        const error: ErrorMessage = {
            code: ErrorCodes.UnknownMessage,
            data: "Test error"
        };
        const request: Request = {
            args: {},
            method: "method"
        }

        // When
        const promise = requestToPromise(request);
        delay(100).then(() => request.callback(undefined, error))

        // Then
        return promise.catch(value => expect(value).toEqual(error));
    });

    it("should call the previous callback", () => {
        // Given
        const previousCallback:Callback = jest.fn();
        const result = 123;
        const request: Request = {
            args: {},
            method: "method",
            callback: previousCallback
        }

        // When
        const promise = requestToPromise(request);
        delay(100).then(() => request.callback(result, undefined))

        // Then
        return promise.then(value =>{
            expect(value).toEqual(result);
            expect(previousCallback).toHaveBeenCalledWith(value, undefined);
        });
    });

});

function delay(milis: number): Promise<Boolean> {
    return new Promise((resolve) => { setTimeout(() => resolve(true), milis) });
}