import { isEnumValue } from ".";
import { ToNativeMessageType } from "../models";
import { toEnum } from "./enum";

describe("enum", ()=>{
    describe("isEnumValue", () => {
        it("should return true if the value is a enum", () => {
            // Given
            const value = "connect";
    
            // When
            const result = isEnumValue(ToNativeMessageType, value);
    
            // Then
            expect(result).toBeTruthy();
        });
    
        it("should return false if the value is not a enum", () => {
            // Given
            const value = "not enum";
    
            // When
            const result = isEnumValue(ToNativeMessageType, value);
    
            // Then
            expect(result).toBeFalsy();
        });
    
    });

    describe("toEnum", ()=>{
        it("should return a value with enum type", ()=>{
            // Given
            const value = "V2";

            // When
            const enumValue = toEnum<TestEnum>({
                enumType:TestEnum, 
                value, 
                defaultValue:TestEnum.Value1
            });

            // Then
            expect(enumValue).toEqual(TestEnum.Value2);
        });

        it("should return a default enum value if in value is incorrect", ()=>{
            // Given
            const value = "incorrect";

            // When
            const enumValue = toEnum<TestEnum>({
                enumType:TestEnum, 
                value, 
                defaultValue:TestEnum.Value1
            });

            // Then
            expect(enumValue).toEqual(TestEnum.Value1);
        });
    });
});

enum TestEnum{
    Value1= "Value 1",
    Value2= "V2"
}


