import { Callback, CallbackContainer } from ".";

describe("CallbackContainer", () => {

    let callbackContainer:CallbackContainer;

    beforeEach(()=>{
        callbackContainer = new CallbackContainer();
    });

    describe("add", ()=>{
        it("should add a callback and return id", ()=>{
            // Given
            const callback1:Callback = ()=>{}
            const callback2:Callback = ()=>{}

            // When
            const result1 = callbackContainer.add(callback1);
            const result2 = callbackContainer.add(callback2);

            // Then
            expect(result1).toEqual(1);
            expect(result2).toEqual(2);
        });
    });

    describe("hasCallback", ()=>{
        it("should return true if callback exists", ()=>{
            // Given
            const callback:Callback = ()=>{};
            const callbackId = callbackContainer.add(callback);
            
            // When
            const result = callbackContainer.hasCallback(callbackId);

            // Then
            expect(result).toBeTruthy();
        });

        it("should return false if callback not exists", ()=>{
            // When
            const result = callbackContainer.hasCallback(1);

            // Then
            expect(result).toBeFalsy();
        });
    });

    describe("getAndRemove", ()=>{
        it("should return a callback a return of the map", ()=>{
            // Given
            const callback:Callback = ()=>{};
            const callbackId = callbackContainer.add(callback);

            // When
            const result = callbackContainer.getAndRemove(callbackId);
            const result2 = callbackContainer.getAndRemove(callbackId);

            // Then
            expect(result).toEqual(callback);
            expect(result2).toBeUndefined();
        });
    });
});
