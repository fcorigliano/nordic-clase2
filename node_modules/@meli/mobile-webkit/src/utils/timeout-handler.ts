import { CallbackContainer } from "./callback-container";
import { ErrorCodes, RequestInfo } from "../models";

export class TimeoutHandler {

    constructor(
        private callbackContainer: CallbackContainer,
        private retry: (requestInfo: RequestInfo) => void) { }

    run(requestInfo: RequestInfo) {
        if (requestInfo.timeout <= 0) {
            return;
        }
        setTimeout(() => this.handleTimeout(requestInfo), requestInfo.timeout);
    }

    private handleTimeout(requestInfo: RequestInfo) {
        const callbackId = requestInfo.internal_data.callback_id;
        const currentRetry = requestInfo.internal_data.current_retry_on_timeout;

        if (!this.callbackContainer.hasCallback(callbackId)) {
            return;
        }
        
        const retries = requestInfo.retries_on_timeout;

        if (retries > 0 && currentRetry < retries) {
            requestInfo.internal_data.current_retry_on_timeout = currentRetry + 1;
            setTimeout(()=>this.retry(requestInfo), requestInfo.retry_time_on_timeout);
            return;
        }

        const callback = this.callbackContainer.getAndRemove(callbackId);
        if (!callback) {
            return;
        }

        callback(undefined, {
            code: ErrorCodes.Timeout,
            data: {
                timeout: requestInfo.timeout,
                invocation: requestInfo
            }
        });
    }

}