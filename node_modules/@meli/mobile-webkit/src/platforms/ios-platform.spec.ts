import { IosPlatform } from "./ios-platform";

describe("IosPlatform", () => {

    let iosPlatform: IosPlatform;

    beforeEach(() => {
        iosPlatform = new IosPlatform();
    });

    describe("isAvailable", () => {

        it("should return true if WebviewSDKCommunicationChannel is available", () => {
            // Given
            givenWebviewSDKCommunicationChannel(true);

            // When
            const result = iosPlatform.isAvailable();

            // Then
            expect(result).toBeTruthy()
        });

        it("should return false if WebviewSDKCommunicationChannel is not available", () => {
            // Given
            givenWebviewSDKCommunicationChannel(false);

            // When
            const result = iosPlatform.isAvailable();

            // Then
            expect(result).toBeFalsy()
        });

    });

    describe("sendMessage", () => {
        it("should send a string to WebviewSDKCommunicationChannel", () => {
            // Given
            const postMessageSpy = jest.fn()
            givenWebviewSDKCommunicationChannel(true, postMessageSpy);
            const message = "test message";

            // When
            iosPlatform.sendMessage(message);

            // Then
            expect(postMessageSpy).toHaveBeenCalledWith(message)
        });
    });


});

function givenWebviewSDKCommunicationChannel(isAvailable: boolean, postMessageSpy: jest.Mock = null) {
    if (!isAvailable) {
        (window as any).webkit = undefined;
        return;
    }

    (window as any).webkit = {
        messageHandlers: {
            webviewSDKCommunicationChannel: {
                postMessage: postMessageSpy
            }
        }
    };
}