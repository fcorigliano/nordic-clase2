import { AndroidPlatform } from "./android-platform";

describe("AndroidPlatform", () => {

    let androidPlatform: AndroidPlatform;

    beforeEach(() => {
        androidPlatform = new AndroidPlatform();
    });

    describe("isAvailable", () => {

        it("should return true if WebviewSDKCommunicationChannel is available", () => {
            // Given
            givenWebviewSDKCommunicationChannel(true);

            // When
            const result = androidPlatform.isAvailable();

            // Then
            expect(result).toBeTruthy()
        });

        it("should return false if WebviewSDKCommunicationChannel is not available", () => {
            // Given
            givenWebviewSDKCommunicationChannel(false);

            // When
            const result = androidPlatform.isAvailable();

            // Then
            expect(result).toBeFalsy()
        });

    });

    describe("sendMessage", () => {
        it("should send a string to WebviewSDKCommunicationChannel", () => {
            // Given
            const executeNativeSpy = jest.fn()
            givenWebviewSDKCommunicationChannel(true, executeNativeSpy);
            const message = "test message";

            // When
            androidPlatform.sendMessage(message);

            // Then
            expect(executeNativeSpy).toHaveBeenCalledWith(message)
        });
    });
});

function givenWebviewSDKCommunicationChannel(isAvailable: boolean, executeNativeSpy: jest.Mock = null) {
    if (!isAvailable) {
        (window as any).WebviewSDKCommunicationChannel = undefined;
        return;
    }

    (window as any).WebviewSDKCommunicationChannel = {
        executeNative: executeNativeSpy
    };
}