import { Logger } from "../utils";
import { Platform } from "./platform";
import { PlatformFactory } from "./platform-factory";

describe("PlatformFactory", () => {

    let logSpy: jest.Mock;
    let factory: PlatformFactory;

    beforeEach(() => {
        logSpy = jest.fn();
        const logger = { log: logSpy } as Logger;
        factory = new PlatformFactory(logger);
    });

    describe("getPlatform", () => {
        it("should return a available platform", () => {
            // Given
            const testPlatform = new TestPlatform(true);
            factory["platforms"] = [testPlatform];

            // When
            const platform = factory.getPlaform();

            // Then
            expect(platform).toEqual(testPlatform);
        });

        it("should return undefined if there not a available platform", () => {
            // Given
            const testPlatform = new TestPlatform(false);
            factory["platforms"] = [testPlatform];

            // When
            const platform = factory.getPlaform();

            // Then
            expect(platform).toBeUndefined();
        });

    });

});

class TestPlatform implements Platform {

    constructor(private isActive: boolean) { }

    isAvailable(): boolean {
        return this.isActive;
    }

    sendMessage(message: string): void { }
}
