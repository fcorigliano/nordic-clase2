import { MultipleRequest } from "../request/multiple-request";
import { MessageFromNative } from "../from-native/message-from-native";
import { FromNativeMessageType } from "../from-native/from-native-message-type";
import { Request } from "../request/request";
import { findItem, Logger, isEnumValue } from "../../utils";

export class ProtocolValidator {

    constructor(private logger: Logger) { }

    hasRequestMethod(request: Request): boolean {
        if (!request.method) {
            this.logger.log("Invalid invocation");
            return false;
        }
        return true;
    }

    isValidMultiRequest(req: MultipleRequest): boolean {
        if (!req.args || req.args?.length <= 0) {
            this.logger.log("Invalid multi invocation");
            return false;
        }

        const invalidArg = findItem(req.args, item => !item.method);
        if (invalidArg != undefined) {
            this.logger.log("Invalid multi invocation");
            return false;
        }
        return true;
    }

     isValidNativeToJsMessage(message: MessageFromNative): boolean {
        const messageType = message.message_type;
        if (!isEnumValue(FromNativeMessageType, messageType)) {
            this.logger.log("Invalid protocol menssage");
            return false;
        }

        if (messageType === FromNativeMessageType.NativeRequest && !message.method) {
            this.logger.log("Invalid protocol message native_request without method");
            return false;
        }

        return true;
    }
}
