/*
 * Module dependencies
 */
const env = require('frontend-env');
const KVS = require('./KVS');
const LRU = require('./LRU');

/**
 * Cache expose a client that can be used to perform operations related to save,
 * retrieve and delete values from a cache storage.
 * Internally, it uses the package @meli/node-caches.
 *
 * Check out the link below for more info about @meli/node-caches
 * https://github.com/mercadolibre/fury_node-caches
 *
 * @example <caption>Save a value.</caption>
 * // create a cache instance
 * const cache = new Cache();
 *
 * // save value in cache
 * await cache.set('some-key', 'some-value');
 *
 * @example <caption>Retrieve a value.</caption>
 * // create a cache instance
 * const cache = new Cache();
 *
 * // get value from cache
 * const value = await cache.get('your-key');
 *
 * // print the value
 * console.log(value); // "some-value"
 *
 * @example <caption>Delete a value.</caption>
 * // create a cache instance
 * const cache = new Cache();
 *
 * // delete value from cache
 * await cache.delete('your-key');
 *
 * // get value from cache
 * const value = await cache.get('your-key');
 *
 * // print the value
 * console.log(value); // undefined
 */
class Cache {
  /**
   * Create a Cache instance.
   * The underlying client could be a KVS or LRU client. The decision is made
   * based on the value of process.env.NODE_ENV.
   *
   * When process.env.NODE_ENV is equal to "production", the KVS client is used.
   * Otherwise, the LRU client is instantiated.
   */
  constructor(kvsConfig) {
    return env.PRODUCTION
      ? new KVS(kvsConfig)
      : new LRU();
  }
}

module.exports = kvsConfig => new Cache(kvsConfig);
