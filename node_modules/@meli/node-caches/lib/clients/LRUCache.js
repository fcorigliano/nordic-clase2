/**
 * Module dependencies
 */
const BaseClient = require('./BaseClient');
const logger = require('frontend-logger')('LRUCache');
const LRUCache = require('stale-lru-cache');

/**
 * LRUCache Client implementing Promises
 */
class LRUCacheClient extends BaseClient {
  /**
   * Initialize client
   *
   * @param {Object} configs client specific configurations
   * @param {Object} options options for the implementation
   */
  constructor(configs = {}, options = {}) {
    super(configs, options, 'LRUCache');
    this.client = new LRUCache(configs);
  }

  /**
   * Get value from key
   *
   * @param {String} key to find on cache
   * @returns {Promise<Object>} data from cache
   */
  get(key) {
    /* istanbul ignore next */ // eslint-disable-next-line no-unused-expressions
    this.shouldLog() && logger.debug(`Getting key "${key}"`);
    this.trace(BaseClient.OPERATIONS_ALLOWED.GET, this.name);

    const data = this.client.get(key);

    // Return a copy
    if (data) {
      const copy = JSON.parse(JSON.stringify(data));
      return Promise.resolve(copy);
    }

    return Promise.resolve(data);
  }

  /**
   * Set value on a key with specific options
   *
   * @param {String} key to find on cache
   * @param {String} value from cache
   * @param {Number} [lifetime=86400] in seconds. The default is 24 hours
   * @returns {Promise<void>}
   */
  set(key, value, lifetime = this.lifetime) {
    return new Promise((resolve, reject) => { // eslint-disable-line consistent-return
      if (!key || !value) return reject(new Error('key and value are required'));

      /* istanbul ignore next */ // eslint-disable-next-line no-unused-expressions
      this.shouldLog() && logger.debug(`Setting key "${key}" with value "${JSON.stringify(value)}"`);
      this.trace(BaseClient.OPERATIONS_ALLOWED.SET, this.name);

      const res = this.client.set(key, value, {
        maxAge: lifetime,
      });
      resolve(res);
    });
  }

  /**
   * Delete key from cache
   *
   * @param {String} key to find on cache
   * @returns {Promise<void>}
   */
  delete(key) {
    return new Promise((resolve) => {
      /* istanbul ignore next */ // eslint-disable-next-line no-unused-expressions
      this.shouldLog() && logger.debug(`Deleting key "${key}"`);
      this.trace(BaseClient.OPERATIONS_ALLOWED.DELETE, this.name);
      const res = this.client.delete(key);
      resolve(res);
    });
  }

  /**
   * Cleans all the cache
   *
   * @returns {Promise<any>} indicating if the clean was correctly done
   */
  reset() {
    return new Promise((resolve) => {
      /* istanbul ignore next */ // eslint-disable-next-line no-unused-expressions
      this.shouldLog() && logger.debug('Flushing cache');
      this.trace(BaseClient.OPERATIONS_ALLOWED.FLUSH, this.name);

      this.client.reset();
      // eslint-disable-next-line no-underscore-dangle
      resolve(this.client._size === 0);
    });
  }
}

/**
 * Expose LRUCacheClient
 */
module.exports = LRUCacheClient;
