/**
 * Module dependencies
 */
const statsdInternal = require('frontend-statsd/internal');
const { PRODUCTION } = require('frontend-env');
const defaults = require('../../config/defaults');

/**
 * BaseClient
 *
 * This class is going to be the parent of all the cache clients implementations
 * Should have all the methods that are commons through implementations
 */
class BaseClient {
  static get OPERATIONS_ALLOWED() {
    return {
      GET: 'get',
      SET: 'set',
      DELETE: 'delete',
      FLUSH: 'flush',
    };
  }

  /**
   * Initialize context variables
   *
   * @param {Object} configs client specific configurations
   * @param {Object} options functional configurations
   * @param {String} name of the client
   */
  constructor(configs = {}, options = {}, name = 'UNKNOWN') { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    const logsEnabled = PRODUCTION ? false : defaults.logs; // Disabled on production by default
    // Set options object from default and options argument
    this.options = { logs: logsEnabled, ...options };
    this.name = name;
    this.lifetime = defaults.lifetime;
  }

  /**
   * Tracing operation on DataDog
   *
   * @param {String} operation type executed
   * @param {String} client use for operation
   */
  trace(operation, client) {
    statsdInternal.increment('platform.cache.operations', 1, {
      client,
      operation,
    });
  }

  /**
   * Depending on the configurations is going to tell you if logs are allowed
   *
   * @returns {Boolean} should log message
   */
  shouldLog() {
    return this.options.logs;
  }
}

module.exports = BaseClient;
