// Only allow primitive types in tags
export type Tags = Record<string, string | number | boolean | undefined | null>

declare class LoggerClass {
  constructor(name: string);

  /**
   * Log an information message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   *
   * @example
   * log.info('Log a custom message.', { site: 'MLA' });
   * // 2016-11-22T19:42:34.872Z - info: Log a custom message - [name:myapp] [site:MLA] [level:INFO]
   */
  info(message: string, tags?: Tags): void;

  /**
   * Log a warning message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   *
   * @example
   * log.warn('Log a custom message.', { site: 'MLA' });
   * // 2016-11-22T19:42:34.872Z - warn: Log a custom message - [name:myapp] [site:MLA] [level:WARN]
   */
  warn(message: string, tags?: Tags): void;

  /**
   * Log an error message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   *
   * @example
   * log.error(err, { site: 'MLA' });
   * // 2016-11-22T20:54:46.390Z - error: Error: Cannot find module 'foo' - [name:myapp] [site:MLA] [level:ERROR]
   */
  error(message: string, tags?: Tags): void;

  /**
   * Log a verbose message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   */
  verbose(message: string, tags?: Tags): void;

  /**
   * Log a debug message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   */
  debug(message: string, tags?: Tags): void;

  /**
   * Log a silly message
   *
   * @param message Message to log
   * @param tags Kibana tags to log. Only primitive types accepted, objects and arrays will not be properly logged
   */
  silly(message: string, tags?: Tags): void;
}

type LoggerFactory = (name: string) => LoggerClass;
export const LoggerFactory: LoggerFactory;
