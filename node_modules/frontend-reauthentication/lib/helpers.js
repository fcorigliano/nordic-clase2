"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsonResponse = exports.getConfigByOperationId = exports.getUserIP = exports.setReauthCookie = void 0;
const http_1 = require("http");
const config_service_1 = require("@auth/config-service");
const constants_1 = require("./data/constants");
const config = require("frontend-config"); // eslint-disable-line import/order
/**
 * Returns the preferred value for SameSite attribute by checking its full support of client
 */
const getSameSiteValue = (req) => {
    const hasSupport = (req.browser?.support?.sameSite) || false;
    return hasSupport ? 'none' : false;
};
const setReauthCookie = (value, req, res, cookieExtraOptions = {}) => {
    const { id, siteId } = req.platform;
    const domain = config.get('url.mainDomain.link', id, siteId);
    res.cookie(constants_1.REAUTH_COOKIE_NAME, value, {
        domain,
        httpOnly: true,
        secure: true,
        sameSite: getSameSiteValue(req),
        ...cookieExtraOptions,
    });
};
exports.setReauthCookie = setReauthCookie;
const getUserIP = (req) => req.ip
    || req.socket.remoteAddress
    || req.header('X-Forwarded-For');
exports.getUserIP = getUserIP;
const getConfigByOperationId = (operationId) => {
    const configLists = (0, config_service_1.getConfig)('reauth', { [operationId]: constants_1.reauthDefaultConfig });
    return configLists[operationId] || constants_1.reauthDefaultConfig;
};
exports.getConfigByOperationId = getConfigByOperationId;
/**
 * Generate a JSON object for xhr responses
 */
const getJsonResponse = (httpCode, data = {}) => {
    const jsonResponse = {
        message: http_1.STATUS_CODES[httpCode] || '',
        ...data,
    };
    const { url, require_reauth } = data; // eslint-disable-line @typescript-eslint/naming-convention
    if (url && require_reauth) {
        jsonResponse.data = {
            require_reauth,
            reauth_url: url,
        };
    }
    return jsonResponse;
};
exports.getJsonResponse = getJsonResponse;
