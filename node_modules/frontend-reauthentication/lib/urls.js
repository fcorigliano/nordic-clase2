"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reauthenticationURL = exports.reauthErrorURL = exports.createURLFromPath = exports.reauthRestrictedURL = void 0;
const config = require("frontend-config");
const detectPlatform = require("frontend-platform_detection/src/platform");
// Deeplinks doc: https://sites.google.com/mercadolibre.com/mobile/arquitectura/deeplinks
const deeplinkProtocols = ['meli:', 'mercadopago:'];
const isSafeUrl = (checkUrl) => {
    if (checkUrl && typeof checkUrl === 'string') {
        const { protocol, hostname } = new URL(decodeURIComponent(checkUrl));
        return (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        (!!hostname && protocol === 'https:' && !!detectPlatform(hostname))
            || deeplinkProtocols.includes(protocol));
    }
    return false;
};
const baseURL = (req) => {
    const { platform } = req;
    const { id, siteId } = platform;
    const mainDomain = config.get('url.mainDomain.link', id, siteId);
    const prependedSubdomain = siteId === 'CBT' ? '' : 'www.';
    return `https://${prependedSubdomain}${mainDomain}`;
};
const reauthRestrictedURL = () => 'https://www.mercadopago.com.mx/auth/restrictions';
exports.reauthRestrictedURL = reauthRestrictedURL;
const createURLFromPath = (req, path) => new URL(path, baseURL(req)).href;
exports.createURLFromPath = createURLFromPath;
/**
 * Get URL to redirect to when reauth fails
 */
const reauthErrorURL = (req) => {
    const { hostname, originalUrl } = req;
    const redirectURL = `https://${hostname}${originalUrl}`;
    return `${baseURL(req)}/auth/restrictions/error?retry_url=${encodeURIComponent(redirectURL)}`;
};
exports.reauthErrorURL = reauthErrorURL;
/**
 * Returns the URL to redirect a to reauthenticate
 */
const reauthenticationURL = (params) => {
    const { req, transactionId, redirectUrl, deeplink, } = params;
    const { headers } = req;
    const { siteId, id: platformId } = req.platform;
    const baseReauthURL = config.get('url.reauthentication.link', platformId, siteId);
    let redirectURL;
    if (redirectUrl && isSafeUrl(redirectUrl)) {
        redirectURL = redirectUrl;
    }
    else if (req.xhr) {
        redirectURL = headers.referer;
    }
    else {
        redirectURL = `https://${headers.host}${req.originalUrl}`;
    }
    if (deeplink) {
        const url = new URL(deeplink);
        url.searchParams.append('callback', redirectURL);
        return url.toString();
    }
    return `${baseReauthURL}/${transactionId}?go=${encodeURIComponent(redirectURL)}&platform_id=${platformId}`;
};
exports.reauthenticationURL = reauthenticationURL;
