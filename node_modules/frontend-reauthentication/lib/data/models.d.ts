export declare type ReauthRegulationName = 'MLM_IFPE' | 'MLC_EMISOR' | 'MLC_OPERADOR' | 'MCO_SUPERFINANCIERA' | string;
declare global {
    namespace Express {
        interface Request {
            reauthParams?: ReauthRequestParams;
        }
    }
}
declare module 'frontend-authentication' {
    interface RequestUserSession {
        /**
         * If reauth check fails and app wants to handle error by itself,
         * then this object will be set.
         */
        reauthFailed?: ReauthFailed;
        /**
         * If user passed successfully over reauthentication
         * to make this request and reauth transaction was validated,
         * then that transaction info is stored here.
         * Else tag is undefined.
         */
        reauthChecked?: ReauthValidation;
    }
}
interface ReauthValidation {
    /**
     * Reauth transaction ID for logging and audit purposes.
     */
    transaction_id: string;
}
export interface ReauthFailed {
    /**
     * Error message from reauth check failure.
     */
    message: string;
}
interface BaseParams {
    /**
     * The ID of the operation that requires to pass through reauthentication.
     */
    operationId: string;
    /**
     * Type of flow / view we are trying to protect with reauthentication.
     *
     * @default undefined
     */
    flowType?: 'payment' | 'other' | string;
    /**
     * Reauth should be called only for regulated users in regulated sites.
     *
     * @default false
     */
    regulatedOnly?: boolean;
}
export interface ReauthenticationOptions extends BaseParams {
    /**
     * URL to redirect to after successfully passing through reauthentication.
     *
     * @default undefined
     */
    redirectUrl?: string;
    /**
     * Should not redirect to error page if reauthentication call fails.
     * This means you must handle the error by yourself, which will be available in
     * req.userSession.reauthFailed.
     *
     * @deprecated
     * @default false
     */
    ignoreErrorRedirect?: boolean;
}
export interface ReauthRequestParams {
    /**
     * Regulations that the current user must follow.
     * Use ONLY if frontend-regulations plugin is not being used and you need to manually specify this for this user.
     */
    regulations?: ReauthRegulationName[];
    [key: string]: unknown;
}
export declare type ReauthServiceParams = BaseParams & ReauthRequestParams & Pick<ReauthenticationOptions, 'redirectUrl'>;
export declare type ReauthClientParams = BaseParams & ReauthRequestParams & {
    reauth_plugin: boolean;
};
export interface ReauthValidationParams {
    operationId: string;
    reauthTransaction: string;
    code: string;
}
export {};
