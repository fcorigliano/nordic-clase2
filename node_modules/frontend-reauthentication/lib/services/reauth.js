"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkReauthService = exports.internalCheckReauthService = void 0;
const reauth_1 = require("../client/reauth");
const urls_1 = require("../urls");
const Logger = require("frontend-logger"); // eslint-disable-line import/order
const logger = Logger('reauth-service');
/**
 * @param req Express Request
 * @param params Params required by Reauth Service
 * @param calledInMiddleware Flag indicating if Service is being called from reauth middleware or standalone
 */
const internalCheckReauthService = (req, params, calledInMiddleware = false) => {
    if (!req.user) {
        throw new TypeError('req.user must be defined.');
    }
    const { redirectUrl, ...apiParams } = params;
    return (0, reauth_1.createReauthTransaction)(req, { ...apiParams, reauth_plugin: calledInMiddleware })
        .catch((e) => {
        const { message, response } = e;
        const { operationId, regulations } = params;
        const regulationName = regulations?.[0] || 'default';
        const logData = {
            operationId,
            regulation: regulationName,
            error_message: message,
            root_user_id: req.user.rootId,
            ...req.user.operatorId && { operator_id: req.user.operatorId },
        };
        let statusCode;
        if (response) {
            statusCode = response.status;
            logData.response_status = statusCode;
            logData.response_data = JSON.stringify(response.data);
        }
        logger.error('Couldn\'t process reauthentication request.', logData);
        throw e;
    })
        .then((data) => {
        if (!data?.transaction_id) {
            return { requireReauth: false };
        }
        const { transaction_id: transactionId, native_deeplink: deeplink } = data;
        const reauthUrlParams = {
            req, transactionId, redirectUrl, deeplink,
        };
        const reauthUrl = (0, urls_1.reauthenticationURL)(reauthUrlParams);
        return {
            reauthUrl,
            transactionId,
            requireReauth: true,
        };
    });
};
exports.internalCheckReauthService = internalCheckReauthService;
const checkReauthService = (req, params) => (0, exports.internalCheckReauthService)(req, params);
exports.checkReauthService = checkReauthService;
