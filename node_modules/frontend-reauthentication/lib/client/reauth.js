"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyReauthenticationTransaction = exports.createReauthTransaction = void 0;
const frontend_env_1 = require("frontend-env");
const frontend_restclient_1 = require("frontend-restclient");
const utils_1 = require("@auth/config-service/lib/utils");
const helpers_1 = require("../helpers");
const metrics_1 = require("./metrics");
const constants_1 = require("../data/constants");
const CLIENT_UA = `frontend-reauthentication/${constants_1.version}`;
const restClient = (0, frontend_restclient_1.RestClient)({
    timeout: frontend_env_1.PRODUCTION ? constants_1.reauthDefaultConfig.timeouts.verify : 10000,
    headers: {
        'user-agent': CLIENT_UA,
    },
});
const createReauthTransaction = (req, reauthParams) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const testCookie = req.cookies[constants_1.REAUTH_DEV_COOKIE_NAME];
    const { detached_id: detachedId } = req.userSession;
    const clientIP = (0, helpers_1.getUserIP)(req);
    const { operationId, flowType, regulations, regulatedOnly, ...otherParams } = reauthParams;
    const reauthReqConfig = (0, helpers_1.getConfigByOperationId)(operationId);
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { forward_cookies, forward_headers, forward_req_as_body } = reauthReqConfig;
    const reqCookies = req.cookies;
    const cookies = (0, utils_1.cookiesObjectToHeader)(reqCookies, forward_cookies, constants_1.BANNED_COOKIES);
    const forwardHeaders = (0, utils_1.mapHeaders)(req, forward_headers);
    const forwardBody = (0, utils_1.mapObjectProps)(req, forward_req_as_body);
    const data = {
        ...otherParams,
        ...forwardBody,
        ...regulations && { regulations },
        ...flowType && { flow_type: flowType },
        ...regulatedOnly && { regulated_only: regulatedOnly },
    };
    const startTime = Date.now();
    return restClient.post(`/internal/reauth/session/${detachedId}/operation/${operationId}/verify`, {
        data,
        context: (0, frontend_restclient_1.buildContext)(req),
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            'X-Forwarded-For': clientIP,
            ...forwardHeaders,
            ...cookies && { cookie: cookies },
        },
        ...testCookie && { params: { version: testCookie } },
    })
        .then((response) => {
        (0, metrics_1.default)({
            startTime,
            operationId,
            regulations,
            flowType,
            operation: 'check',
        });
        if (response.status === 201) {
            return response.data;
        }
        return undefined;
    })
        .catch((error) => {
        (0, metrics_1.default)({
            startTime,
            operationId,
            flowType,
            regulations,
            operation: 'check',
            error: error,
        });
        throw error;
    });
};
exports.createReauthTransaction = createReauthTransaction;
/**
 * Verifies that the reauthentication transaction was successfully closed.
 */
const verifyReauthenticationTransaction = (req, params) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const testCookie = req.cookies[constants_1.REAUTH_DEV_COOKIE_NAME];
    const { detached_id: detachedId } = req.userSession;
    const { operationId, reauthTransaction, code } = params;
    const startTime = Date.now();
    return restClient.post(`/internal/reauth/session/${detachedId}/operation/${operationId}/validation`, {
        context: (0, frontend_restclient_1.buildContext)(req),
        data: {
            code,
            transaction_id: reauthTransaction,
        },
        ...testCookie && { params: { version: testCookie } },
    })
        .then(() => {
        (0, metrics_1.default)({ startTime, operationId, operation: 'validate' });
    })
        .catch((error) => {
        (0, metrics_1.default)({
            startTime,
            operationId,
            operation: 'validate',
            error: error,
        });
        throw error;
    });
};
exports.verifyReauthenticationTransaction = verifyReauthenticationTransaction;
