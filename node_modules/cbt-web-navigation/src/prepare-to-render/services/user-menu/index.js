const { getValue } = require('cbt-navigation-config');
const sites = require('../../../constants/sites');
const logisticTypes = require('../../../constants/logistic-types');

const getHeaderCommonLinks = (urls, currentLocation) => {
  const { login, logout, myAccount } = urls;

  return {
    myAccount,
    login: {
      name: login.name,
      link: `${login.link}?go=${encodeURIComponent(currentLocation)}`,
    },
    logout: {
      name: logout.name,
      link: `${logout.link}?go=${encodeURIComponent(currentLocation)}`,
    },
  };
};

const getLinksAndIcons = (headerLinks, urls) => {
  const data = {
    links: [],
    icons: [],
  };
  headerLinks.forEach(link => {
    if (urls[link.link].icon) {
      data.icons.push({
        ...urls[link.link],
        id: link.link,
      });
    } else {
      data.links.push({
        ...urls[link.link],
        id: link.link,
      });
    }
  });
  return data;
};


const execute = ({
  cbtInfo,
  currentLocation,
  platform,
  req,
}) => {
  const urls = getValue({
    key: 'url',
    platform,
    req,
  });

  const headerMenuLinks = getValue({
    key: 'headerMenuLinks',
    platform,
    req,
  });
  const headerCommonLinks = getHeaderCommonLinks(urls, currentLocation);
  const linksAndIcons = getLinksAndIcons(headerMenuLinks, urls);

  const externalData = {
    links: headerCommonLinks,
    sites,
    logisticTypes,
    loggedLinks: linksAndIcons.links,
    icons: linksAndIcons.icons,
  };

  return Promise.resolve({
    ...externalData,
    cbtInfo,
  });
};

const generateServiceContext = (req) => {
  const { platform, device, cbt, protocol, headers, url } = req;
  return {
    req,
    platform,
    isDesktop: device.desktop,
    cbtInfo: cbt || null,
    currentLocation: `${protocol}://${headers.host}${url}`,
  };
};

module.exports = (req, res, props) => execute(generateServiceContext(req, res, props));
