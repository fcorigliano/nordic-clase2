const React = require('react');
const ShallowRenderer = require('react-test-renderer/shallow');
const SiteSwitcher = require('.');
const siteSwitcherProps = require('./props');

const baseProps = {
  currentSiteId: 'MLA',
  logisticType: 'remote',
  siteUsers: [
    {
      user_id: 463163332,
      site_id: 'MLM',
      status: 'active',
      enabled_sites: [
        'MLM',
      ],
      parent_id: 462143006,
      logistic_type: 'remote',
      site_users: null,
    },
    {
      user_id: 463166651,
      site_id: 'MLB',
      status: 'active',
      enabled_sites: [
        'MLB',
      ],
      parent_id: 462143006,
      logistic_type: 'remote',
      site_users: null,
    },
    {
      user_id: 463163127,
      site_id: 'MLA',
      status: 'active',
      enabled_sites: [
        'MLA',
      ],
      parent_id: 462143006,
      logistic_type: 'remote',
      site_users: null,
    },
  ],
  sites: {
    MLA: {
      text: 'Argentina',
      countryId: 'AR',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Argentina.svg',
    },
    MLM: {
      text: 'Mexico',
      countryId: 'MX',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Mexico.svg',
    },
    MLB: {
      text: 'Brazil',
      countryId: 'BR',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Brazil.svg',
    },
    MCO: {
      text: 'Colombia',
      countryId: 'CO',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Colombia.svg',
    },
    MLC: {
      text: 'Chile',
      countryId: 'CL',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Chile.svg',
    },
  },
  logisticTypes: {
    remote: '',
    '3pl': '(Warehouse)',
    fulfillment: '(Full)',
  },
};

const baseSuperProps = {
  myAccountText: 'My account',
  showSiteSwitch: true,
  logoutUrl: 'https://www.mercadolibre.com/jms/cbt/lgz/logout?go=https%3A%2F%2Fdev.global-selling.mercadolibre.com%3A8443%2F',
  logoutText: 'Log out',
  cbtInfo: {
    siteUsers: [
      {
        user_id: 463163127,
        site_id: 'MLA',
        status: 'active',
        enabled_sites: [
          'MLA',
        ],
        parent_id: 462143006,
        logistic_type: 'remote',
        site_users: null,
      },
      {
        user_id: 463166651,
        site_id: 'MLB',
        status: 'active',
        enabled_sites: [
          'MLB',
        ],
        parent_id: 462143006,
        logistic_type: 'remote',
        site_users: null,
      },
      {
        user_id: 463163332,
        site_id: 'MLM',
        status: 'active',
        enabled_sites: [
          'MLM',
        ],
        parent_id: 462143006,
        logistic_type: 'remote',
        site_users: null,
      },
    ],
    siteUserId: 463163127,
    currentSiteId: 'MLA',
  },
  logisticType: 'remote',
  sites: {
    MLA: {
      text: 'Argentina',
      countryId: 'AR',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Argentina.svg',
    },
    MLM: {
      text: 'Mexico',
      countryId: 'MX',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Mexico.svg',
    },
    MLB: {
      text: 'Brazil',
      countryId: 'BR',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Brazil.svg',
    },
    MCO: {
      text: 'Colombia',
      countryId: 'CO',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Colombia.svg',
    },
    MLC: {
      text: 'Chile',
      countryId: 'CL',
      flag: 'https://http2.mlstatic.com/storage/cbt-statics/layout/header/flags/Chile.svg',
    },
  },
  logisticTypes: {
    remote: '',
    '3pl': '(Warehouse)',
    fulfillment: '(Full)',
  },
};

describe('CBT Navigation', () => {
  describe('SiteSwitcher', () => {
    it('matches the default snapshot and returns site switcher', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <SiteSwitcher
          {...baseProps}
        />
      );

      const renderedComponent = renderer.render(component);
      expect(renderedComponent).toMatchSnapshot();
    });

    it('sorts the sites accordingly with multiple logistic types on same site', () => {
      const renderer = new ShallowRenderer();
      const customProps = {
        ...baseSuperProps,
      };
      customProps.cbtInfo.siteUsers = [
        {
          user_id: 463163332,
          site_id: 'MLM',
          status: 'active',
          enabled_sites: [
            'MLM',
          ],
          parent_id: 462143006,
          logistic_type: 'remote',
          site_users: null,
        },
        {
          user_id: 463163127,
          site_id: 'MLA',
          status: 'active',
          enabled_sites: [
            'MLA',
          ],
          parent_id: 462143006,
          logistic_type: 'remote',
          site_users: null,
        },
        {
          user_id: 463166651,
          site_id: 'MLM',
          status: 'active',
          enabled_sites: [
            'MLB',
          ],
          parent_id: 462143006,
          logistic_type: 'fulfillment',
          site_users: null,
        },
        {
          user_id: 463166651,
          site_id: 'MLB',
          status: 'active',
          enabled_sites: [
            'MLB',
          ],
          parent_id: 462143006,
          logistic_type: 'remote',
          site_users: null,
        },
        {
          user_id: 463163127,
          site_id: 'MLM',
          status: 'active',
          enabled_sites: [
            'MLA',
          ],
          parent_id: 462143006,
          logistic_type: '3pl',
          site_users: null,
        },
        {
          user_id: 463166651,
          site_id: 'MLB',
          status: 'active',
          enabled_sites: [
            'MLB',
          ],
          parent_id: 462143006,
          logistic_type: 'fulfillment',
          site_users: null,
        },
      ];
      const component = (
        <SiteSwitcher
          {...siteSwitcherProps({ ...customProps })}
        />
      );

      const renderedComponent = renderer.render(component);
      expect(renderedComponent).toMatchSnapshot();
    });
  });
});
