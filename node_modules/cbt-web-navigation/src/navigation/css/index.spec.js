const React = require('react');
const ShallowRenderer = require('react-test-renderer/shallow');
const Css = require('.');
const {
  FULL,
  FLOW,
  FLOW_LITE,
  LITE,
  SIMPLE,
} = require('../../constants/navigation-types');

const defaultProps = {
  platformId: 'ML',
  siteId: 'MLA',
  navigationType: FULL,
  firstRequestInlineStyles: false,
  cdn: {
    link: 'https://some-cdn-link.com',
  },
};

describe('CBT Navigation', () => {
  describe('Css component', () => {
    it('should match snapshot with full navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css {...defaultProps} />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with flow navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          navigationType={FLOW}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with flow-lite navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          navigationType={FLOW_LITE}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with lite navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          navigationType={LITE}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with simple navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          navigationType={SIMPLE}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with unknown navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          navigationType="unknown-navigation-type"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with firstRequestInlineStyles configuration', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          firstRequestInlineStyles
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });
  });
});
