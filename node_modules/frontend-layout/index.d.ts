import type { Request, RequestHandler, Response } from 'express';
import type { ComponentType } from 'react';

export type NordicLayoutComponent<P = {}> = ComponentType<P> & {
  prepareToRender?: (props: P, req: Request, res: Response) => Promise<Record<string, unknown>>;
};

interface LayoutMiddlewareOptions<LayoutProps = {}, NavProps = {}> {
  layout?: NordicLayoutComponent<LayoutProps>;
  navigation?: ComponentType<NavProps>;
}

export function layoutMiddleware<
  LayoutProps = {},
  NavigationProps = {}
>(options?: LayoutMiddlewareOptions<LayoutProps, NavigationProps>): RequestHandler;

export interface NavigationOptions {
  /**
   * Navigation type option.
   * @default 'full'
   */
  type?: string;
}

interface RenderFavicon {
  /**
   * Favicon URL.
   */
  href: string;

  /**
   * Favicon MIME type.
   * @default null
   */
  type?: string;

  /**
   * Favicon relationship.
   * @default 'shortcut icon'
   */
  rel?: string;

  /**
   * Favicon sizes.
   * @default null
   */
  sizes?: string;
}

export type NavigationId = 'Classi' | 'CB' | 'First-party' | 'ML' | 'MP' | 'MS' | 'PI';
interface RenderStats {
  /** Component name */
  page: string;

  /** Render duration in milliseconds */
  duration: string;
}

export interface LayoutOptions {
  /**
   * Sets the `lang` attribute on `html` tag.
   * If no value is provided the `lang` attribute is determined by current site's country configuration.
   */
  lang?: string;

  /**
   * Array of favicons to render.
   *
   * @default
   * [{
   *   href: '/favicon.svg',
   *   rel: 'icon',
   * }, {
   *   href: '180x180.png',
   *   rel: 'apple-touch-icon',
   * }]
   *
   * // Resulting in:
   * <link rel="icon" href="favicon.svg">
   * <link rel="apple-touch-icon" href="180x180.png">
   */
  favicons?: RenderFavicon[];

  /**
   * Embeds navigation styles into the `head` tag.
   * @default false
   *
   * @example
   * embedCss: true
   *
   * // Results in:
   * <style> 'Navigation CSS' </style>
   */
  embedCss?: boolean;

  /**
   * Array of external CSS to load with a `link` tags.
   * @default []
   *
   * @example
   * externalCss: ['foo.css', 'bar.css'],
   *
   * // Results in:
   * <link rel="stylesheet" type="text/css" href="foo.css"/>
   * <link rel="stylesheet" type="text/css" href="bar.css"/>
   */
  externalCss?: string[];

  /**
   * Array of inline CSS to load with the `style` tags.
   * @default []
   *
   * @example
   * inlineCss: ['body { background: red; }']
   *
   * // Results in:
   * <style>body { background: red; }</style>
   */
  inlineCss?: string[];

  /**
   * Array of external script URLs to load with `script` tags.
   * @default []
   *
   * @example
   * scripts: ['https://www.mercadolibre.com/some-script.js']
   *
   * // Results in:
   * <script src="https://www.mercadolibre.com/some-script.js"></script>
   */
  scripts?: string[];

  /**
   * If `false` the middleware uses [renderToString](https://reactjs.org/docs/react-dom-server.html#rendertostring) to render,
   * while if `true` it uses [renderToStaticMarkup](https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup) skipping React-specific data attributes.
   * @default false
   */
  staticMarkup?: boolean;

  /**
   * Collects render performance stats for every render.
   * The stats info is an object that contains the name of the `page` and the `duration` in milliseconds.
   *
   * @example
   * performanceStats: (stats) => logger.info(stats),
   */
  performanceStats?: (stats: RenderStats) => void;

  /**
   * Determines which navigation will be rendered.
   * If no value is provided and there's no `navigation` property on middleware options,
   * the navigation factory will try to determine the best navigation using the request data (eg: platform, site, etc).
   */
  navigationId?: NavigationId;

  /**
   * Enables first request inline styles behaviour.
   * This behaviour renders inline styles and `link` tags prefetching external styles to be cached when a device
   * enters a page for the first time or if cached styles are out-of-date,
   * and linked styles on next requests if cached styles are up-to-date.
   * This saves the CSS roundtrips when the user has no cached styles.
   *
   * To determine cached files on browser a cookie is set.
   * The cookie name is determined by the `criticalPath.key`, and its value corresponds to the application version.
   *
   * If the application version is `1.2.3`,
   * the first time the device requests the page the middleware will render application inline styles and prefetchs for external resources,
   * and set the `c_tiendas_oficiales` cookie with the value `1.2.3` on the `/tiendas-oficiales` path.
   * On subsequent requests the cookie will be transferred, so the middleware can identify cached styles and render linked styles.
   *
   * @example
   * criticalPath: {
   *   key: 'tiendas_oficiales',
   *   cookiePath: '/tiendas-oficiales',
   * }
   */
  criticalPath?: {
    /**
     * Cookie name
     */
    key: string;

    /**
     * Determines the cookie path.
     *
     * @default '/'
     */
    cookiePath?: string;

    /**
     * Determines the cookie domain.
     *
     * @default req.hostname
     */
    cookieDomain?: string
  };

  /**
   * Enables [frontend-lazy](https://nordic.adminml.com/docs/api/Nordic%20Modules/frontend-lazy) on the given entrypoint
   */
  loadable?: string;
}

export interface RenderOptions {
  /**
   * This function is called when the rendering phase is done.
   * The first parameter will be an error if occurred, and the second one will be the markup string if no error ocurred.
   *
   * @example
   * done: (error, output) => {
   *   if (!error) {
   *     res.send(output.replace('some-text', 'replace-text'));
   *   } else {
   *     res.status(500).send('Something was wrong!');
   *   }
   * },
   */
  done?: (err: Error | null, output: string | null) => void;

  /**
   * Options to configure the middleware rendering.
   */
  layoutOptions?: LayoutOptions;

  /**
   * Navigation options to passed to navigation prepareToRender method.
   */
  navigationOptions?: NavigationOptions;
}

interface ScriptOptions {
  inline: string;
  lowEnd: boolean;
  nonce: string;
  src: string;
  id: string;
}

/** Create JS snippet to include injected scripts */
export function getInjectedScripts(options: ScriptOptions): string;

declare module 'express-serve-static-core' {
  // Express Response augmentation with custom props
  interface Response {
    render<P = unknown>(view: ComponentType<P>, props: P, options?: RenderOptions): void;
  }
}
