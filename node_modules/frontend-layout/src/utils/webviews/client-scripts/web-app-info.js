/*
  Ignored file coverage because when run Snapshot and convert function to string Istanbul added internal codes.
*/
/* istanbul ignore file */
/* global window:readonly */
/* eslint-disable no-var, global-require, comma-dangle, import/no-unresolved */
const { APPLICATION, VERSION } = require('frontend-env');
const getInjectedScripts = require('../../get-injected-scripts');
const { isWebkitLanding } = require('../is-webkit-landing');
const { isScriptEnabled } = require('../is-script-enabled');
const { WEB_APP_INFO, WEB_APP_INFO_SIMPLE } = require('../../../constants/native-initiatives');

let NORDIC_VERSION;
try {
  NORDIC_VERSION = require('nordic/package.json').version;
} catch (_) {
  NORDIC_VERSION = '0.0.0';
}

function webAppInfoCallBridge(application, version, nordicVersion) {
  var info = {
    performance: {},
    governance: {}
  };
  if (application) {
    info.performance.app_name = application;
    info.governance.app_name = application;
  }
  if (version) {
    info.performance.app_version = version;
  }
  if (nordicVersion) {
    info.governance.nordic_version = nordicVersion;
  }

  function setInfo() {
    window.MobileWebKit.executeNative({
      method: 'web_app_info',
      args: info,
    });
  }

  if (window.MobileWebKit) {
    if (window.MobileWebKit.isConnected()) {
      setInfo();
    } else {
      window.MobileWebKit.on('connect', setInfo);
    }
  }
}

function webAppInfoSimpleCallBridge(application, version) {
  var info = {};
  if (application) {
    info.app_name = application;
  }
  if (version) {
    info.app_version = version;
  }

  function setInfo() {
    window.MobileWebKit.executeNative({
      method: 'web_app_info',
      args: info,
    });
  }

  if (window.MobileWebKit) {
    if (window.MobileWebKit.isConnected()) {
      setInfo();
    } else {
      window.MobileWebKit.on('connect', setInfo);
    }
  }
}

const setWebAppInfoCallBridgeString = webAppInfoCallBridge.toString();
const setWebAppInfoSimpleCallBridgeString = webAppInfoSimpleCallBridge.toString();

function getWebAppInfoScript(req, nonce) {
  const isWebkit = isWebkitLanding(req);
  const isEnabled = isWebkit && isScriptEnabled(req, WEB_APP_INFO);
  const isSimpleEnabled = isWebkit && isScriptEnabled(req, WEB_APP_INFO_SIMPLE);

  if (isEnabled && (APPLICATION || VERSION)) {
    return getInjectedScripts({
      inline: `(${setWebAppInfoCallBridgeString})("${APPLICATION}", "${VERSION}", "${NORDIC_VERSION}")`,
      nonce,
    });
  }

  if (isSimpleEnabled && (APPLICATION || VERSION)) {
    return getInjectedScripts({
      inline: `(${setWebAppInfoSimpleCallBridgeString})("${APPLICATION}", "${VERSION}")`,
      nonce,
    });
  }

  return '';
}

module.exports = {
  webAppInfoCallBridge,
  webAppInfoSimpleCallBridge,
  getWebAppInfoScript,
};
