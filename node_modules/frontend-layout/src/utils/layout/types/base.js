const { base, tracking } = require('../data');
const getPreconnects = require('../../get-preconnects');
const getNewrelicTimingHeader = require('../../get-newrelic-timing-header');
const Head = require('../../../head');
const safeReplace = require('../../safe-replace');
const { CDNS } = require('../../../../config/head-config');
const { getCode: getClientCookiesManagerCode } = require('../../client-cookies-manager');
const getCSRFMeta = require('../../get-csrf-meta');

const layout = async ({
  app,
  initialState,
  headsync = '',
  styles,
  countryId,
  scripts,
  lowEnd,
  nonceCSP,
  csrfToken,
  props,
  req,
  html,
  chunkExtractor,
  metaTagsConfig,
}) => {
  const { lang, initialStateSnippet, injectedScripts } = base({
    initialState,
    countryId,
    scripts,
    lowEnd,
    nonceCSP,
    lang: props.lang,
  });

  const { injectedAnalytics, melidata } = await tracking(req, nonceCSP);

  const cdnAssets = props.cdnMetrics ? CDNS.assets : null;

  const preconnects = getPreconnects(req.cookies, req.platform, [props.cdn, cdnAssets], props.feConfigEnvironment);
  const newrelicTimingHeader = await getNewrelicTimingHeader(req.platform, nonceCSP, props.feConfigEnvironment, req.meliCookies);
  const head = Head.render(props, nonceCSP, props.feConfigEnvironment, metaTagsConfig);
  const clientCookiesManagerCode = getClientCookiesManagerCode(props, {
    isLowEnd: lowEnd,
    nonceCSP,
  });
  const csrfTokenTag = getCSRFMeta(csrfToken);
  const requireChunksScriptTag = chunkExtractor ? chunkExtractor.getRequiredChunksScriptTag() : '';

  // Start to write html output
  const langAttribute = lang ? ` lang="${lang}"` : '';

  let output = (`
<!DOCTYPE html>
<html${langAttribute}>
<head>${preconnects}${clientCookiesManagerCode}${newrelicTimingHeader}${requireChunksScriptTag}${head}${csrfTokenTag}${initialStateSnippet}
${headsync}${styles}${injectedAnalytics}
</head>`);

  // Add application html and scripts, and write it to response stream
  let processedHtml = safeReplace(html, '{{children}}', app);
  processedHtml = safeReplace(processedHtml, '{{melidata}}', melidata);
  processedHtml = safeReplace(processedHtml, '{{scripts}}', `${injectedScripts}`);
  output += processedHtml;
  output += '</html>';

  return output;
};

module.exports = layout;
