const fs = require('fs');
const versionWebkit = require('@meli/mobile-webkit/package.json').version;
const getInjectedScripts = require('../../../get-injected-scripts');
const { base, tracking } = require('../../data');
const getPreconnects = require('../../../get-preconnects');
const getNewrelicTimingHeader = require('../../../get-newrelic-timing-header');
const safeReplace = require('../../../safe-replace');
const { getCode: getClientCookiesManagerCode } = require('../../../client-cookies-manager');
const getCSRFMeta = require('../../../get-csrf-meta');
const { isWebkitLanding } = require('../../../webviews/is-webkit-landing');
const { getWebAppInfoScript } = require('../../../webviews/client-scripts/web-app-info');
const defaultMetaTags = require('../../../../constants/default-meta-tags');
const { mapMetaTagsConfig } = require('../../../meta-tags');

const mobilewebkit = fs.readFileSync(`node_modules/@meli/mobile-webkit/lib/v${versionWebkit}/mobilewebkit.js`, 'utf-8');

function setCustomStylesOS({ os }) {
  return os === 'iOS'
    ? `body {
      /** Olders Browsers **/
      height: 100%;
      /** Browsers which partially support CSS Environment variables (iOS 11.0-11.2) **/
      @supports (height: calc(constant(safe-area-inset-bottom) + 100%)) {
        height: calc(constant(safe-area-inset-bottom) + 100%);
      }
      /** Browsers which fully support CSS Environment variables (iOS 11.2+) **/
      @supports (height: calc(env(safe-area-inset-bottom) + 100%)) {
        height: calc(env(safe-area-inset-bottom) + 100%);
      }
    }` : '';
}

function addNewRelicMetrics(req, nonce) {
  if (req.device.nativeApp) {
    return getInjectedScripts({
      inline: `
if (window.newrelic) {
  window.newrelic.setCustomAttribute('nativeAppName', '${req.device.nativeApp.name}');
  window.newrelic.setCustomAttribute('nativeAppOs', '${req.device.nativeApp.os}');
  window.newrelic.setCustomAttribute('nativeAppVersion', '${req.device.nativeApp.version}');
}`,
      nonce,
    });
  }

  return '';
}

const layout = async ({
  app,
  initialState,
  headsync = '',
  styles,
  countryId,
  scripts,
  lowEnd,
  nonceCSP,
  req,
  csrfToken,
  props,
  html,
  chunkExtractor,
  metaTagsConfig,
}) => {
  const { lang, initialStateSnippet, injectedScripts } = base({
    initialState,
    countryId,
    scripts,
    lowEnd,
    nonceCSP,
    lang: props.lang,
  });

  const { injectedAnalytics, melidata } = await tracking(req, nonceCSP);

  const preconnects = getPreconnects(req.cookies, req.platform, [props.cdn], props.feConfigEnvironment);

  const newrelicTimingHeader = await getNewrelicTimingHeader(req.platform, nonceCSP, props.feConfigEnvironment, req.meliCookies);

  const webkitScript = isWebkitLanding(req) ? getInjectedScripts({
    inline: mobilewebkit,
    lowEnd,
    nonce: nonceCSP,
  }) : '';

  const customStyles = setCustomStylesOS(req.device.nativeApp);

  let processedHtml = safeReplace(html, '{{children}}', app);
  processedHtml = safeReplace(processedHtml, '{{melidata}}', melidata);
  processedHtml = safeReplace(processedHtml, '{{scripts}}', injectedScripts);

  const clientCookiesManagerCode = getClientCookiesManagerCode(props, {
    isLowEnd: lowEnd,
    nonceCSP,
  });
  const csrfTokenTag = getCSRFMeta(csrfToken);
  const requireChunksScriptTag = chunkExtractor ? chunkExtractor.getRequiredChunksScriptTag() : '';

  const langAttribute = lang ? ` lang="${lang}"` : '';
  const metaTagsString = mapMetaTagsConfig((metaTagsConfig || {}).webview || defaultMetaTags.webview);

  return `
<!DOCTYPE html>
<html${langAttribute}>
<head>
${metaTagsString}
<meta name="HandheldFriendly" content="True">
<meta http-equiv="cleartype" content="on">
${preconnects}${clientCookiesManagerCode}${requireChunksScriptTag}${csrfTokenTag}${newrelicTimingHeader}${headsync}${initialStateSnippet}${webkitScript}${injectedAnalytics}
<link rel="preload" href="https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-light.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-head-react="true">
<link rel="preload" href="https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-regular.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-head-react="true">
<link rel="preload" href="https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-semibold.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-head-react="true">
<style>@font-face{font-family:'Proxima Nova';font-weight:300;font-display:swap;font-style:normal;src:url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-light.woff2) format("woff2"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-light.woff) format("woff"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-light.ttf) format("truetype")}@font-face{font-family:'Proxima Nova';font-weight:400;font-display:swap;font-style:normal;src:url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-regular.woff2) format("woff2"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-regular.woff) format("woff"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-regular.ttf) format("truetype")}@font-face{font-family:'Proxima Nova';font-weight:600;font-display:swap;font-style:normal;src:url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-semibold.woff2) format("woff2"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-semibold.woff) format("woff"),url(https://http2.mlstatic.com/ui/webfonts/v3.0.0/proxima-nova/proximanova-semibold.ttf) format("truetype")}</style>
<style>
  html,
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    height: auto;
    font-family: Proxima Nova,-apple-system,Helvetica Neue,Helvetica,Roboto,Arial,sans-serif;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
  }
  *,
  *:after,
  *:before {
    -webkit-touch-callout: inherit;
    -webkit-tap-highlight-color: transparent;
  }
  ::-webkit-scrollbar {
    width: 0 !important;
  }
  input, select, textarea, .enable-select-text {
    -webkit-touch-callout: default;
    -moz-user-select: text;
    -webkit-user-select: text;
    -ms-user-select: text;
    user-select: text;
  }
  :focus {
    outline: 0;
  }
  ${customStyles}
</style>
${styles}
</head>${processedHtml}
<script>
  // Polyfill del closest
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector ||
                                Element.prototype.webkitMatchesSelector;
  }

  if (!Element.prototype.closest) {
    Element.prototype.closest = function(s) {
      var el = this;

      do {
        if (Element.prototype.matches.call(el, s)) return el;
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);
      return null;
    };
  }

  document.addEventListener("contextmenu", function(e) {
    if (e.target.closest(".enable-select-text") ||
        ["input", "textarea"].indexOf(e.target.tagName.toLowerCase()) !== -1) {
      return true;
    }
    e.preventDefault();
    return false;
  }, false);
</script>
${getWebAppInfoScript(req, nonceCSP)}
${addNewRelicMetrics(req, nonceCSP)}
</html>
  `;
};

module.exports = layout;
