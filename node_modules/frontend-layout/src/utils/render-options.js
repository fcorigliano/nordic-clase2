const { DEVELOPMENT } = require('frontend-env');
const renderOptionsConstants = require('../constants/render-options');
const logger = require('./logger');

const objectHasProp = (object, property) => Object.prototype.hasOwnProperty.call(object, property);

const logFunction = !DEVELOPMENT && (() => {});

// eslint-disable-next-line max-len
const logWarning = logFunction || ((propValidKey, propsType) => logger.warn(`\x1b[33mThe "${propValidKey}" render app property should be passed through "${renderOptionsConstants[propsType].optionsName}", explained on frontend-layout's readme \x1b[0m`));

const getPropsFromRenderOptions = (appProps, renderOptions, propsType) => {
  const constants = renderOptionsConstants[propsType];
  const props = { ...renderOptions && renderOptions[constants.optionsName] };
  constants.propsFromApp.forEach((propValidKey) => {
    if (objectHasProp(appProps, propValidKey) && !objectHasProp(props, propValidKey)) {
      props[propValidKey] = appProps[propValidKey];
      logWarning(propValidKey, propsType);
    }
  });
  return props;
};

const showDeprecatedOptionWarnings = logFunction
  || ((propsHash, propsType) => renderOptionsConstants[propsType].deprecatedProps
    .forEach((deprecatedProp) => {
      if (typeof propsHash[deprecatedProp] !== 'undefined') {
        // eslint-disable-next-line max-len
        logger.warn(`\x1b[33mThe "${deprecatedProp}" prop in "${renderOptionsConstants[propsType].optionsName}" render option was deprecated, please remove it from "${renderOptionsConstants[propsType].optionsName}" render option \x1b[0m`);
      }
    }));

module.exports = {
  getPropsFromRenderOptions,
  showDeprecatedOptionWarnings,
};
