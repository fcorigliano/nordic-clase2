/**
 * Module dependencies
 */
const React = require('react');
const PropTypes = require('prop-types');
const { cdnMetricsFn } = require('frontend-cdn-metrics');
const Body = require('./body');
const getConfiguration = require('./utils/get-config');
const { version } = require('../package.json');
const { offerA2HS } = require('./utils/offer-a2hs');
const { getCDNProvider } = require('../config/head-config');
const { isHidden } = require('./utils/layout-type-detection');

/**
 * Layout Component
 */
const Layout = (props) => (
  <Body {...props} />
);

/**
 * Prepare To Render the Layout
 */
Layout.prepareToRender = function prepareToRender(props, req, res) {
  return new Promise((resolve) => {
    // Get layout configuration
    const config = getConfiguration(req, props.feConfigEnvironment);

    // Set layout props
    const layoutProps = {
      type: props.type || 'full', // Use the given type when defined or default
      configSchema: config.configSchema,
      labels: config.labels,
      urls: config.urls,
      features: config.features,
      cartInfo: {},
      cookies: {
        _d2id: req.cookies._d2id, // eslint-disable-line no-underscore-dangle
        pmsctx: req.cookies.pmsctx,
      },
      melilab: req.cookies && req.cookies.meliLab ? req.cookies.meliLab : null,
      a2hs: offerA2HS(req, config),
      cleanServiceWorkers: !req.device.lowEnd && config.configSchema.cleanServiceWorkers,
      cdn: getCDNProvider(props.cdn),
      queryParams: req.query,
      layoutSpecificProps: {
        referrer: req.headers.referer,
        cdnMetrics: cdnMetricsFn(req, res),
      },
    };
    layoutProps.cookies[`_${req.platform.id.toLowerCase()}_ga`] = req.cookies[`_${req.platform.id.toLowerCase()}_ga`];

    // Set navigation version
    res.header('X-Navigation-Version', `layout-${version}`);

    // Allow to overwrite baseDomain link passing overwriteBaseDomain in props
    if (props.overwriteBaseDomain) {
      layoutProps.urls.baseDomain.link = props.overwriteBaseDomain;
    }

    // Layout type hidden if it is webviewx
    if (req.device.webView) {
      layoutProps.type = 'hidden';
    }

    if (isHidden(layoutProps.type)) {
      resolve(layoutProps);
    } else if (props.Navigation && props.Navigation.prepareToRender) {
      props.Navigation.prepareToRender(
        {
          ...props,
          ...layoutProps,
        }, req, res,
      ).then((widgetsResults) => {
        Object.assign(layoutProps, widgetsResults);
        resolve(layoutProps);
      });
    } else {
      resolve(layoutProps);
    }
  });
};

Layout.propTypes = {
  configSchema: PropTypes.object,
  device: PropTypes.object,
  labels: PropTypes.object,
  platform: PropTypes.object,
  scripts: PropTypes.array,
  styles: PropTypes.array,
  type: PropTypes.string,
  urls: PropTypes.object,
  user: PropTypes.object,
  searchFocus: PropTypes.bool,
  cartInfo: PropTypes.shape({
    badge_icon: PropTypes.shape({
      quantity: PropTypes.number,
      label: PropTypes.string,
    }),
  }),
  category: PropTypes.shape({
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    permalink: PropTypes.string.isRequired,
  }),
  melilab: PropTypes.string,
  queryParams: PropTypes.object,
  referrer: PropTypes.string,
  getPositionMarkup: PropTypes.func,
};

Layout.defaultProps = {
  referrer: null,
  getPositionMarkup: null,
};

module.exports = Layout;
