/**
 * Module dependencies
 */
const feConfig = require('frontend-config');
const { cdnHtml5shiv } = require('./utils/get-styles');
const { noScriptRedirect } = require('./utils/get-no-script');
const getInjectedScripts = require('./utils/get-injected-scripts');
const {
  LINKED,
  INLINE,
} = require('./constants/css-render-types');
const defaultMetaTags = require('./constants/default-meta-tags');
const { mapMetaTagsConfig } = require('./utils/meta-tags');

const getLinkedStyleMarktup = ({ href, media }) => `<link rel="stylesheet" type="text/css" href="${href}"${media ? ` media="${media}"` : ''} />`;
const getInlineStyleMarkup = ({ content }) => `<style>${content}</style>`;

const styleMappers = {
  [LINKED]: getLinkedStyleMarktup,
  [INLINE]: getInlineStyleMarkup,
};

const allowedBrowserSupportAttrs = ['sameSite'];

class Head {
  /**
   * Create the style or link tag for navigation styles
   */
  getNavigationStyles(stylesList) {
    return stylesList.map((style) => styleMappers[style.renderType](style.renderData)).join('');
  }

  getStyles(bundledStyles) {
    return bundledStyles && bundledStyles.constructor === Array
      ? bundledStyles.reduce((acc, scr) => `${acc}<link rel="stylesheet" type="text/css" href="${scr}" />`, '') : '';
  }

  getInlineStyles(inlineCss) {
    if (Array.isArray(inlineCss) && inlineCss.length) {
      return `<style>${inlineCss.join(' ')}</style>`;
    }
    return '';
  }

  getBrowserSupportMeta(props) {
    if (props.browser && props.browser.support) {
      const entries = allowedBrowserSupportAttrs
        .filter((attr) => props.browser.support[attr])
        .map((attr) => `${attr.toLowerCase()}=${props.browser.support[attr]}`);

      if (entries.length > 0) {
        return `<meta name="browser-support" content="${entries.join(', ')}"/>\n`;
      }
    }
    return '';
  }

  render(props, nonceCSP, feConfigEnvironment, metaTagsConfig) {
    const browserVersion = parseInt(props.browser.major, 10);
    // optional if you want to send your css before the application render
    const externalStyles = this.getStyles(props.externalCss);
    // optional if you want to send your inline css before the application render
    const inlineStyles = this.getInlineStyles(props.inlineCss);
    // In case it's IE version less than or equal 9 load html5shiv
    const loadHtml5shiv = props.browser.name === 'ie' && browserVersion <= 9;

    // in case of send inline css add a prefetch link tag with the css resource
    const isLowEnd = props.device && props.device.lowEnd;

    // in case of using webpack and need hmr or chunk loading add proper script tags
    const scriptTag = props.scripts && props.scripts.length > 0 ? getInjectedScripts({
      inline: `window.addEventListener('load',function(){var s="${props.scripts}";if (s==='null'||s==='undefined')return;s=s.split(',');s.forEach(function(c){var t=document.createElement('script');t.src=c;t.async=false;t.defer=true;document.head.appendChild(t);})})`,
      lowEnd: isLowEnd,
      nonce: nonceCSP,
    }) : '';

    // gets platform/site base domain and defaults to ML MLA
    const baseDomain = feConfig.get('url.baseDomain', props.platform.id, props.platform.siteId, feConfigEnvironment)
      || feConfig.get('url.baseDomain', 'ML', 'MLA', feConfigEnvironment);

    const noScriptRedirectMeta = noScriptRedirect({
      isLowEnd,
      platformId: props.platform.id,
      baseDomain,
      actualLocation: props.actualLocation,
    });

    const a2hsScript = props.a2hs ? getInjectedScripts({
      inline: 'window.addEventListener(\'beforeinstallprompt\', function(a2hsEvent){ a2hsEvent.preventDefault(); window.deferredA2HSEvent = a2hsEvent; });',
      lowEnd: isLowEnd,
      nonce: nonceCSP,
    }) : '';

    const html5shiv = loadHtml5shiv ? cdnHtml5shiv(props.cdn, nonceCSP) : '';

    const browserSupportMeta = this.getBrowserSupportMeta(props);

    const metaTagsString = mapMetaTagsConfig((metaTagsConfig || {}).base || defaultMetaTags.base);

    const content = [
      browserSupportMeta,
      html5shiv,
      inlineStyles,
      externalStyles,
      scriptTag,
      a2hsScript,
    ].join('');

    return (`${noScriptRedirectMeta}
<meta charSet="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
${metaTagsString}
<meta name="HandheldFriendly" content="True"/>
<meta http-equiv="cleartype" content="on"/>
${content}`
    );
  }
}

module.exports = new Head();
