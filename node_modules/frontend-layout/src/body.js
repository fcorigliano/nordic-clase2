/* eslint-disable nordic/i18n-jsx-no-literals */
/**
 * Module dependencies
 */
const React = require('react');
const PropTypes = require('prop-types');
const env = require('frontend-env');
const Script = require('frontend-script');
const EventEmitter = require('./event-emitter');
const Fonts = require('./fonts');
const Splash = require('./splash');
const A2HS = require('./a2hs');
const CleanSW = require('./clean-sw');
const MercadoShopsTracking = require('./utils/mercadoshops/tracking');
const {
  positions: {
    TOP,
    BOTTOM,
  },
} = require('./constants/dynamic-content');

const getPositionElement = (getPositionMarkup, position) => {
  const markup = getPositionMarkup
    ? getPositionMarkup(position)
    : null;

  return markup
    ? <div dangerouslySetInnerHTML={{ __html: markup }} />
    : null;
};

const Body = (props) => {
  const {
    platform,
    configSchema,
    labels,
    cookies,
    device,
    urls,
    melilab,
    a2hs,
    cleanServiceWorkers,
    cdn,
    Navigation,
    cdnMetrics,
    getPositionMarkup,
  } = props;

  if (!Navigation) {
    throw new Error(`Couldn't get a valid Navigation for platform ${platform.id} and site ${platform.siteId}`);
  }

  const useProximaNova = configSchema.styles && configSchema.styles.useProximaNova;
  const useSplashMobileKey = (env.APPLICATION ? env.APPLICATION.replace(/-/g, '_') : '');
  const useSplashMobile = typeof configSchema.mobileSplashOnOff[useSplashMobileKey] !== 'undefined'
    ? configSchema.mobileSplashOnOff[useSplashMobileKey]
    : configSchema.mobileSplashOnOff.default;

  return (
    <body data-site={platform.id} data-country={platform.countryId}>
      { getPositionElement(getPositionMarkup, TOP) }
      {/* <!-- Global Event Emitter using `meli` --> */}
      <EventEmitter />
      { useProximaNova ? <Fonts cdn={cdn} /> : null }
      <Navigation {...props}>
        <main role="main" id="root-app">
          {'{{children}}'}
        </main>
      </Navigation>
      { getPositionElement(getPositionMarkup, BOTTOM) }
      {'{{melidata}}\n{{scripts}}'}
      { useSplashMobile
        ? (
          <Splash
            isMobile={device.mobile}
            platformId={platform.id}
            melilab={melilab}
            cookies={cookies}
            labels={labels}
          />
        )
        : null}
      { a2hs ? <A2HS {...props} /> : null }
      { cleanServiceWorkers ? <CleanSW mainDomain={urls.mainDomain} /> : null }
      { (platform && platform.id === 'MS') && <MercadoShopsTracking {...props} /> }
      { cdnMetrics && <Script src={cdnMetrics} /> }
    </body>
  );
};

Body.propTypes = {
  actualLocation: PropTypes.string,
  configSchema: PropTypes.object,
  device: PropTypes.object,
  labels: PropTypes.object,
  platform: PropTypes.object,
  scripts: PropTypes.array,
  type: PropTypes.string,
  urls: PropTypes.object,
  user: PropTypes.object,
  searchFocus: PropTypes.bool,
  cartInfo: PropTypes.shape({
    badge_icon: PropTypes.shape({
      quantity: PropTypes.number,
      label: PropTypes.string,
    }),
  }),
  cookies: PropTypes.object,
  cdn: PropTypes.object.isRequired,
  cdnMetrics: PropTypes.string,
  getPositionMarkup: PropTypes.func,
};

Body.defaultProps = {
  cdnMetrics: null,
  getPositionMarkup: null,
};

module.exports = Body;
