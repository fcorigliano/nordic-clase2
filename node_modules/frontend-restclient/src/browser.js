/**
 * Module dependencies
 */
const axios = require('nordic-axios');
const defaults = require('../config/defaults.browser');

/**
 * RestClient class to create a new instance of axios with a custom config.
 * @param config Object
 * @see https://github.com/mzabriskie/axios#request-config
 */
class RestClient {
  constructor(config = {}) {
    this.config = { ...defaults, ...config };
    this.client = axios.create(this.config);
    return this;
  }

  /**
   * Checks if metaTag with csrf token exists and add its content to x-csrf-token header.
   * @param config Object
   * @param config.headers Object
   */
  addCSRFHeaderIfApplies(config = {}) {
    if (typeof window !== 'undefined') {
      const csrfEnabled = config.sendCSRFToken !== undefined ? config.sendCSRFToken : this.config.sendCSRFToken;
      const csrfTokenFromMetaTag = document.querySelector('meta[name=csrf-token]');
      const token = csrfTokenFromMetaTag && csrfTokenFromMetaTag.hasAttribute('content')
        ? csrfTokenFromMetaTag.getAttribute('content').trim()
        : '';

      // avoid overwriting the header if it already exists
      if (
        (config.headers && config.headers['x-csrf-token'])
        || (this.config.headers && this.config.headers['x-csrf-token'])
      ) {
        return;
      }

      // do not add the header if disabled by config or token not found
      if (csrfEnabled && token.length) {
        config.headers = {
          ...config.headers,
          'x-csrf-token': csrfTokenFromMetaTag.getAttribute('content'),
        };
      }
    }
  }

  /**
   * Makes a request with a given method, url, and config and returns a promise.
   * @param config Object
   * @param config.method String
   * @param config.url String
   * @param config.config String
   * @param config.headers Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  doRequest(config = {}) {
    this.addCSRFHeaderIfApplies(config);

    // Prepare a new request
    const request = () => this.client.request(config)
      // Catch the error to log and throw an error, which triggers the next
      // reject handler in the chain to be called.
      .catch((error) => {
        throw error;
      });
    // Make request
    return request();
  }

  /**
   * Alias to make a GET request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  get(url, config = {}) {
    config.method = 'get';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a POST request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  post(url, config = {}) {
    config.method = 'post';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a PUT request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  put(url, config = {}) {
    config.method = 'put';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a PATCH request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  patch(url, config = {}) {
    config.method = 'patch';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a DELETE request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  delete(url, config = {}) {
    config.method = 'delete';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a HEAD request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  head(url, config = {}) {
    config.method = 'head';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make an OPTIONS request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  options(url, config = {}) {
    config.method = 'options';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * Alias to make a PURGE request and returns a promise.
   * @param url String
   * @param config Object
   * @see https://github.com/mzabriskie/axios#request-config
   */
  purge(url, config = {}) {
    config.method = 'purge';
    config.url = url;
    return this.doRequest(config);
  }

  /**
   * It makes concurrent requests that combines multiple promises and returns
   * a collection of responses.
   * @param requests Object
   * @see https://github.com/mzabriskie/axios#concurrency
   */
  all(requests) {
    return axios.all(requests)
      .then(axios.spread((...response) => response))
      .catch((error) => {
        throw error;
      });
  }
}

function restclientFactory(config) {
  return new RestClient(config);
}

/**
 * Expose RestClient factory
 */
exports = module.exports = restclientFactory; // eslint-disable-line no-multi-assign
exports.RestClient = restclientFactory;
