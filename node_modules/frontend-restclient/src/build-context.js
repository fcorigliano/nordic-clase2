
const getImpersonatedHeaders = (req) => {
  const impersonatedHeaders = {};

  if (req.user) {
    if (req.userSession && req.userSession.detached_id) {
      impersonatedHeaders['x-meli-detached-id'] = req.userSession.detached_id;
    }
    impersonatedHeaders['x-meli-impersonated-session'] = !!req.user.admin;
  }

  return impersonatedHeaders;
};

/**
 * Create an return a restclient context with a given `req` object.
 * The context will be pass as headers in each request.
 */
function buildRestClientContext(req) {
  const context = getImpersonatedHeaders(req);
  const forwardingHeaders = req.headers['x-forwarded-header-names'];

  if (!forwardingHeaders) {
    return context;
  }

  // We must use .toLowerCase() because express nomalize header names to lc.
  // Also we remove possible spaces in header names.
  const headers = forwardingHeaders.split(',').map((header) => header.toLowerCase().trim());

  headers.forEach((key) => {
    if (key in req.headers) {
      context[key] = req.headers[key];
    }

    if (key === 'x-request-id' && req.traceRequestId) {
      context[key] = req.traceRequestId;
    }
  });

  return context;
}

/**
 * Expose buildRestClientContext
 */
module.exports = buildRestClientContext;
