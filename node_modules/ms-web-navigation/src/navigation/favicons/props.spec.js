const propsModule = require('./props');

const defaultProps = {
  platform: {
    id: 'some-platform-id',
    siteId: 'some-site-id',
  },
  cdn: {},
  feConfigEnvironment: 'production',
  favicons: ['some-favicon.png'],
};

describe('Mercado Shops Navigation', () => {
  describe('Favicons', () => {
    describe('props', () => {
      it('should return expected props', () => {
        const result = propsModule(defaultProps);

        // Assert return factory result
        expect(result.platformId).toBe(defaultProps.platform.id);
        expect(result.siteId).toBe(defaultProps.platform.siteId);
        expect(result.cdn).toBe(defaultProps.cdn);
        expect(result.feConfigEnvironment).toBe(defaultProps.feConfigEnvironment);
        expect(result.favicons).toBe(defaultProps.favicons);
        expect(result.appName).toBe('ms-web-navigation');
      });

      it('should return undefined platform id if there\'s no platform object', () => {
        const props = {
          ...defaultProps,
          platform: null,
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.platformId).toBeUndefined();
      });

      it('should return undefined platform id if there\'s no id on platform object', () => {
        const props = {
          ...defaultProps,
          platform: {},
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.platformId).toBeUndefined();
      });

      it('should return undefined site id if there\'s no platform object', () => {
        const props = {
          ...defaultProps,
          platform: null,
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.siteId).toBeUndefined();
      });

      it('should return undefined site id if there\'s no siteId on platform object', () => {
        const props = {
          ...defaultProps,
          platform: {},
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.siteId).toBeUndefined();
      });
    });
  });
});
