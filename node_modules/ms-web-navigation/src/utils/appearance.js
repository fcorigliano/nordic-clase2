/**
 * @class Appearance
 *
 * @description This class works with an object with the following format:
 *
 *  ```
 *  AppearanceItem = {
 *    component: 'ComponentName',
 *    properties: Properties,
 *    children: List<AppearanceItem>
 *  }
 *  ```
 *
 * In this case, a `Properties` is a simple object with
 * different keys and values, without a particular format.
 */

class Appearance {
  constructor(appearance) {
    this.appearance = appearance;
  }

  fromTreeGetComponentByName(tree, name, nameEditable) {
    let result = null;

    if (tree) {
      if (tree.component === name || tree.component === nameEditable) {
        return tree;
      }

      if (tree.children && tree.children.length > 0) {
        tree.children.find((child) => {
          result = this.fromTreeGetComponentByName(child, name, nameEditable);
          return result;
        });
      }
    }

    return result;
  }

  navigateToProperty(props, prop) {
    if (!props) {
      // no props? nothing to look for
      return null;
    }

    const splitted = prop.split(/\.(.+)/, 2);

    if (splitted.length === 1) {
      return props[splitted[0]];
    }

    return this.navigateToProperty(props[splitted[0]], splitted[1]);
  }

  getComponentByName(name) {
    const nameEditable = `${name}Editable`;
    return this.fromTreeGetComponentByName(this.appearance, name, nameEditable);
  }

  getComponentProperties(componentName) {
    const component = this.getComponentByName(componentName);
    if (component) {
      return component.properties;
    }

    return null;
  }

  getComponentProperty(name, property) {
    const properties = this.getComponentProperties(name);
    if (properties) {
      return this.navigateToProperty(properties, property);
    }

    return null;
  }
}

module.exports = Appearance;
