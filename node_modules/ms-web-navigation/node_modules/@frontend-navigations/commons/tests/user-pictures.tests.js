const {
  getUserPicture,
  getUserPictures,
} = require('../user-pictures');

describe('User Pictures', () => {
  const defaultUser = {
    raw: {
      thumbnail: {
        picture_id: 'some-picture-id',
      },
    },
  };

  const browserWithWebPSupport = {
    support: {
      webp: true,
    },
  };

  describe('getUserPicture', () => {
    describe('low density', () => {
      describe('no webp support', () => {
        it('returns the user picture with variant small', () => {
          expect(getUserPicture(defaultUser, 'small')).toEqual('https://http2.mlstatic.com/D_some-picture-id-M.jpg');
        });

        it('returns the user picture with variant medium', () => {
          expect(getUserPicture(defaultUser, 'medium')).toEqual('https://http2.mlstatic.com/D_some-picture-id-S.jpg');
        });

        it('returns the user picture with variant large', () => {
          expect(getUserPicture(defaultUser, 'large')).toEqual('https://http2.mlstatic.com/D_some-picture-id-G.jpg');
        });

        it('returns the user picture with variant original', () => {
          expect(getUserPicture(defaultUser, 'original')).toEqual('https://http2.mlstatic.com/D_some-picture-id-O.jpg');
        });

        it('returns the user picture with variant -O since it is the default one, variant passed in does not exist', () => {
          expect(getUserPicture(defaultUser, 'extra-large')).toEqual('https://http2.mlstatic.com/D_some-picture-id-O.jpg');
        });
      });

      describe('webp support', () => {
        it('returns the user picture with variant small', () => {
          expect(getUserPicture(defaultUser, 'small', { browser: browserWithWebPSupport })).toEqual('https://http2.mlstatic.com/D_some-picture-id-M.webp');
        });

        it('returns the user picture with variant medium', () => {
          expect(getUserPicture(defaultUser, 'medium', { browser: browserWithWebPSupport })).toEqual('https://http2.mlstatic.com/D_some-picture-id-S.webp');
        });

        it('returns the user picture with variant large', () => {
          expect(getUserPicture(defaultUser, 'large', { browser: browserWithWebPSupport })).toEqual('https://http2.mlstatic.com/D_some-picture-id-G.webp');
        });

        it('returns the user picture with variant original', () => {
          expect(getUserPicture(defaultUser, 'original', { browser: browserWithWebPSupport })).toEqual('https://http2.mlstatic.com/D_some-picture-id-O.webp');
        });

        it('returns the user picture with variant -O since it is the default one, variant passed in does not exist,', () => {
          expect(getUserPicture(defaultUser, 'extra-large', { browser: browserWithWebPSupport })).toEqual('https://http2.mlstatic.com/D_some-picture-id-O.webp');
        });
      });
    });

    describe('high density', () => {
      describe('no webp support', () => {
        it('returns the user picture with variant small', () => {
          expect(getUserPicture(defaultUser, 'small', { highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-M.jpg');
        });

        it('returns the user picture with variant medium', () => {
          expect(getUserPicture(defaultUser, 'medium', { highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-S.jpg');
        });

        it('returns the user picture with variant large', () => {
          expect(getUserPicture(defaultUser, 'large', { highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-G.jpg');
        });

        it('returns the user picture with variant original', () => {
          expect(getUserPicture(defaultUser, 'original', { highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-O.jpg');
        });

        it('returns the user picture with variant -O since it is the default one, variant passed in does not exist', () => {
          expect(getUserPicture(defaultUser, 'extra-large', { highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-O.jpg');
        });
      });

      describe('webp support', () => {
        it('returns the user picture with variant small', () => {
          expect(getUserPicture(defaultUser, 'small', { browser: browserWithWebPSupport, highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-M.webp');
        });

        it('returns the user picture with variant medium', () => {
          expect(getUserPicture(defaultUser, 'medium', { browser: browserWithWebPSupport, highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-S.webp');
        });

        it('returns the user picture with variant large', () => {
          expect(getUserPicture(defaultUser, 'large', { browser: browserWithWebPSupport, highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-G.webp');
        });

        it('returns the user picture with variant original', () => {
          expect(getUserPicture(defaultUser, 'original', { browser: browserWithWebPSupport, highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-O.webp');
        });

        it('returns the user picture with variant -O since it is the default one, variant passed in does not exist,', () => {
          expect(getUserPicture(defaultUser, 'extra-large', { browser: browserWithWebPSupport, highDensity: true })).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-O.webp');
        });
      });
    });

    it('returns null since there is no user', () => {
      expect(getUserPicture(null, 'large')).toEqual(null);
    });

    it('returns null since there is no raw property on user', () => {
      const user = {};

      expect(getUserPicture(user, 'large')).toEqual(null);
    });

    it('returns null since there is no thumbnail property on raw', () => {
      const user = {
        raw: {},
      };

      expect(getUserPicture(user, 'large')).toEqual(null);
    });

    it('returns null since there is no picture_id property on thumbnail', () => {
      const user = {
        raw: {
          thumbnail: {},
        },
      };

      expect(getUserPicture(user, 'large')).toEqual(null);
    });
  });

  describe('getUserPictures', () => {
    it('returns an object with low and high density pictures, and a hasPicture in true, since we have provided one', () => {
      const userPictures = getUserPictures({ user: defaultUser });

      expect(userPictures.hasPicture).toEqual(true);
      expect(userPictures.lowDensityPictureUrl).toEqual('https://http2.mlstatic.com/D_some-picture-id-M.jpg');
      expect(userPictures.highDensityPictureUrl).toEqual('https://http2.mlstatic.com/D_2X_some-picture-id-M.jpg');
    });

    it('returns an object has picture in false, since there is no user', () => {
      const userPictures = getUserPictures({});

      expect(userPictures.hasPicture).toEqual(false);
      expect(userPictures.lowDensityPictureUrl).toEqual(null);
      expect(userPictures.highDensityPictureUrl).toEqual(null);
    });
  });
});

