describe('Commons', () => {
  beforeEach(() => jest.resetModules());

  describe('Prepare to render navigation-pii-data-factory', () => {
    it('should return empty response with unauthenticated user', (done) => {
      const factory = require('../../../prepare-to-render/services/navigation-pii-data-factory');

      const service = factory({});

      service({})
        .then((result) => {
          expect(result).toEqual({});
          done();
        });
    });

    it('should return response with mapped props', (done) => {
      const preferred = 'preferred name';
      const getPIIUserData = jest.fn().mockResolvedValue({
        names: {
          preferred: preferred,
        },
      });
      const clientFactoryMock = jest.fn().mockReturnValue({ getPIIUserData });
      jest.doMock('node-vault-client', () => ({
        VaultClient: clientFactoryMock,
      }));

      const factory = require('../../../prepare-to-render/services/navigation-pii-data-factory');

      const userProperties = {
        names: {
          preferred: true,
        },
      };
      const service = factory({
        userProperties,
        mapper: data => ({
          preferred: data.names.preferred,
        }),
      });

      const req = {
        user: {},
      };
      service(req)
        .then((result) => {
          expect(clientFactoryMock).toHaveBeenCalled();
          expect(getPIIUserData).toHaveBeenCalledWith({
            req,
            userProperties,
          });
          expect(result).toEqual({ preferred });
          done();
        });
    });

    it('should log and return empty response with an error', (done) => {
      const preferred = 'preferred name';
      const getPIIUserData = jest.fn().mockResolvedValue({
        names: {
          preferred: preferred,
        },
      });
      const clientFactoryMock = jest.fn().mockReturnValue({ getPIIUserData });
      jest.doMock('node-vault-client', () => ({
        VaultClient: clientFactoryMock,
      }));

      const factory = require('../../../prepare-to-render/services/navigation-pii-data-factory');

      const userProperties = {
        names: {
          preferred: true,
        },
      };
      const loggerError = jest.fn();
      const err = new Error('some error');
      const service = factory({
        userProperties,
        mapper: (data) => {
          throw err;
        },
        logger: {
          error: loggerError,
        },
      });

      const req = {
        user: {},
      };
      service(req)
        .then((result) => {
          expect(loggerError).toHaveBeenCalledWith(expect.objectContaining({
            req,
            err,
            errorType: 'pii-data',
            message: expect.any(String),
          }));
          expect(result).toEqual({});
          done();
        });
    });
  });
});
