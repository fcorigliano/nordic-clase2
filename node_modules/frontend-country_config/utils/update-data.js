/**
 * Fetches the countries data form API and store it in appropriate format
 */

const createRestClient = require('frontend-restclient');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');
const fs = require('fs');
const logger = require('frontend-logger');
const env = require('frontend-env');

const log = logger('country');
const { PRODUCTION } = env;

const restclientOptions = {
  timeout: PRODUCTION ? 3000 : 10000,
  retry: {
    maxRetries: 2,
    delay: 0,
  },
  logErrors: false,
};
const restclient = createRestClient(restclientOptions);

/**
 * Fetches data from the requested endpoint
 *
 * @param {string} endpoint
 * @return {Promise}
 */
function getDataFromEndpoint(endpoint) {
  const config = {
    context: buildFlowStarterContext(),
  };
  return restclient.get(endpoint, config)
    .then((res) => {
      if (res.status !== 200) {
        throw new Error(`Request to ${endpoint} was not successful. Status code: ${res.status}`);
      }
      // return the raw data instead of restclient structure response
      return res.data;
    });
}

/**
 * Fetches the list of available countries
 *
 * @return {Promise}
 */
function getCountries() {
  return getDataFromEndpoint('countries');
}

/**
 * Fetches the data of a given country
 *
 * @param {string} id
 * @return {Promise}
 */

function getCountry(id) {
  return getDataFromEndpoint(`countries/${id}`);
}

/**
 * Fetches the list of available currencies
 *
 * @return {Promise}
 */
function getCurrencies() {
  return getDataFromEndpoint('currencies');
}

/**
 * Fetches the list of available sites
 *
 * @return {Promise}
 */
function getSites() {
  return getDataFromEndpoint('sites');
}

/**
 * Fetches the data of a given site
 *
 * @return {Promise}
 */
function getSite(id) {
  return getDataFromEndpoint(`sites/${id}`);
}

/**
 * Determines de currencies for a given couuntry.
 *
 * @param {Object} country
 * @param {Array} currencies
 * @param {Array} sites
 * @return {Promise}
 */
function determineCurrencies(country, currencies, sites) {
  const completeCurrenciesList = {};
  let partialCurrenciesList = sites.find((site) => (
    site.name === country.name
      // Fix name inconsitencies between Sites API and Countries API.
      || (site.name === 'Dominicana' && country.name === 'República Dominicana')
      || (site.name === 'Perú' && country.name === 'Peru')
  ));

  partialCurrenciesList = partialCurrenciesList
    ? partialCurrenciesList.currencies
    // Fix inconsitencies: 'Puerto Rico' extists in Countries API but not in Sites API.
    : [{ id: country.currency_id }];

  partialCurrenciesList.forEach((siteCurrency) => {
    completeCurrenciesList[siteCurrency.id] = currencies.find((currency) => siteCurrency.id === currency.id);
  });

  return completeCurrenciesList;
}

/**
 * Gets the data from the different APIs
 *
 * @return {Object}
 */
function getData() {
  return Promise.all([getCountries(), getCurrencies(), getSites()])
    .then(([countries, currencies, sites]) => {
      const data = {};

      return Promise.all(countries.map((country) => getCountry(country.id)))
        .then((countriesList) => (
          Promise.all(sites.map((site) => getSite(site.id)))
            .then((sitesList) => {
              countriesList.forEach((country) => {
                data[country.id] = country;
                data[country.id].currencies = determineCurrencies(country, currencies, sitesList);
              });

              return data;
            })
        ))
        .then(() => data);
    })
    .catch((err) => {
      log.info('falló updater de countries, notifica a frontendcore@', err);

      throw err;
    });
}

function writeData(data) {
  try {
    fs.writeFileSync('./config/countries.json', JSON.stringify(data, null, 2));
    log.info('All done! Countries data successfully updated.');
  } catch (err) {
    log.info('falló updater de countries, notifica a frontendcore@', err);
  }
}

/**
 * This method looks for the process environment value, then from the
 * default specified as an argument.
 */
function initChecker(envValue, defaultValue) {
  return typeof envValue === 'undefined' ? defaultValue : Boolean(JSON.parse(envValue));
}

module.exports = {
  getData,
  initChecker,
  writeData,
  getDataFromEndpoint,
};
