const defaults = require('../config/defaults');
const { isValid } = require('./validation');
const { getDefaultUrl } = require('./utils');
const log = require('./logger');

function isValidMercadoShops(platformaId, param, host, protocols) {
  return platformaId === 'MS' && isValid(param, [host], protocols);
}

/**
 * @type {import('../index').preventOpenRedirect}
 */
function preventOpenRedirect(config = {}) {
  const opts = Object.assign({}, defaults, config);

  return function preventOpenRedirectMiddleware(req, res, next) {
    const urlParams = opts.params.map(param => param && { [param]: req.query[param] });

    const invalidParams = urlParams.filter((urlParam) => {
      const url = urlParam[Object.keys(urlParam)[0]];

      return url && !(isValidMercadoShops(req.platform.id, url, req.hostname, opts.protocols)
      || isValid(url, opts.whitelist, opts.protocols));
    });

    if (!invalidParams.length) {
      return next();
    }

    invalidParams.forEach((invalidParam) => {
      log(invalidParam[Object.keys(invalidParam)[0]], req.platform);
    });

    if (opts.handleInvalidRedirectParam) {
      res.locals.invalidParams = invalidParams;

      return opts.handleInvalidRedirectParam(req, res, next);
    }

    return res.redirect(getDefaultUrl(req.platform));
  };
}

module.exports = preventOpenRedirect;
exports = module.exports;
exports.preventOpenRedirect = preventOpenRedirect;
