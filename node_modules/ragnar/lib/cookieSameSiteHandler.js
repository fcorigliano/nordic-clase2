/* eslint-disable no-prototype-builtins,no-param-reassign */
const logger = require('frontend-logger')('cookie-response-handler');
const statsdInternal = require('frontend-statsd/internal');
const { DEVELOPMENT } = require('frontend-env');

const log = (message, track, params = {}) => {
  if (DEVELOPMENT) {
    logger.warn(message);
  }
  statsdInternal.increment(`nordic.ragnar.cookie.samesite.${track}.count`, params);
};

const prepareOptionsCookie = function prepareOptionsCookie(req, options) {
  let sameSite = false;
  const hasSameSiteProperty = options.hasOwnProperty('sameSite');
  const hasSupport = (req.browser && req.browser.support && req.browser.support.sameSite) || false;
  const isSecure = req.headers.ml_ssl === '1' || req.connection.encrypted;
  const siteId = req.platform && req.platform.siteId ? { site_id: req.platform.siteId } : {};

  if (!hasSupport && hasSameSiteProperty) {
    // eslint-disable-next-line max-len
    const message = `Browser has no support for SameSite cookie's attribute but you are trying to set it to for ${options.sameSite} cookie. Please consider to use req.browser.support.sameSite to ensure complete support by client.`;
    log(message, 'browser_unsupported', { samesite: options.sameSite, ...siteId });
  }

  if (hasSupport && !hasSameSiteProperty) {
    const message = 'SameSite cookieâ€™s value was not set so we set it for you as SameSite=None, it is safe but it may be is not what you want. Please consider to see https://web.dev/samesite-cookies-explained for more details.';
    log(message, 'missing_property', { ...siteId });
    sameSite = 'none';
  }

  if (hasSupport && hasSameSiteProperty) {
    // eslint-disable-next-line prefer-destructuring
    sameSite = typeof options.sameSite === 'string'
      ? options.sameSite.toLowerCase() : options.sameSite;
  }

  if (hasSupport && isSecure && sameSite === 'none') {
    options.secure = true;
  }

  return { ...options, ...{ sameSite } };
};

module.exports = function cookieSameSiteHandler(req, res, next) {
  const originalCookieFn = res.cookie;

  // https://github.com/jshttp/cookie/blob/master/index.js#L159
  res.cookie = function cookieOverride(name, value, options = {}) {
    const optionsWrapped = prepareOptionsCookie(req, options);

    return originalCookieFn.apply(res, [name, value, optionsWrapped]);
  };

  next();
};
