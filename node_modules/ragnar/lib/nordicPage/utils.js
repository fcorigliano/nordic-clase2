function getInvalidTypeMessage({ name, type, file }) {
  return (
    `Invalid type for ${name}. `
    + `Expected to be of type ${type}.\nFile: ${file}`
  );
}

const hasDeviceConfigured = (devicesInPaths, device) => devicesInPaths.indexOf(device) !== -1;

const sendGetServerSidePropsHookErrorIfApply = (
  error,
) => function sendGetServerSidePropsHookErrorMiddleware(req, res, next) {
  if (error) {
    next(error);
  } else {
    next();
  }
};

const getPageResources = (paths, device) => {
  let pageResources = paths[device.type] ? paths[device.type] : paths.base;

  if (device.webView) {
    if (paths.webview) {
      pageResources = paths.webview;
    } else if (paths.mobile) {
      pageResources = paths.mobile;
    }
  }

  return pageResources;
};

module.exports = {
  hasDeviceConfigured,
  getInvalidTypeMessage,
  sendGetServerSidePropsHookErrorIfApply,
  getPageResources,
};
