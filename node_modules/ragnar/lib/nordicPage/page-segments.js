const { NORDIC_PAGE_MIDDLEWARE } = require('./constants');
const { getInvalidTypeMessage } = require('./utils');
const { validateHookArray, validateHookFunction } = require('./validators');
const PageMiddlewareError = require('./errors/PageMiddlewareError');

/**
 * Checks if the getServerSideProps hooks set in the files are arrays and if
 * their hooks are functions. If it is valid, returns the getServerSideProps hooks set.
 * getServerSideProps hooks are: beforeGetServerSideProps and afterGetServerSideProps
 * @param {string} baseHooksFile - File containing the base getServerSideProps hooks
 * @param {string} specificHooksFile - File containing the specific getServerSideProps
 * hooks of the page
 * @returns {object} {
 *    beforeGetServerSideProps,
 *    afterGetServerSideProps,
 * } - getServerSideProps hooks for page
 */
const getGetServerSidePropsHooksIfApply = (baseHooksFile, specificHooksFile) => {
  const result = {};
  let baseBeforeGetServerSideProps = [];
  let baseAfterGetServerSideProps = [];
  let specificBeforeGetServerSideProps = [];
  let specificAfterGetServerSideProps = [];

  if (baseHooksFile) {
    ({
      beforeGetServerSideProps: baseBeforeGetServerSideProps,
      afterGetServerSideProps: baseAfterGetServerSideProps,
    // eslint-disable-next-line import/no-dynamic-require, global-require
    } = require(baseHooksFile));
  }

  if (specificHooksFile) {
    ({
      beforeGetServerSideProps: specificBeforeGetServerSideProps,
      afterGetServerSideProps: specificAfterGetServerSideProps,
    // eslint-disable-next-line import/no-dynamic-require, global-require
    } = require(specificHooksFile));
  }

  const getServerSidePropsHooks = ([
    {
      name: 'beforeGetServerSideProps',
      hooks: baseBeforeGetServerSideProps,
      file: baseHooksFile,
    },
    {
      name: 'afterGetServerSideProps',
      hooks: baseAfterGetServerSideProps,
      file: baseHooksFile,
    },
    {
      name: 'beforeGetServerSideProps',
      hooks: specificBeforeGetServerSideProps,
      file: specificHooksFile,
    },
    {
      name: 'afterGetServerSideProps',
      hooks: specificAfterGetServerSideProps,
      file: specificHooksFile,
    },
  ]);

  try {
    getServerSidePropsHooks.forEach(({ name, hooks, file }) => {
      const hooksAreValid = validateHookArray({ name, hooks, file });

      if (hooksAreValid) {
        result[name] = (result[name] ? result[name].concat(hooks) : hooks);
      }
    });
  } catch (error) {
    result.getServerSidePropsHookError = error;
  }

  return result;
};

/**
 * Checks if the middleware in the page is a function and,
 * if it is, returns an object.
 * These middleware are: getServerSideProps and setPageSettings
 * @param {object} pageMiddleware - Page's middleware to be validated
 * @param {string} pageMiddleware.name - Page's middleware name
 * @param {Function} pageMiddleware.middleware - Page's middleware function
 * @param {string} pageMiddleware.view - View of page's middleware page
 * @param {Function} pageMiddleware.getResult - Page's middleware promise to be executed
 * @returns {object} Object returned by page middleware
 */
async function getPageMiddlewareIfApply({ name, middleware, view, getResult }) {
  let result;
  let msg = '';

  if (typeof middleware !== 'function') {
    msg = getInvalidTypeMessage({ name, file: view, type: 'function' });
    throw new Error(msg);
  }

  try {
    result = await getResult();
  } catch (error) {
    throw new PageMiddlewareError(name, error);
  }

  if (typeof result !== 'object') {
    msg = `Invalid return type for ${name}. `
        + `The expected return value is an object. \nFile: ${view}`;
    throw new Error(msg);
  }

  return result;
}

/**
 * Checks if the props of the middleware in the page have the correct data type.
 * The expected data types for the properties are defined in the
 * constant NORDIC_PAGE_MIDDLEWARE. If they are valid, returns page properties.
 * @param {object} pageMiddleware - Page's middleware whose props must be validated
 * @param {string} pageMiddleware.name - Page's middleware name identifier
 * @param {object} pageMiddleware.props - Page's middleware props value
 * @param {string} pageMiddleware.view - View of page's middleware page
 * @returns {object} Final props object
 */
function getMiddlewarePropsIfApply({ name, props, view }) {
  let msg = '';

  Object.keys(props).forEach((prop) => {
    const propConfig = NORDIC_PAGE_MIDDLEWARE[name].props[prop];
    const value = props[prop];

    // eslint-disable-next-line valid-typeof
    if (value !== null && propConfig && typeof value !== propConfig.type) {
      msg += `\n- Property: '${propConfig.displayName}' must be of type ${propConfig.type}.`;
      props[prop] = propConfig.defaultValue;
    }
  });

  if (msg) {
    const funcName = NORDIC_PAGE_MIDDLEWARE[name].name;
    throw new Error(`Invalid prop types at ${funcName}.${msg}\nFile: ${view}`);
  }

  return props;
}

/**
 * Checks if the error hook in the file is a function.
 * If it is valid, returns onPageError hook.
 * Error hook name is: onPageError
 * @param {string} baseHooksFile - File containing the error hook
 * @returns {object} onPageError - Error hook of page
 */
const getOnPageErrorHandlerIfApply = (baseHooksFile) => {
  const name = 'onPageError';
  const errorMessage = getInvalidTypeMessage({
    name,
    file: baseHooksFile,
    type: 'function',
  });
  // eslint-disable-next-line import/no-dynamic-require, global-require
  const hooks = require(baseHooksFile);
  const hookIsValid = validateHookFunction({
    hook: name,
    hooksList: hooks,
    errorMessage,
  });

  if (hookIsValid) {
  // eslint-disable-next-line import/no-dynamic-require, global-require
    const { onPageError } = require(baseHooksFile);

    return onPageError;
  }

  return null;
};

/**
 * Checks if the afterRender hook in the file is a function.
 * If it is valid, returns Layout done function.
 * @param {object} req - HTTP request
 * @param {object} res - HTTP response
 * @param {function} next - Next return function
 * @param {object} pageHooks - getServerSideProps page hooks file path
 * @returns {function} done - The done function for frontend-layout
 */
const getLayoutDoneIfApply = async ({ req, res, next, pageHooks }) => {
  let done = null;

  const name = 'afterRender';
  const errorMessage = getInvalidTypeMessage({
    name,
    file: pageHooks,
    type: 'function',
  });
  // eslint-disable-next-line import/no-dynamic-require, global-require
  const hooks = require(pageHooks);
  const hookIsValid = validateHookFunction({
    hook: name,
    hooksList: hooks,
    errorMessage,
  });

  if (hookIsValid) {
  // eslint-disable-next-line import/no-dynamic-require, global-require
    const { afterRender } = require(pageHooks);

    done = await afterRender(req, res, next);

    if (typeof done !== 'function') {
      throw new Error(
        'Invalid return type for afterRender. '
        + `Expected to be of type function.\nFile: ${pageHooks}`,
      );
    }
  }

  return done;
};

module.exports = {
  getGetServerSidePropsHooksIfApply,
  getPageMiddlewareIfApply,
  getMiddlewarePropsIfApply,
  getOnPageErrorHandlerIfApply,
  getLayoutDoneIfApply,
};
