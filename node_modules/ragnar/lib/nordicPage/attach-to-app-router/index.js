const { TEST } = require('frontend-env');

const RouteDiscovery = require('frontend-page/routeDiscovery');

const log = require('../../logger');
const {
  addDiscoveredRouteToAppRouter,
  addHttp404ErrorToAppRouter,
  addPageErrorHandler,
} = require('./helpers');

const attachHttpErrorsIfApplies = (appRouter, discoveredHttpErrors) => {
  if (typeof discoveredHttpErrors !== 'object'
  || Array.isArray(discoveredHttpErrors)) {
    return;
  }

  addHttp404ErrorToAppRouter(appRouter, discoveredHttpErrors[404]);
};

const attachRoutesIfApplies = (appRouter, discoveryResult) => {
  const { baseHooksFile, discoveredRoutes = [] } = discoveryResult;

  if (!Array.isArray(discoveredRoutes)) {
    return;
  }

  discoveredRoutes.forEach((discoveredRoute) => {
    addDiscoveredRouteToAppRouter({ appRouter, discoveredRoute, baseHooksFile });
  });
};

const attachNordicPagesToAppRouter = (appRouter) => {
  try {
    const discoveryResult = RouteDiscovery.getDiscoveredRoutes();

    if (!discoveryResult) {
      return;
    }

    const { discoveredHttpErrors = {}, baseHooksFile } = discoveryResult;

    attachRoutesIfApplies(appRouter, discoveryResult);

    attachHttpErrorsIfApplies(appRouter, discoveredHttpErrors);

    addPageErrorHandler(appRouter, baseHooksFile);
  } catch (error) {
    log.error(error);
  }
};

module.exports = attachNordicPagesToAppRouter;

/**
 * Expose for testing
 */
if (TEST) {
  exports = module.exports; // eslint-disable-line prefer-destructuring
  exports.attachNordicPagesToAppRouter = attachNordicPagesToAppRouter;
  exports.attachRoutesIfApplies = attachRoutesIfApplies;
  exports.attachHttpErrorsIfApplies = attachHttpErrorsIfApplies;
}
