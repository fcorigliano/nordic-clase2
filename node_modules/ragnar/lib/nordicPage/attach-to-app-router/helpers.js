const {
  getGetServerSidePropsHooksIfApply,
  getOnPageErrorHandlerIfApply,
} = require('../page-segments');
const { sendGetServerSidePropsHookErrorIfApply } = require('../utils');
const { sendBusinessMetric } = require('../metrics');
const { nordicPageMiddleware, afterRenderMiddleware } = require('../middleware/navigable-page-middleware');
const { renderMiddleware } = require('../middleware/shared-middleware');
const { http404ErrorMiddleware } = require('../middleware/http-error-page-middleware');
const NordicPagesProperty = require('../middleware/nordic-pages-property');

const addDiscoveredRouteToAppRouter = ({ appRouter, discoveredRoute, baseHooksFile }) => {
  const { route, paths, hooks: pageHooks } = discoveredRoute;
  let beforeGetServerSideProps = [];
  let afterGetServerSideProps = [];
  let getServerSidePropsHookError = '';

  if (baseHooksFile || pageHooks) {
    ({
      beforeGetServerSideProps,
      afterGetServerSideProps,
      getServerSidePropsHookError,
    } = getGetServerSidePropsHooksIfApply(baseHooksFile, pageHooks));
  }

  appRouter.get(
    route,
    sendGetServerSidePropsHookErrorIfApply(getServerSidePropsHookError),
    (beforeGetServerSideProps || []),
    NordicPagesProperty.definePropertyForNavigableNordicPage({ route, paths, pageHooks }),
    nordicPageMiddleware,
    (afterGetServerSideProps || []),
    afterRenderMiddleware,
    renderMiddleware,
  );

  const pageData = { ...discoveredRoute, baseHooksFile };

  sendBusinessMetric(pageData);
};

const addHttp404ErrorToAppRouter = (appRouter, http404ErrorData) => {
  if (!http404ErrorData) {
    return;
  }
  const { paths } = http404ErrorData;

  appRouter.use(
    NordicPagesProperty.definePropertyFor404HttpError(paths),
    http404ErrorMiddleware,
    renderMiddleware,
  );

  const pageData = { ...http404ErrorData, statusCode: 404 };

  sendBusinessMetric(pageData);
};

const addPageErrorHandler = (appRouter, baseHooksFile) => {
  if (baseHooksFile) {
    const onPageError = getOnPageErrorHandlerIfApply(baseHooksFile);

    if (onPageError) {
      appRouter.use(onPageError);
    }
  }
};

module.exports = {
  addDiscoveredRouteToAppRouter,
  addHttp404ErrorToAppRouter,
  addPageErrorHandler,
};
