const { getInvalidTypeMessage } = require('./utils');

/**
 * Checks if the hook of the data receive is a function
 * @param {string} hook - Hook to be validated
 * @param {object} hooks - Object with list of hooks
 * @param {string} errorMessage - Error message to be shown in case of invalid type
 * @returns {boolean} hookIsValid - Returns if the hook is valid or not
 */
const validateHookFunction = ({ hook, hooksList, errorMessage }) => {
  let hookIsValid = false;
  const hookUnit = hooksList[hook];

  if (typeof hookUnit !== 'undefined') {
    if (typeof hookUnit !== 'function') {
      throw new Error(errorMessage);
    }

    hookIsValid = true;
  }

  return hookIsValid;
};

/**
 * Checks if the hooks received are an array and if
 * their contents are functions.
 * @param {string} name - Hooks set name
 * @param {Array[Function]} hooks - Hooks to be validated
 * @param {string} file - File containing the hooks
 * @returns {boolean} hooksAreValid - Returns if hooks are valid or not
 */
const validateHookArray = ({ name, hooks, file }) => {
  let hooksAreValid = false;
  if (typeof hooks !== 'undefined') {
    if (!Array.isArray(hooks)) {
      throw new Error(
        getInvalidTypeMessage({ name, file, type: 'array' }),
      );
    } else if (hooks.length > 0) {
      const errorMessage = `Invalid hooks type on ${name}, `
      + `all hooks must be functions.\nFile: ${file}`;
      for (let hook = 0; hook < hooks.length; hook += 1) {
        hooksAreValid = validateHookFunction({
          hook,
          hooksList: hooks,
          errorMessage,
        });
      }

      hooksAreValid = true;
    }
  }
  return hooksAreValid;
};

const validatePageComponent = (component, view) => {
  if (typeof component === 'undefined') {
    throw new Error(
      'Invalid export type for the page component. The expected export '
        + `type is default export.\nFile: ${view}`,
    );
  }

  if (typeof component !== 'function') {
    throw new Error(
      'Invalid page component type. Expected to be a '
        + 'Function to be interpreted as a React Component.\n'
        + `File: ${view}`,
    );
  }
};

module.exports = {
  validatePageComponent,
  validateHookArray,
  validateHookFunction,
};
exports = module.exports;

if (process.env.NODE_ENV === 'test') {
  exports = module.exports;
  exports.validateHookFunction = validateHookFunction;
}
