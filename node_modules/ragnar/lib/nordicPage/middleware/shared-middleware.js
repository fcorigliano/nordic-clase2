const feConfig = require('frontend-config');
const NordicPage = require('frontend-page/nordicPage');

const { NORDIC_PAGE_MIDDLEWARE } = require('../constants');
const { getPageMiddlewareIfApply } = require('../page-segments');
const { validatePageComponent } = require('../validators');

const NordicPagesProperty = require('./nordic-pages-property');

async function getServerSidePropsMiddleware(req, res, next) {
  const { view } = req.nordicPages.pageResources;

  // eslint-disable-next-line import/no-dynamic-require, global-require
  const { getServerSideProps } = require(view);

  NordicPagesProperty.initializeServerSidePropsData(req);

  let settings;
  let pageState;

  if (getServerSideProps) {
    const getServerSidePropsResult = await getPageMiddlewareIfApply({
      name: NORDIC_PAGE_MIDDLEWARE.GET_SERVER_SIDE_PROPS.name,
      middleware: getServerSideProps,
      view,
      getResult: (async () => getServerSideProps(req, res, next)),
    });

    ({
      props: pageState = {},
      settings = {},
    } = { ...getServerSidePropsResult });

    NordicPagesProperty.addServerSidePropsData({ req, pageState, settings });
  }

  return req.nordicPages;
}

// eslint-disable-next-line no-unused-vars
async function setPageSettingsMiddleware(req, res, next) {
  const { route, statusCode, pageResources, serverSidePropsData } = req.nordicPages;
  const { view, client } = pageResources;
  const { settings } = serverSidePropsData;

  // eslint-disable-next-line import/no-dynamic-require, global-require
  const { hydrate = !statusCode, setPageSettings } = require(view);

  let layoutOptions;
  let navigationOptions;
  let pageSettings;
  let style = '';

  let id = route;

  if (statusCode) {
    id = `status-code-${statusCode}`;
  }

  if (pageResources.styles) {
    style = `${client}.css`;
  }

  const defaultPageSettings = {
    deviceType: req.device.type,
    id,
    i18n: req.i18n,
    imagesPrefix: feConfig.get('assets.prefix'),
    script: client,
    style,
    hydrate,
    isLegacyBrowser: req.legacyBrowser || false,
    appName: process.env.npm_package_name,
    translations: (req.translations ? req.translations : {}),
  };

  NordicPagesProperty.initializePageSettingsData(req, defaultPageSettings);

  if (typeof setPageSettings !== 'undefined') {
    const setPageSettingsResult = await getPageMiddlewareIfApply({
      name: NORDIC_PAGE_MIDDLEWARE.SET_PAGE_SETTINGS.name,
      middleware: setPageSettings,
      view: pageResources.view,
      getResult: (() => setPageSettings({ settings })),
    });

    ({
      layout: layoutOptions = null,
      navigation: navigationOptions = null,
      ...pageSettings
    } = { ...defaultPageSettings, ...setPageSettingsResult });

    NordicPagesProperty.addPageSettingsData({ req, pageSettings, layoutOptions, navigationOptions });
  }

  return req.nordicPages;
}

// eslint-disable-next-line no-unused-vars
function renderMiddleware(req, res, next) {
  const { statusCode, pageResources, serverSidePropsData, pageSettingsData } = req.nordicPages;
  const { view } = pageResources;
  const { pageState, done } = serverSidePropsData;
  const { pageSettings, layoutOptions, navigationOptions } = pageSettingsData;

  // eslint-disable-next-line global-require, import/no-dynamic-require
  const Component = require(view).default;

  validatePageComponent(Component, view);

  if (statusCode && statusCode === 404) {
    res.status(404);
  }

  res.render(NordicPage, {
    Component,
    pageState,
    pageSettings,
  }, {
    layoutOptions,
    navigationOptions,
    done,
  });
}

module.exports = {
  getServerSidePropsMiddleware,
  setPageSettingsMiddleware,
  renderMiddleware,
};
