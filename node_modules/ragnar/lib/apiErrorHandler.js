/**
 * Module dependencies
 */
const statuses = require('statuses');
const { TEST } = require('frontend-env');
const log = require('./logger');

/**
 * 500 error handler
 * Error-handling functions have four arguments instead of three.
 */
// eslint-disable-next-line no-unused-vars
const errorHandler500 = (err, req, res, next) => {
  let status = err.status || err.statusCode || 500;

  // Normalize errors to 500
  if (status < 400) {
    status = 500;
  }

  // Create response body
  const body = { status };

  // Log error
  log.error(err.stack, {
    statusCode: status,
    statusText: statuses(status),
  });

  // 5xx errors are not exposed to the client.
  // Instead, they are given a generic message as well as the type.
  if (status >= 500) {
    body.message = statuses(status);
    res.status(status).json(body);
    return;
  }

  // 4xx errors are exposed to the client.
  body.message = err.message;

  if (err.code) {
    body.code = err.code;
  }

  if (err.name) {
    body.name = err.name;
  }

  if (err.type) {
    body.type = err.type;
  }

  res.status(status).json(body);
};

/**
 * 404 error handler
 */
const errorHandler404 = (req, res) => {
  res.status(404).json({
    status: 404,
    message: statuses(404),
  });
};

/**
 * Expose 500 & 404 error handlers
 */
module.exports = [
  errorHandler500,
  errorHandler404,
];

/**
 * Expose for testing
 */
if (TEST) {
  exports = module.exports; // eslint-disable-line prefer-destructuring
  exports.errorHandler500 = errorHandler500;
  exports.errorHandler404 = errorHandler404;
}
