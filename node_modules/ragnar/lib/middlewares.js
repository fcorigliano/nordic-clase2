/**
 * Module dependencies
 */
const compression = require('compression');
const helmet = require('helmet');
const bodyParser = require('body-parser');
const hpp = require('hpp');
const cookieParser = require('cookie-parser');
const platform = require('frontend-platform_detection');
const mshopsDetection = require('frontend-mshops-detection');
const cbtDetection = require('cbt-users-middleware');
const firstPartyDetection = require('first-party-detection');
const device = require('frontend-device_detection');
const { authenticate } = require('frontend-authentication');
const { sessionAnomalies } = require('@auth/session-anomalies');
const { TEST } = require('frontend-env');
const httpCookiesTracking = require('@frontend-cookies-manager/http-cookies-middleware');
const { middleware: dynamicContent } = require('@dynamic-content-libs/dynamic-content-api-middleware'); // solo front
const { middleware: cookiesHelpers } = require('@frontend-cookies-manager/cookies-helpers-middleware');
const apiErrorHandler = require('./apiErrorHandler');
const appErrorHandler = require('./appErrorHandler');
const csp = require('./csp');
const forwardTraceRequestId = require('./forwardTraceRequestId');
const setCacheControlHeader = require('./cache-control');
const blockSuspiciousTraffic = require('./blockSuspiciousTraffic');
const { loggerMiddleware } = require('./logger');
const preventRenderByEtag = require('./preventRenderByEtag');
const cookieResponseHandler = require('./cookieSameSiteHandler');
const { newrelicAttrs } = require('./newrelicAttrs');
const outdatedBrowser = require('./outdatedBrowser');
const csurf = require('./csurf');
const thirdPartySwitchStatusHandler = require('./thirdPartySwitchStatusHandler');
const { awaitPendingPromisesHandler } = require('./awaitPendingPromises');

/**
 * List of configurable middlewares
 * forwardTraceRequestId should be first because its populate request.traceRequestId value
 * that is being used by authenticate and others.
 */
const configurableMiddlewares = {
  forwardTraceRequestId,
  device,
  mshopsDetection,
  platform,
  cookieResponseHandler,
  outdatedBrowser,
  authenticate,
  blockSuspiciousTraffic,
  cbtDetection,
  firstPartyDetection,
  httpCookiesTracking,
};

/**
 * List of shared middlewares that will be placed after configurable middlewares
 */
const sharedAfterConfigurableMiddlewares = [
  sessionAnomalies,
  cookiesHelpers,
];

/**
 * Shared middlewares
 */
const shared = (config = {}) => {
  const sharedMiddlewares = [
    loggerMiddleware(),
    compression(),
    helmet({
      ...!config.middlewares.csp && { contentSecurityPolicy: false },
      referrerPolicy: {
        policy: 'no-referrer-when-downgrade',
      },
      expectCt: {
        maxAge: 0,
        enforce: false,
      },
      permittedCrossDomainPolicies: {
        permittedPolicies: 'none',
      },
      frameguard: false,
      dnsPrefetchControl: {
        allow: true,
      },
    }),
    bodyParser.urlencoded(config.server.bodyParser.urlencoded),
    bodyParser.json(config.server.bodyParser.json),
    bodyParser.raw(config.server.bodyParser.raw),
    cookieParser(),
    hpp(),
    csurf(config),
    awaitPendingPromisesHandler,
  ];

  /**
   * Update shared middlewares
   */
  Object
    .keys(config.middlewares || {})
    .forEach((key) => {
      const middleware = configurableMiddlewares[key];
      if (middleware && config.middlewares[key]) {
        sharedMiddlewares.push(middleware);
      }
    });

  return sharedMiddlewares.concat(sharedAfterConfigurableMiddlewares);
};

/**
 * Expose api middlewares
 */
exports.api = {
  before: (config, sharedPreMiddlewares = []) => ([
    ...shared(config),
    ...sharedPreMiddlewares,
  ]),

  after: (config, sharedPostMiddlewares = []) => ([
    ...sharedPostMiddlewares,
    apiErrorHandler,
    httpCookiesTracking,
  ]),
};

/**
 * Expose app middlewares
 */
exports.app = {
  before: (config, sharedPreMiddlewares = []) => ([
    ...shared(config),
    dynamicContent,
    ...sharedPreMiddlewares,
    ...csp(config),
    ...newrelicAttrs(),
    ...preventRenderByEtag(config),
    setCacheControlHeader,
    thirdPartySwitchStatusHandler,
  ]),

  after: (config, sharedPostMiddlewares = []) => ([
    ...sharedPostMiddlewares,
    appErrorHandler,
  ]),
};

/**
 * Expose for testing
 */
if (TEST) {
  exports.shared = shared;
  exports.csp = csp;
  exports.newrelicAttrs = newrelicAttrs;
}
