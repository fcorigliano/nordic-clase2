const http = require('http');
const config = require('frontend-config');
const env = require('frontend-env');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const SuspiciousTrafficService = require('./services/suspicious-traffic');

const ACCESS_LEVEL = {
  grant: 'grant-access',
  deny: 'deny-access',
};

const SECURITY_LEVEL = {
  low: Symbol.for(ACCESS_LEVEL.grant),
  high: Symbol.for(ACCESS_LEVEL.deny),
  block: Symbol.for(ACCESS_LEVEL.deny),
};

module.exports = function blockSuspiciousTrafficMiddleware(req, res, next) {
  // Should be used only for non-logged users and only in Fury env or for testing,
  // has no sense for development or local production mode
  if (!req.user
    && req.platform
    && config.get('blockSuspiciousTraffic', req.platform.id, req.platform.siteId)
    && (env.FURY || env.TEST)) {
    const payload = {
      siteId: req.platform.siteId,
      ip: req.ip,
      host: req.hostname,
      deviceType: req.device ? req.device.type : '',
      userAgent: req.headers['user-agent'],
      forwardedFor: req.headers['x-forwarded-for'],
      accept: req.headers.accept,
      context: buildRestClientContext(req),
    };

    return SuspiciousTrafficService.getClientStatus(payload)
      .then((status) => {
        if (SECURITY_LEVEL[status] === Symbol.for(ACCESS_LEVEL.deny)) {
          if (req.xhr) {
            return res.status(401).json({ error: http.STATUS_CODES[401] });
          }

          return res.redirect(
            `https:${config.get('url.baseDomain.link', req.platform.id, req.platform.siteId)}/gz/account-verification`,
          );
        }

        return next();
      });
  }

  return next();
};
