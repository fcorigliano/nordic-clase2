const csurf = require('csurf');
const Telemetry = require('nordic-telemetry');
const { TEST, APPLICATION } = require('frontend-env');
const statsdInternal = require('frontend-statsd/internal');

const telemetry = new Telemetry({ envRaw: process.env });
const alwaysIgnoredPaths = ['/refresh_config'];

const getCookie = (csrfConfig = {}, req) => {
  if (csrfConfig.cookie) {
    return req.cookies[csrfConfig.cookie.key] || null;
  }

  return null;
};

const getToken = (csrfConfig = {}, req) => {
  if (typeof csrfConfig.value === 'function') {
    return csrfConfig.value(req) || null;
  }

  return null;
};

const hasUrlMatch = (url, urlPatterns) => urlPatterns.some(pattern => (
  (typeof pattern === 'string' && pattern === url) || (pattern instanceof RegExp && pattern.test(url))
));

const forbiddenInterceptor = (csrfConfig = {}) => (
  (err, req, res, next) => {
    let finalError = err;
    try {
      if (err.code === 'EBADCSRFTOKEN') {
        // first check if path should be ignored
        const ignoredPaths = (csrfConfig.ignorePaths || []).concat(alwaysIgnoredPaths);
        const fullPath = `${req.baseUrl}${req.path}`;
        const isPathIgnored = hasUrlMatch(fullPath, ignoredPaths);
        if (isPathIgnored) {
          finalError = null;
        }

        const cookie = getCookie(csrfConfig, req);
        const token = getToken(csrfConfig, req);
        let reason;
        if (!cookie) {
          reason = 'no_cookie_present';
        } else if (!token) {
          reason = 'no_token_present';
        } else {
          reason = 'cookie_token_mismatch';
        }

        statsdInternal.increment('nordic.ragnar.csrf.forbidden', {
          reason,
          application: APPLICATION,
          ignored: isPathIgnored,
        });
      }
    } finally {
      next(finalError);
    }
  }
);

const CSURF = (config = {}) => {
  const middlewares = [];
  if (config.middlewares && config.middlewares.csrf) {
    telemetry.trackEvent('CSRF', 'ENABLED');

    const csurfConfig = config.server ? config.server.csrf : {};

    middlewares.push(
      csurf(csurfConfig),
      forbiddenInterceptor(csurfConfig),
    );
  } else {
    telemetry.trackEvent('CSRF', 'DISABLED');
  }

  return middlewares;
};

/**
 * Expose CSRF middlewares
 */
module.exports = CSURF;

/**
 * Expose for testing
 */
if (TEST) {
  exports = module.exports; // eslint-disable-line prefer-destructuring
  exports.getToken = getToken;
  exports.getCookie = getCookie;
}
