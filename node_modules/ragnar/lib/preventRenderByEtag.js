const env = require('frontend-env');
const statsdInternal = require('frontend-statsd/internal');
const { getResponseCookie } = require('./utils/cookie');

function getEtag(req) {
  return req.app.get('etag fn')(req.keyForEtag);
}

function setEtag(req, res) {
  res.set('ETag', getEtag(req));
}

function isEtagMatch(req) {
  return req.headers['if-none-match'] === getEtag(req) && (req.method === 'GET' || req.method === 'HEAD');
}

function log(siteId, status, refresh = false) {
  statsdInternal.increment('nordic.prevent_render_by_etag.count', {
    site_id: siteId,
    status,
    refresh,
  });
}

function getCsrfEtagKey(req, res) {
  // eslint-disable-next-line no-underscore-dangle
  const csrfToken = `${req.cookies._csrf || getResponseCookie(res, '_csrf')}`;
  return csrfToken ? `-${csrfToken}` : '';
}

function preventRenderByEtagMiddleware(req, res, next) {
  if (req.device.webView) {
    req.headers.purpose = 'etag';
    const csrfEtagKey = getCsrfEtagKey(req, res);
    req.keyForEtag = `${req.device.nativeApp.version}-${env.VERSION || env.npm_package_version}-${req.platform.siteId}${csrfEtagKey}`;

    if (isEtagMatch(req)) {
      log(req.platform.siteId, 304);
      setEtag(req, res);
      res.status(304);
      return res.end();
    }

    log(req.platform.siteId, 200, !!req.headers['if-none-match']);
  }

  return next();
}

module.exports = (config = {}) => {
  const middlewares = [];
  if (config.middlewares && config.middlewares.preventRenderByEtag) {
    middlewares.push(...[
      preventRenderByEtagMiddleware,
    ]);
  }
  return middlewares;
};
