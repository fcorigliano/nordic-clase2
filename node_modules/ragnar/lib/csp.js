/**
 * Module dependencies
 */
const { contentSecurityPolicy } = require('helmet');
const crypto = require('crypto');
const { TEST } = require('frontend-env');

/**
 * Return if a given browser has support for CSP3 (nonce + strict-dynamic)
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
 * Browsers supported:
 * - Chrome >= 52
 * - Firefox >= 52
 * - Opera >= 39
 */
function isBrowserSupported(browser = {}) {
  return (
    (['chrome', 'firefox'].includes(browser.name) && parseInt(browser.major, 10) >= 52)
    || (browser.name === 'opera' && parseInt(browser.major, 10) >= 39)
  );
}

/**
 * Generates a nonce for supported browsers
 */
function generateCSPNonce(req, res, next) {
  if (isBrowserSupported(req.browser)) {
    // eslint-disable-next-line no-inner-declarations
    function randomBytesCB(err, buf) {
      if (err) {
        next();
      }
      res.locals.nonce = buf.toString('base64');
      next();
    }
    crypto.randomBytes(16, randomBytesCB);
  } else {
    next();
  }
}

/**
 * Returns CSP middlewares
 */
const CSP = (config = {}) => {
  const middlewares = [];
  if (config.middlewares && config.middlewares.csp) {
    middlewares.push(...[
      generateCSPNonce,
      contentSecurityPolicy(config.server.csp),
    ]);
  }
  return middlewares;
};

/**
 * Expose CSP middlewares
 */
module.exports = CSP;

/**
 * Expose for testing
 */
if (TEST) {
  exports = module.exports; // eslint-disable-line prefer-destructuring
  exports.generateCSPNonce = generateCSPNonce;
  exports.isBrowserSupported = isBrowserSupported;
}
