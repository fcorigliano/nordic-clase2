/// <reference types="node" />

import { Router, RequestHandler } from 'express';
import 'frontend-authentication';
import 'frontend-device_detection';
import 'frontend-platform_detection';

declare global {
  namespace Express {
    interface Request {
      /**
       * Request ID which is forwarded in all subsequent requests.
       * This Request ID is part of the Traceability Initiative.
       */
      traceRequestId?: string;

      /**
       * Describe property here
       */
      data_audience_3p_denied: boolean;

      /**
       * Array of promises that should be awaited
       * before sending the response to the client.
       */
      pendingPromises: Promise<any>[];
    }
  }
}

declare function Ragnar(config: Ragnar.RagnarConfig): Ragnar.Ragnar;

export = Ragnar;

declare namespace Ragnar {
  export const router: typeof Router;

  export interface RagnarConfig {
    config: RagnarServerConfig;
    apiRouter?: Router;
    appRouter?: Router;
    sharedPreMiddlewares?: RequestHandler[];
    sharedPostMiddlewares?: RequestHandler[];
  }

  export interface RagnarServerConfig {
    basePath: string;
    version: string;
    server: {
      port: number;
      securePort: number;
      static: string;
      host?: '0.0.0.0';
      bodyParser?: {
        json?: {
          limit?: string;
        };
        urlencoded?: {
          limit?: string;
          extended?: boolean;
        };
        raw?: {
          limit?: string;
        };
      };
      csp?: object;
    },
    middlewares?: {
      forwardTraceRequestId?: boolean;
      device?: boolean;
      mshopsDetection?: boolean;
      platform?: boolean;
      cookieResponseHandler?: boolean;
      authenticate?: boolean;
      csp?: boolean;
      blockSuspiciousTraffic?: boolean;
      showPrettyErrors?: boolean;
      cbtDetection?: boolean;
      firstPartyDetection?: boolean;
      preventRenderByEtag?: boolean;
      outdatedBrowser?: boolean;
    },
    session?: {
      name?: string;
      cookie?: {
        maxAge?: number;
        secure?: boolean;
      };
      flash?: boolean;
      ttl?: number;
      max_retries?: number;
      retry_delay?: number;
      secret?: string |Â null;
    },
  }

  export class Ragnar {
    constructor(config: RagnarConfig);
  }
}
