/* eslint-disable security/detect-object-injection */
/* eslint-env browser */
const ReactDOM = require('react-dom');

function hasPerformanceApi() {
  return typeof performance !== 'undefined'
    && typeof performance.mark === 'function'
    && typeof performance.measure === 'function';
}

const getPerfillAgentObject = () => {
  const perfillAgentKey = '_perfill';
  window[perfillAgentKey] = window[perfillAgentKey] || function (...args) {
    (window[perfillAgentKey].q = window[perfillAgentKey].q || []).push(args);
  };

  return window[perfillAgentKey];
};

/**
 * `hydrate` is used to hydrate a container whose HTML contents were rendered by ReactDOMServer,
 * has the same API as https://reactjs.org/docs/react-dom.html#hydrate and uses it under the hood.
 * The only
 *
 * @param View ReactElement
 * @param container (String|DOMElement)
 * @param callback function
 */
function hydrate(View, container, callback) {
  const containerElement = container === 'string' ? document.querySelector(container) : container;

  if (!containerElement || !(containerElement instanceof Element)) {
    throw new Error('Container element is not found or not a DOM Element');
  }

  const hasPerfApi = hasPerformanceApi();

  if (hasPerfApi) {
    performance.mark('hydrateStart');
  }

  ReactDOM.hydrate(View, container, () => {
    if (hasPerfApi) {
      const perfillAgent = getPerfillAgentObject();

      performance.mark('hydrateComplete');
      performance.measure('nordic-hydration', 'hydrateStart', 'hydrateComplete');

      const hydrationMeasures = performance.getEntriesByName('nordic-hydration');
      if (hydrationMeasures.length) {
        perfillAgent('queue', 'page-render', [
          { metric: 'hydrate-complete', value: Math.round(hydrationMeasures[0].startTime) },
          { metric: 'hydrate-duration', value: Math.round(hydrationMeasures[0].duration) },
        ]);
      }
    }

    if (typeof callback === 'function') {
      callback();
    }
  });
}

// eslint-disable-next-line no-multi-assign
exports = module.exports = hydrate;
exports.hydrate = hydrate;
