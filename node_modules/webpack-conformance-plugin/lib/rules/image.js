/* eslint-disable class-methods-use-this */
const { SourceMapConsumer } = require('source-map');
const {
  CONFORMANCE_PREFIX,
  CONFORMANCE_RULE_FAILED,
  EARLY_EXIT_SUCCESS_RESULT,
  NORDIC_PRAGMA,
} = require('../constants');

const { getLocalFileName } = require('../utils');

function isNodeCreatingImgElement(node) {
  const { callee } = node;
  if (callee.type !== 'Identifier') {
    return false;
  }
  const componentNode = node.arguments[0];
  if (componentNode.type !== 'Literal') {
    return false;
  }

  return callee.name === NORDIC_PRAGMA && componentNode.value === 'img';
}

/**
 * messages: Dict  # Messages per file.
 *  [{
      "id": f'pylint-{message["message-id"]}',
      "line_from": message["line"],
      "line_to": message["line"],
      "column": message["column"],
      "message": message["message"],
      "provider": "pylint",
  }]
  * files: List  # Reported files.
    "path/to/filename"
  * total_findings: int
  * provider_version: str
  */
class WebpackConformanceRuleImage {
  getAstNode() {
    return [
      {
        visitor: 'visitCallExpression',
        inspectNode: (path, { request, sourceMap }) => {
          const { node } = path;
          if (!node.arguments || node.arguments.length < 2) {
            return EARLY_EXIT_SUCCESS_RESULT;
          }
          if (isNodeCreatingImgElement(node)) {
            const localFileName = getLocalFileName(request);

            let column = 0;
            let line = 0;
            if (sourceMap) {
              const smc = new SourceMapConsumer(sourceMap);
              const originalPosition = smc.originalPositionFor({
                line: node.loc.start.line,
                column: node.loc.start.column,
              });
              column = originalPosition.column;
              line = originalPosition.line;
            }

            const message = `img usage in ${localFileName}, this can potentially delay LCP metrics, replace with frontend-image`;
            return {
              result: CONFORMANCE_RULE_FAILED,
              warnings: [
                {
                  message: `${CONFORMANCE_PREFIX} image: ${message}`,
                  metadata: {
                    column,
                    file: localFileName,
                    line,
                    ruleId: 'webpack-conformance-rule-image',
                    message,
                  },
                },
              ],
            };
          }
          return EARLY_EXIT_SUCCESS_RESULT;
        },
      },
    ];
  }
}

module.exports = WebpackConformanceRuleImage;
