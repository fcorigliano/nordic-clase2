/* eslint-disable security/detect-non-literal-fs-filename,no-console */
const fs = require('fs');
const WebpackConformancePlugin = require('./webpack-conformance-plugin');

const DEFAULT_OPTIONS = {
  path: '/tmp',
  filename: 'webpack_quality_report.json',
};
class WebpackConformanceCQSPlugin {
  constructor(options = {}, fileSystem) {
    this.options = { ...DEFAULT_OPTIONS, ...options };
    this.fs = fileSystem || fs;
    this.conformanceHandler = this.conformanceHandler.bind(this);
  }

  /**
   *
   * @param {*} errors [{
   *    message: 'nordic-conformance-error: Minification is disabled for this build,
   *  disabling minification can result in serious performance degradation.',
   *    metadata: {
   *      message: 'Minification is disabled for this build,
   *  disabling minification can result in serious performance degradation.',
   *      file: '/webpack.config.js',
   *      line: 1,
   *      column: 0,
   *      ruleId: 'webpack-conformance-rule-minification'
   *    }
   * },
   * {
   *    message: 'nordic-conformance-error: img usage in /tests/fixtures/component.js,
   *  this can potentially delay LCP metrics, replace with frontend-image',
   *    metadata: {
   *      message: 'img usage in /tests/fixtures/component.js,
   *  this can potentially delay LCP metrics, replace with frontend-image',
   *      file: '/tests/fixtures/component.js',
   *      line: 15,
   *      column: 6
   *      ruleId: 'webpack-conformance-rule-image'
   *    }
   *  }]
   * @param {*} warnings
   */
  conformanceHandler(errors, warnings) {
    const filename = `${this.options.path}/${this.options.filename}`;
    const messages = JSON.stringify([].concat(errors, warnings));
    try {
      this.fs.writeFileSync(filename, messages);
    } catch (e) {
      // @TODO improve error reporting
      console.error(e);
    }
  }

  apply(compiler) {
    compiler.hooks.compilation.tap('WebpackConformanceCQSPlugin', (compilation) => {
      WebpackConformancePlugin.getCompilationHooks(compilation).conformance.tap('WebpackConformanceCQSPlugin', (errors, warnings) => {
        this.conformanceHandler(errors, warnings);
      });
    });
  }
}

module.exports = WebpackConformanceCQSPlugin;
