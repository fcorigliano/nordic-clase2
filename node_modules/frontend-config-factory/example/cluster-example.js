/* eslint-disable-next-line import/no-unresolved */
const express = require('express');
const cluster = require('cluster');
const env = require('frontend-env');
const clusterM = require('../src/services/cluster-messages');
const configs = require('./configs-creation');

/**
 * This example shows a host server app using cluster to fork workers
 * A forked worker it's listening to localhost:8000 route /:pid/:environment
 * If you pass a req.param.pid equal to a worker pid (logged to console when forked) it will:
 * 1.- Send the message "ASK_WORKER" to master with the pid and environment req params (or getting env from headers && cookies)
 * 2.- Master will response to all workers with the message "ASKING_WORKERS", sending same params
 * 3.- Workers will handle "ASKING_WORKERS" message comparing the sended pid with the pid of its process, and if is its pid
 *     it will log the result of getValue for uiNavigationVersion for that specific environment.
 *     (at first it will response the value of environment = production, but secondly, after master fetch the new environment,
 *     if you refresh that browser tab it will response the value of uiNavigationVersion inside that environment)
 *
 * Try with a environment with uiNavigationVersion different from current. Environment 1.1.3-changed.2 has uiNavigationVersion=5.18.7
 *
 * Also, you can try killing a worker by its pid (kill -9 pid on console) and ask for the new worker forked after that.
 *
 * If you start this example with the env.USING_CLUSTER!== "true" (npm run dev:no-cluster), no workers will be forked
 * and the single master process it will do the same, but responding by itself without sending messages.
 */

const app = express();
const port = 8000;
const clusterMessages = clusterM.startMessaging('EXAMPLE');
const start = () => {
  app.get('/:pid?/:environment?', (req, res) => {
    const { pid, environment } = req.params;
    const { headers, cookies = { meliLab: '213' } } = req;
    const messageBody = environment ? { pid, headers: {}, cookies: {}, environment } : { pid, headers, cookies };
    if (cluster.isWorker) {
      console.log(process.getMaxListeners(), 'max listeners on worker');

      // Worker sending "ASK_WORKER" message to master
      clusterMessages.send('ASK_WORKER', messageBody).toMaster();
    } else {
      const getParams = environment ? { environment, req: { headers, cookies } } : { req: { headers, cookies } };
      // Single process, ask itself for new environment
      const navVersion = configs['ml-navigation-config'].getValue({ key: 'uiNavigationVersion', platform: { id: 'ML' }, ...getParams });
      console.log(`master: check ui version environment ${environment || headers['x-ml-navigation-config-environment']} to ${navVersion}\n`);
    }
    res.send('Hello! look at the console');
  });
  app.listen(port, () => {
    console.log(`Example app listening on port ${port}`);
  });
};

const doCluster = () => {
  if (cluster.isMaster) {
    cluster.setMaxListeners(1 * process.env.MAX_LISTENERS || 10);

    for (let i = 0; i < 2; i += 1) {
      cluster.fork();
    }
    console.log(`master forked: ${cluster.workers[1].process.pid} ${cluster.workers[2].process.pid}`);
    cluster.on('online', (worker) => {
      console.log(`Worker ${worker.process.pid} is online`);
    });

    // Master handling "ASK_WORKER" message
    clusterMessages.handle('ASK_WORKER', (msg) => {
      console.log(cluster.listenerCount('online'), 'listeners on master for online ');
      console.log(cluster.getMaxListeners(), 'max listeners on master');

      clusterMessages.send('ASKING_WORKER', msg).toWorkers();
    }).fromWorker();

    cluster.on('exit', (worker) => {
      console.log(`Worker ${worker.process.pid} died`);
      console.log('Starting a new worker');
      cluster.fork();
    });
  } else {
    process.setMaxListeners(1 * process.env.MAX_LISTENERS || 10);
    // Worker handling "ASKING_WORKER" message
    clusterMessages.handle('ASKING_WORKER', ({ pid, ...rest }) => {
      console.log(cluster.worker.listenerCount('message'), 'listeners on worker for message ');
      if (process.pid.toString() === pid) {
        const getParams = {
          req: { headers: rest.headers, cookies: rest.cookies },
          environment: rest.environment || null,
        };
        const navVersion = configs['ml-navigation-config'].getValue({ key: 'uiNavigationVersion', platform: { id: 'ML' }, ...getParams });
        console.log(`EXAMPLE: worker ${process.pid} check ui version environment ${rest.environment || rest.headers['x-ml-navigation-config-environment']} to ${navVersion}\n`);
      }
    }).fromMaster();
    start();
  }
};

if (env.USING_CLUSTER) {
  doCluster();
} else {
  console.log('starting without cluster');
  start();
}
