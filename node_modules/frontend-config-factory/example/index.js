const mlNavigation = require('./ml-navigation');

const key = 'uiNavigationVersion';

const siteWithValue = {
  id: 'ML',
  siteId: 'MLC',
};

const siteWithoutValue = {
  id: 'ML',
  siteId: 'MLA',
};

const platformWithoutValue = {
  id: 'MP',
  siteId: 'MLA',
};

const executeGets = () => {
  console.log('platform without value - from request  v1.1.3-changed.2 - return global value', mlNavigation.getValue({
    key,
    req: {
      cookies: { meliLab: 'asd' },
      headers: { 'x-ml-navigation-config-environment': '1.1.3-changed.2' },
      platform: { id: 'ML', siteId: 'MLA' },
      res: {
        header: (a, b) => console.log('setting header', { [a]: b }),
        get: (a) => 'pi-navigation-config=1.2.3' || a,
      },
    },
  }));
  // GET
  console.log('get');
  console.log('---');
  console.log('no platform parameters - return global value', mlNavigation.get(key));

  console.log('platform id parameter - platform with value - return platform value', mlNavigation.get(key, siteWithoutValue.id));
  console.log('platform id parameter - platform without value - return global value', mlNavigation.get(key, platformWithoutValue.id));

  console.log('site id parameters - site with value - return site value', mlNavigation.get(key, siteWithValue.id, siteWithValue.siteId));
  console.log('site id parameters - site without value - return platform value', mlNavigation.get(key, siteWithoutValue.id, siteWithoutValue.siteId));
  console.log('site id parameters - platform without value - return global value', mlNavigation.get(key, platformWithoutValue.id, platformWithoutValue.siteId));

  // GET CONFIG
  console.log();
  console.log('getValue');
  console.log('---------');
  console.log('platform without value - from request - return global value', mlNavigation.getValue({
    key,
    req: {
      platform: platformWithoutValue,
    },
  }));

  console.log('platform without value - from platform - return global value', mlNavigation.getValue({
    key,
    platform: platformWithoutValue,
  }));

  console.log('site without value - from request - return platfrom value', mlNavigation.getValue({
    key,
    req: {
      platform: siteWithoutValue,
    },
  }));

  console.log('site without value - from platform - return platfrom value', mlNavigation.getValue({
    key,
    platform: siteWithoutValue,
  }));

  console.log('site with value - from platform - return site value', mlNavigation.getValue({
    key,
    platform: siteWithValue,
  }));

  console.log('site with value - from req - return site value', mlNavigation.getValue({
    key,
    req: {
      platform: siteWithValue,
    },
  }));

  console.log('\ntest updateConfig comparing value before and after the update\n');
  console.log('site with value - from req - return site value before update', mlNavigation.getValue({
    key,
    req: {
      platform: siteWithValue,
    },
  }));

  mlNavigation.update().then(() => {
    console.log('updated');
    console.log('site with value - from req - return site value after update', mlNavigation.getValue({
      key,
      req: {
        platform: siteWithValue,
      },
    }));
  });
};

executeGets();

mlNavigation.addUpdateHandler(() => setTimeout(executeGets, 5000));
