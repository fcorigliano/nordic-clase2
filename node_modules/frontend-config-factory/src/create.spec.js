const testParams = {
  data: {
    configurations: {
      uiNavigationVersion: '2.0.16',
    },
    platforms: {
      ML: {
        configurations: {
          uiNavigationVersion: '6.0.16',
        },
        sites: {
          MLC: {
            uiNavigationVersion: '7.0.16',
          },
        },
      },
    },
  },
  modulePackage: {
    name: 'ml-navigation-config',
    version: 'production',
  },
  restClientConfig: {
    timeout: 5000,
    eTagCache: true,
  },
  envVariables: {
    update: 'ML_NAVIGATION_CONFIG_UPDATE',
    loadEnvironmentAtStartUp: 'ML_NAVIGATION_CONFIG_ENVIRONMENTS',
  },
  update: {
    intervalInMs: 10 * 1000, // 5 minutes
    updateStaticFilesOnRelease: true,
    environmentHeader: 'TEST_VERSION',
  },
};

describe('create ==> unit testing', () => {
  beforeEach(() => {
    jest.resetModules();
  });

  test('getValue test', () => {
    const mockParams = { key: 'key', platform: 'platform', site: 'site', environment: 'environment' };
    jest.doMock('./get', () => jest.fn(() => ({ getValue: (param) => param })));
    const create = require('./create');
    const { getValue } = create(testParams);
    expect(getValue(mockParams)).toEqual(mockParams);
  });

  test('get test', () => {
    jest.doMock('./get', () => jest.fn(() => ({ getValue: (param) => param })));
    const create = require('./create');
    const { get } = create(testParams);
    expect(get('key')).toEqual({ key: 'key', platform: { id: undefined, siteId: undefined }, environment: undefined });
    expect(get('key', 'platform')).toEqual({ key: 'key', platform: { id: 'platform', siteId: undefined }, environment: undefined });
    expect(get('key', 'platform', 'site')).toEqual({ key: 'key', platform: { id: 'platform', siteId: 'site' }, environment: undefined });
    expect(get('key', 'platform', 'site', 'env')).toEqual({ key: 'key', platform: { id: 'platform', siteId: 'site' }, environment: 'env' });
  });

  test('getEnvironment test', () => {
    jest.doMock('./services/get-environment', () => jest.fn((params) => params));
    const create = require('./create');
    const { getEnvironment } = create(testParams);
    expect(getEnvironment({ test: true })).toEqual({ environmentHeader: 'TEST_VERSION', req: { test: true } });
  });
});
