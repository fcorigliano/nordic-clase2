const { production } = require('./constants/environment-variables');

const getHandlersMethods = () => {
  const updateHandlers = {};

  /**
   * Registers a handler that will be called each time the config is updated
   * @param {function} handler Handler to register
   * @param {string} environment It is optional
   */
  const addUpdateHandler = (handler, environment) => {
    if (!handler) {
      return;
    }
    const handlerEnvironment = environment || production;
    updateHandlers[handlerEnvironment] = updateHandlers[handlerEnvironment] || [];
    updateHandlers[handlerEnvironment].push(handler);
  };

  /**
   * Removes a previously registered handler
   * @param {function} handler Handler to remove
   * @param {string} environment It is optional
   */
  const removeUpdateHandler = (handler, environment) => {
    const handlerEnvironment = environment || production;
    // Return if handler or handler environment is missing
    if (!handler || !updateHandlers[handlerEnvironment]) {
      return;
    }
    updateHandlers[handlerEnvironment] = updateHandlers[handlerEnvironment].filter(updateHandler => updateHandler !== handler);
  };

  /**
   * Notify Handlers
   */
  const notifyHandlers = (environment) => {
    // Return if handler or handler environment is missing
    if (!environment || !updateHandlers[environment]) {
      return;
    }
    updateHandlers[environment].forEach(updateHandler => updateHandler());
  };

  return {
    addUpdateHandler,
    removeUpdateHandler,
    notifyHandlers,
  };
};

module.exports = {
  getHandlersMethods,
};
