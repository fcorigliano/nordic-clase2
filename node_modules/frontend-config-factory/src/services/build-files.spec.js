
const params = (update = true) => ({
  data: { data: true },
  modulePackage: { name: 'test-module', version: '1.0.0' },
  update: {
    updateStaticFilesOnRelease: update,
  },
});

const mockSync = jest.fn();
let mockExit;
let mockLogError;

describe('build service', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.mock('del', () => ({ sync: mockSync }));
    jest.mock('semver', () => ({ valid: jest.fn(), coerce: jest.fn() }));
    mockExit = jest.spyOn(process, 'exit').mockImplementation(() => { throw new Error('Mock'); });
    mockLogError = jest.spyOn(console, 'error').mockImplementation(() => { });
  });

  test('build ok', () => {
    const mockMkdir = jest.fn();
    const mockWriteFile = jest.fn();
    jest.doMock('fs', () => ({
      mkdirSync: mockMkdir,
      writeFileSync: mockWriteFile,
    }));
    expect(() => {
      const { generateBuildFilesFactory } = require('./build-files');
      generateBuildFilesFactory(params())();
    }).not.toThrow();
    expect(mockSync).toHaveBeenCalled();
    expect(mockMkdir).toHaveBeenCalled();
    expect(mockWriteFile).toHaveBeenCalled();
  });

  test('build ok - doesnt create file', () => {
    const mockMkdir = jest.fn();
    const mockWriteFile = jest.fn();
    jest.doMock('fs', () => ({
      mkdirSync: mockMkdir,
      writeFileSync: mockWriteFile,
    }));
    expect(() => {
      const { generateBuildFilesFactory } = require('./build-files');
      generateBuildFilesFactory(params(false))();
    }).not.toThrow();
    expect(mockSync).toHaveBeenCalled();
    expect(mockMkdir).not.toHaveBeenCalled();
    expect(mockWriteFile).not.toHaveBeenCalled();
  });

  test('build fails', () => {
    const mockMkdir = jest.fn(() => { throw new Error('error'); });
    const mockWriteFile = jest.fn();
    jest.doMock('fs', () => ({
      mkdirSync: mockMkdir,
      writeFileSync: mockWriteFile,
    }));
    expect(() => {
      const { generateBuildFilesFactory } = require('./build-files');
      generateBuildFilesFactory(params())();
    }).toThrow();
    expect(mockSync).toHaveBeenCalled();
    expect(mockMkdir).toHaveBeenCalled();
    expect(mockLogError).toHaveBeenCalledWith(expect.any(String));
    expect(mockExit).toHaveBeenCalledWith(1);
    expect(mockWriteFile).not.toHaveBeenCalled();
  });
});
