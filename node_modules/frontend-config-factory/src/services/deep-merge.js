/**
 * Deep-merges source parameters. If a source parameter is an array skips deep merge on it
 *
 * @param {Object} obj An object to set the value into
 * @param {...*} sources Sources to merge
 * @example
 * deepMerge({ w: 1 }, { x: { y: 2, z: 3 } }, { x: { z: 4 } })
 * // { w: 1, x: { y: 2, z: 4 } }
 */
const deepMerge = (...sources) => sources.reduce((result, source) => {
  // If the source is an array the result should be that array no matter previous sources result (no deep merge)
  if (Array.isArray(source)) {
    return source;
  }

  const sourceType = typeof source;

  // If the source is an object iterate over its keys and merge them with previous sources result keys
  if (sourceType === 'object' && source !== null) {
    // If previous sources result is a non-array-object just take it as the initial base object, otherwise discard it
    const initialObject = typeof result === 'object' && !Array.isArray(result)
      ? { ...result }
      : {};


    // Deep-merges source object with previous sources result
    return Object
      .keys(source)
      .reduce((temporalToReturn, sourceKey) => {
        temporalToReturn[sourceKey] = deepMerge(temporalToReturn[sourceKey], source[sourceKey]);
        return temporalToReturn;
      }, initialObject);
  }

  // If the source is not an array, a not-null-object or undefined (eg: string, number, null)
  if (sourceType !== 'undefined') {
    return source;
  }

  // source type is undefined, keep previous sources result
  return result;
}, undefined);

module.exports = deepMerge;
