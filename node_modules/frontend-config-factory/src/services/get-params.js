const deepMerge = require('./deep-merge');
const defaultRestClientConfig = require('../constants/rest-client-config');
const { UPDATE_INTERVAL } = require('../constants/intervals');
const { UPDATE_STATIC_FILES_ON_RELEASE } = require('../constants/release');
const {
  prefix: environmentHeaderPrefix,
  suffix: environmentHeaderSuffix,
} = require('../constants/environment-header');
const {
  updateSuffix,
  loadEnvironmentAtStartUpSuffix,
  developmentDataSuffix,
} = require('../constants/environment-variables');

const isEmptyValidate = (value, message) => {
  if (!value) {
    throw new Error(message);
  }
};

/**
 * Deep merge params replacing the defaults with the received ones, and
 * maintaining the defaults when no replace was received
 *
 * @param {object} params - Used to define returned params
 * @returns {object} - Fully covered params
 */
const getParams = (params) => {
  // Validate required params
  isEmptyValidate(params.data, 'Data is required');
  isEmptyValidate(params.modulePackage, 'modulePackage is required');
  isEmptyValidate(params.modulePackage.name, 'modulePackage does not contain the name property');
  isEmptyValidate(params.modulePackage.version, 'modulePackage does not contain the version property');

  // merge with defaults
  const appEnvVariable = params.modulePackage.name.toUpperCase().replace(/-/g, '_');
  const appLowercased = params.modulePackage.name.toLowerCase();

  const path = (params.update || {}).path || '';
  const sanitizedPath = path.endsWith('/')
    ? path.slice(0, -1)
    : path;

  return deepMerge({
    restClientConfig: defaultRestClientConfig,
    envVariables: {
      update: `${appEnvVariable}${updateSuffix}`,
      loadEnvironmentAtStartUp: `${appEnvVariable}${loadEnvironmentAtStartUpSuffix}`,
      loadDevelopmentDataAtStartUp: `${appEnvVariable}${developmentDataSuffix}`,
    },
    update: {
      updateStaticFilesOnRelease: UPDATE_STATIC_FILES_ON_RELEASE,
      environmentHeader: `${environmentHeaderPrefix}${appLowercased}${environmentHeaderSuffix}`,
      path: `frontend-config/factory/${appLowercased}`,
      intervalInMs: UPDATE_INTERVAL,
      request: {
        retry: {
          maxRetries: 1,
          delay: 500,
          // Do not try to do many retries
          // Better cancel the current request and make a new one after UPDATE_INTERVAL ms
          maxDelay: UPDATE_INTERVAL,
          factor: 2,
        },
      },
    },
  }, params, {
    ...(sanitizedPath
      ? {
        update: {
          path: sanitizedPath,
        },
      }
      : null
    ),
  });
};

module.exports = {
  getParams,
};
