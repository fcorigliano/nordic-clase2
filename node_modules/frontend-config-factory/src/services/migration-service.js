const feConfig = require('frontend-config/config/defaults');
const { sites } = require('frontend-config/config/platforms');
const { writeFileSync } = require('fs');
const deepMerge = require('./deep-merge');

const getValueFromConfig = (fullKey, config) => fullKey.split('.')
  .reduce((tempData, key) => tempData && tempData[key], config);

const getValueFromFeConfig = (key) => getValueFromConfig(key, feConfig);

const getValueForConfig = ({
  key,
  value,
  keys,
}) => {
  const actualKeys = keys || key.split('.');
  if (actualKeys.length === 0) {
    return value;
  }

  const currentKey = actualKeys[0];
  const nextKeys = actualKeys.slice(1);

  return {
    [currentKey]: getValueForConfig({
      value,
      keys: nextKeys,
    }),
  };
};

const getConfig = ({
  from,
  to,
  config,
}) => {
  const feConfigValue = getValueFromFeConfig(from);

  if (feConfigValue === undefined) {
    return config;
  }

  const newConfig = getValueForConfig({
    key: to,
    value: feConfigValue,
  });

  return deepMerge(config, newConfig);
};

const migrate = ({
  keys,
  platforms,
  configPath,
}) => {
  // eslint-disable-next-line
  const currentConfig = require(configPath);

  const newConfig = platforms.reduce((tempPlatform, platform) => {
    const platformConfigurationsKey = `platforms.${platform.id}.configurations`;
    // frontendConfigMigratedKeys global
    const migratedKeysKey = `${platformConfigurationsKey}.frontendConfigMigratedKeys`;

    const currentMigratedKeys = getValueFromConfig(migratedKeysKey, currentConfig) || [];

    const keysToMigrate = keys.filter(key => !currentMigratedKeys.includes(key));
    const migratedKeys = currentMigratedKeys.concat(keysToMigrate);

    const withMigratedKeys = deepMerge(tempPlatform, getValueForConfig({
      key: migratedKeysKey,
      value: migratedKeys,
    }));

    // Other globals
    const withPlatformGlobals = keysToMigrate.reduce((tempKeys, configurationKey) => {
      const marketplaceConfig = platform.id === 'ML' ? tempKeys : getConfig({
        config: tempKeys,
        from: `ML.${configurationKey}`,
        to: `${platformConfigurationsKey}.${configurationKey}`,
      });
      return getConfig({
        config: marketplaceConfig,
        from: `${platform.id}.${configurationKey}`,
        to: `${platformConfigurationsKey}.${configurationKey}`,
      });
    }, withMigratedKeys);

    const excludedSites = platform.excludedSites || [];
    const filteredSites = sites[platform.id].filter(siteId => !excludedSites.includes(siteId));
    // Sites
    return filteredSites.reduce((tempSite, siteId) => keysToMigrate.reduce((tempKeys, configurationKey) => getConfig({
      config: tempKeys,
      from: `${platform.id}.${siteId}.${configurationKey}`,
      to: `platforms.${platform.id}.sites.${siteId}.${configurationKey}`,
    }), tempSite), withPlatformGlobals);
  }, currentConfig);

  writeFileSync(configPath, JSON.stringify(newConfig, null, 2));
};

module.exports = {
  migrate,
};
