const defaultRestClientConfig = require('../constants/rest-client-config');
const { UPDATE_INTERVAL } = require('../constants/intervals');
const { UPDATE_STATIC_FILES_ON_RELEASE } = require('../constants/release');
const {
  prefix: environmentHeaderPrefix,
  suffix: environmentHeaderSuffix,
} = require('../constants/environment-header');
const {
  updateSuffix,
  loadEnvironmentAtStartUpSuffix,
  developmentDataSuffix,
} = require('../constants/environment-variables');


const defaultParameter = {
  data: {},
  modulePackage: {
    name: 'Some-Name',
    version: 'some-version',
  },
};

describe('get-params', () => {
  describe('Required fields', () => {
    const testFactory = (paramName, data) => {
      it(`should throw error if no ${paramName} is passed`, () => {
        const { getParams } = require('./get-params');
        expect(() => getParams(data)).toThrow();
      });
    };

    testFactory('data', {
      ...defaultParameter,
      data: null,
    });

    testFactory('modulePackage', {
      ...defaultParameter,
      modulePackage: null,
    });

    testFactory('modulePackage.name', {
      ...defaultParameter,
      modulePackage: {
        ...defaultParameter.modulePackage,
        name: null,
      },
    });

    testFactory('modulePackage.version', {
      ...defaultParameter,
      modulePackage: {
        ...defaultParameter.modulePackage,
        version: null,
      },
    });

    it('should not throw error if every parameter is passed', () => {
      const { getParams } = require('./get-params');
      expect(() => getParams(defaultParameter)).not.toThrow();
    });
  });

  describe('default values', () => {
    it('should return default restClientConfig', () => {
      const { getParams } = require('./get-params');

      expect(getParams(defaultParameter).restClientConfig).toEqual(defaultRestClientConfig);
    });

    it('should return default envVariables', () => {
      const { getParams } = require('./get-params');

      const appEnvVariable = 'SOME_NAME';
      expect(getParams(defaultParameter).envVariables).toEqual({
        update: `${appEnvVariable}${updateSuffix}`,
        loadEnvironmentAtStartUp: `${appEnvVariable}${loadEnvironmentAtStartUpSuffix}`,
        loadDevelopmentDataAtStartUp: `${appEnvVariable}${developmentDataSuffix}`,
      });
    });

    it('should return default update', () => {
      const { getParams } = require('./get-params');

      expect(getParams(defaultParameter).update).toEqual({
        updateStaticFilesOnRelease: UPDATE_STATIC_FILES_ON_RELEASE,
        environmentHeader: `${environmentHeaderPrefix}some-name${environmentHeaderSuffix}`,
        intervalInMs: 300000,
        path: 'frontend-config/factory/some-name',
        request: {
          retry: {
            delay: 500,
            factor: 2,
            maxDelay: UPDATE_INTERVAL,
            maxRetries: 1,
          },
        },
      });
    });
  });
});
