const semver = require('semver');
const path = require('path');
const fs = require('fs');
const del = require('del');
const env = require('frontend-env');

/**
 * Upload config file to object storage
 * @param {object} params - Parameters used to create a connection
 * @param {object} params.data - Config data which will be readed or updated
 * @param {object} params.modulePackage - Version of the config (platform specific)
 * @param {object} params.update - Update configuration
 * @param {boolean} params.update.updateStaticFilesOnRelease - Indicates if the static file should be updated
 * @returns ?
 */
const generateBuildFilesFactory = ({
  data,
  modulePackage,
  update,
}) => () => {
  try {
    const buildPath = env.STORAGE_FOLDER ? env.STORAGE_FOLDER : path.join(process.cwd(), 'build');
    // Remove a temp directory to ensure that older files are never will be uploaded
    del.sync(buildPath, {
      force: true,
    });
    // Check if the static file should be updated on release
    if (!update.updateStaticFilesOnRelease) {
      return;
    }

    // Create build folder
    fs.mkdirSync(buildPath, 0o755);
    // Create environment folder
    const isProduction = semver.valid(semver.coerce(modulePackage.version)) === modulePackage.version;
    const environmentFolder = path.join(buildPath, isProduction ? 'production' : modulePackage.version);
    fs.mkdirSync(environmentFolder, 0o755);

    // Write common config file
    fs.writeFileSync(path.join(environmentFolder, 'configuration.json'), JSON.stringify({
      version: modulePackage.version,
      ...data,
    }));
  } catch (error) {
    console.error(error.message);
    process.exit(1);
  }
};

module.exports = {
  generateBuildFilesFactory,
};
