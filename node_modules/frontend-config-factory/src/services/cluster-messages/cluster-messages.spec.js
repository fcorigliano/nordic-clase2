const { CLUSTER_MESSAGE } = require('../../constants/cluster-variables');

const mockCluster = (toReturn) => jest.doMock('cluster', () => toReturn);
const mockProcess = (toReturn) => jest.doMock('process', () => toReturn);

describe('cluster-message test', () => {
  beforeEach(() => jest.resetModules());
  test('send message from master to workers', () => {
    mockCluster({
      isMaster: true,
      isWorker: false,
      workers: { 1: { send: () => { } } },
      on: () => { },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.send('TEST_MESSAGE', {}).toWorkers();
  });
  test('send message from master to workers - FAIL (WITHOUT SUBJECT)', () => {
    mockCluster({
      isMaster: true,
      isWorker: false,
      workers: { 1: { send: () => { } } },
      on: () => { },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    expect(clusterMessages.send).toThrow();
  });
  test('send message from worker to master', () => {
    mockCluster({
      isMaster: false,
      isWorker: true,
      workers: { 1: { send: () => { } } },
      worker: { on: () => { } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.send('TEST_MESSAGE', {}).toMaster();
  });

  test('handle message from worker to master', () => {
    const worker = { on: (type, cb) => cb({ type: CLUSTER_MESSAGE }) };
    mockCluster({
      isMaster: true,
      isWorker: false,
      on: (type, cb) => cb(worker),
      workers: { 1: { send: () => { } } },
      worker: { on: () => { } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.handle('TEST_MESSAGE', {}).fromWorker();
    clusterMessages.handle('TEST_MESSAGE2', {}).fromWorker();
  });

  test('send message (both ways) - BUT NOT USING CLUSTER', () => {
    mockCluster({
      isMaster: false,
      isWorker: false,
      workers: { 1: { send: () => { } } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.send('TEST_MESSAGE', {}).toMaster();
    clusterMessages.send('TEST_MESSAGE', {}).toWorkers();
  });

  test('handle message from worker to master', () => {
    const worker = { on: (type, cb) => cb({ type: CLUSTER_MESSAGE }) };
    mockCluster({
      isMaster: true,
      isWorker: false,
      on: (type, cb) => cb(worker),
      worker,
      workers: { 1: { send: () => { } } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.handle('TEST_MESSAGE', () => { }).fromWorker();
  });

  test('handle message from master to worker', () => {
    const worker = { on: (type, cb) => cb({ type: CLUSTER_MESSAGE, subject: 'TEST_MESSAGE' }) };
    mockCluster({
      isMaster: false,
      isWorker: true,
      on: (type, cb) => cb(worker),
      worker,
      workers: { 1: { send: () => { } } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.handle('TEST_MESSAGE', () => { }).fromMaster();
    clusterMessages.handle('BAD_MESSAGE', () => { }).fromMaster();
  });
  test('handle messages (both ways) - BUT NOT USING CLUSTER', () => {
    const worker = { on: (type, cb) => cb({ type: CLUSTER_MESSAGE, subject: 'TEST_MESSAGE' }) };
    mockCluster({
      isMaster: false,
      isWorker: false,
      on: (type, cb) => cb(worker),
      worker,
      workers: { 1: { send: () => { } } },
    });
    const { startMessaging } = require('.');
    const clusterMessages = startMessaging('test');
    clusterMessages.handle('TEST_MESSAGE', () => { }).fromMaster();
    clusterMessages.handle('TEST_MESSAGE', () => { }).fromWorker();
  });

  test('hasWorkers', () => {
    mockCluster({
      isMaster: true,
      isWorker: false,
      workers: { 1: { send: () => { } } },
      on: () => { },
    });
    const { hasWorkers } = require('.');
    expect(hasWorkers()).toBe(true);
  });

  test('overThreshold - master', () => {
    mockCluster({
      isMaster: true,
      isWorker: false,
      workers: { 1: { send: () => { } } },
      on: () => { },
      listenerCount: () => 1,
      getMaxListeners: () => 2,

    });
    const { overThreshold } = require('.');
    expect(overThreshold()).toBe(false);
  });

  test('overThreshold - worker', () => {
    mockCluster({
      isMaster: false,
      isWorker: true,
      workers: { 1: { send: () => { } } },
      worker: { on: () => { } },
      listenerCount: () => 1,
      getMaxListeners: () => 2,
    });
    mockProcess({
      listenerCount: () => 1,
      getMaxListeners: () => 2,
    });
    const { overThreshold } = require('.');
    expect(overThreshold()).toBe(false);
  });
});
