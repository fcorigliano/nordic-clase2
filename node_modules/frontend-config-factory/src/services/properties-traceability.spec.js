const { SEPARATOR, TRACEABILITY } = require('../constants/properties-traceability');
const { A_DAY } = require('../constants/intervals');

describe('properties-traceability test', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  test('sendUsedKeys with collected data', () => {
    const sendUsedKeys = require('./properties-traceability');
    const info = jest.fn();
    const logger = { info };
    const keysSet = new Set([
      `ML${SEPARATOR}MLA${SEPARATOR}url`,
      `CBT${SEPARATOR}${SEPARATOR}url`,
      `ML${SEPARATOR}${SEPARATOR}uiNavigationVersion`,
      `ML${SEPARATOR}MLA${SEPARATOR}url2`,
      `CBT${SEPARATOR}${SEPARATOR}url2`,
      `${SEPARATOR}${SEPARATOR}siteSpecificCSS`,
    ]);
    sendUsedKeys({ keysSet, logger });
    return Promise.resolve().then(() => {
      jest.advanceTimersByTime(A_DAY);
      expect(keysSet.size).toBe(0);
      expect(info).toHaveBeenCalledTimes(6);
      expect(info).toHaveBeenNthCalledWith(1, { statName: TRACEABILITY, extraTags: { configKey: 'url', platformId: 'ML', siteId: 'MLA' } });
      expect(info).toHaveBeenNthCalledWith(2, { statName: TRACEABILITY, extraTags: { configKey: 'url', platformId: 'CBT', siteId: null } });
      expect(info).toHaveBeenNthCalledWith(3, { statName: TRACEABILITY, extraTags: { configKey: 'uiNavigationVersion', platformId: 'ML', siteId: null } });
      expect(info).toHaveBeenNthCalledWith(4, { statName: TRACEABILITY, extraTags: { configKey: 'url2', platformId: 'ML', siteId: 'MLA' } });
      expect(info).toHaveBeenNthCalledWith(5, { statName: TRACEABILITY, extraTags: { configKey: 'url2', platformId: 'CBT', siteId: null } });
      expect(info).toHaveBeenNthCalledWith(6, { statName: TRACEABILITY, extraTags: { configKey: 'siteSpecificCSS', platformId: null, siteId: null } });
    });
  });
});
