jest.useFakeTimers();
jest.mock('./services/properties-traceability', () => jest.fn());

const modulePackage = {
  name: 'ML_NAVIGATION',
  version: '1.0.0',
};
const envVariables = {
  loadEnvironmentAtStartUp: 'ML_NAVIGATION_CONFIG_ENVIRONMENTS',
  loadDevelopmentDataAtStartUp: 'ML_NAVIGATION_CONFIG_DEVELOPMENT_DATA',
};
const logger = {
  error: () => { },
  info: () => { },
};
const update = {};

const defaultEnv = {
  ML_NAVIGATION_CONFIG_UPDATE: 'true',
};

const notifyHandlers = () => { };
const mockEnv = (toReturn = defaultEnv) => jest.doMock('frontend-env', () => toReturn);
const mockMessageHandlers = (toReturn) => jest.doMock('./services/cluster-messages/message-handlers', () => toReturn);

describe('Get test', () => {
  beforeEach(() => jest.resetModules());

  test('get data within configurations object', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({ key: 'test' })).toBeTruthy();
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
      },
    })).toBeTruthy();
  });

  test('get data within configurations object + add response header', () => {
    const getFactory = require('./get');
    const { RES_CONFIG_HEADER } = require('./constants/environment-header');
    const headerMock = jest.fn(() => null);
    const getMock = jest.fn(() => 'pi-navigation-config=1.2.3');
    const { getValue: get } = getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    const paramsTesting = {
      key: 'test',
      req: {
        cookies: { meliLab: 'asd' },
        headers: { 'x-ml-navigation-config-environment': '1.1.3-changed.2' },
        platform: { id: 'ML', siteId: 'MLA' },
        res: {
          header: headerMock, // (a, b) => console.log('setting header', { [a]: b }),
          get: getMock, // (a) => getMock'pi-navigation-config=1.2.3' || a,
        },
      },
    };
    const paramsTestingNoRes = {
      key: 'test',
      req: {
        cookies: { meliLab: 'asd' },
        headers: { 'x-ml-navigation-config-environment': '1.1.3-changed.2' },
        platform: { id: 'ML', siteId: 'MLA' },
      },
    };
    const paramsProduction = {
      key: 'test',
      req: {
        platform: { id: 'ML', siteId: 'MLA' },
        res: {
          header: headerMock, // (a, b) => console.log('setting header', { [a]: b }),
          get: getMock, // (a) => getMock'pi-navigation-config=1.2.3' || a,
        },
      },
    };
    expect(get(paramsProduction)).toBeTruthy();
    expect(headerMock).not.toHaveBeenCalled();
    expect(getMock).not.toHaveBeenCalled();
    expect(get(paramsTestingNoRes)).toBeTruthy();
    expect(headerMock).not.toHaveBeenCalled();
    expect(getMock).not.toHaveBeenCalled();
    expect(get(paramsTesting)).toBeTruthy();
    expect(headerMock).toHaveBeenCalledWith(RES_CONFIG_HEADER, expect.any(String));
    expect(getMock).toHaveBeenCalledWith(RES_CONFIG_HEADER);
  });

  test('get data within configurations object with platform null', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      platform: null,
    })).toBeTruthy();
    expect(get({
      key: 'test',
      platform: { id: null, siteId: null },
    })).toBeTruthy();
  });

  test('get data from platform config', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        platforms: {
          ML: {
            configurations: {
              test: true,
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
      },
    })).toBeTruthy();
  });

  test('get data from platform config when no site found', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        platforms: {
          ML: {
            configurations: {
              test: true,
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
        siteId: 'MLC',
      },
    })).toBeTruthy();
  });

  test('get data site specific', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        platforms: {
          ML: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
        siteId: 'MLC',
      },
    })).toBeTruthy();
  });

  test('try to get site specific but no platform found', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: { test: true },
        platforms: {
          MLASD: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
        siteId: 'MLC',
      },
    })).toBeTruthy();
  });

  test('getFile success', () => {
    const mockFetch = jest.fn();
    const handler = (data, props) => ({
      getFile: () => {
        mockFetch();
        props.onFetched({ environment: 'production', autoUpdate: true }, { data: {} });
      },
      updateConfig: () => { },
    });
    mockMessageHandlers(handler);
    const data = {
      configurations: {
        test: true,
      },
    };
    mockEnv();
    const getFactory = require('./get');
    const factoryParam = {
      data,
      modulePackage,
      envVariables: {
        update: 'ML_NAVIGATION_CONFIG_UPDATE',
      },
      update: { intervalInMs: 5 * 60 * 1000 },
      logger,
      notifyHandlers,
    };
    getFactory(factoryParam);
    jest.advanceTimersByTime(5 * 60 * 1000);
    expect(mockFetch).toHaveBeenCalledTimes(2); // first one and the first setTimeout one
  });

  test('getFile fail', () => {
    const handler = (data, props) => ({
      getFile: () => { props.onFetchError({ environment: 'production' }, { data: {} }); },
      updateConfig: () => { },
    });
    mockMessageHandlers(handler);
    const data = {
      configurations: {
        test: true,
      },
    };
    mockEnv();
    const getFactory = require('./get');
    const factoryParam = {
      data,
      modulePackage,
      envVariables: {
        update: 'ML_NAVIGATION_CONFIG_UPDATE',
      },
      update: { intervalInMs: 5 * 60 * 1000 },
      logger,
      notifyHandlers,
    };
    getFactory(factoryParam);
    jest.runAllTimers();
  });

  test('fetch remote data on test version', () => {
    const handler = (data, props) => ({
      getFile: ({ environment: env }) => { props.onFetched({ environment: env, autoUpdate: true }, { data: {} }); },
      updateConfig: () => { },
    });
    mockMessageHandlers(handler);
    const data = {
      configurations: {
        test: true,
      },
    };
    mockEnv();
    const getFactory = require('./get');
    const factoryParam = {
      data,
      modulePackage,
      envVariables: {
        update: 'ML_NAVIGATION_CONFIG_UPDATE',
      },
      update: { intervalInMs: 5 * 60 * 1000 },
      logger,
      notifyHandlers,
    };
    const { getValue: get } = getFactory(factoryParam);
    get({ key: 'test', environment: '0.0.2-beta.0', req: {} });
  });

  test('getProperty with platform param null', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: { test: false },
        platforms: {
          ML: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
      platform: null,
    })).toBeFalsy();
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
    })).toBeTruthy();
  });

  test('getProperty with platform param = {id: null, siteId:"MLC"}', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: { test: false },
        platforms: {
          ML: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
      platform: { id: null, siteId: 'MLC' },
    })).toBeFalsy();
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
    })).toBeTruthy();
  });

  test('getProperty with platform param = {id: null, siteId:null}', () => {
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: { test: false },
        platforms: {
          ML: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
      platform: { id: null, siteId: null },
    })).toBeFalsy();
    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
    })).toBeTruthy();
  });

  test('getProperty from platform config when req has platform and site', () => {
    mockEnv();
    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: { test: false },
        platforms: {
          ML: {
            configurations: { test: 'platform' },
            sites: {
              MLC: {
                test: 'site',
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });

    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
      platform: { id: 'ML', siteId: null },
    })).toBe('platform');

    expect(get({
      key: 'test',
      req: { platform: { id: 'ML', siteId: 'MLC' } },
      platform: { id: 'ML' },
    })).toBe('site');
  });

  test('should set development data', () => {
    mockEnv({
      FURY: false,
    });

    const getFactory = require('./get');
    const {
      getValue: get,
      setOnDevelopment,
    } = getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });

    expect(get({ key: 'test' })).toBeTruthy();

    setOnDevelopment({
      configurations: {
        test: false,
      },
    });
    expect(get({ key: 'test' })).toBeFalsy();
  });

  test('should throw if setting development data on a fury environment', () => {
    mockEnv({
      FURY: true,
    });

    const getFactory = require('./get');
    const { setOnDevelopment } = getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });

    expect(() => {
      setOnDevelopment({
        configurations: {
          test: false,
        },
      });
    }).toThrow();
  });

  test('get data from development file', () => {
    const filePath = '/some-file-path';
    mockEnv({
      FURY: false,
      [envVariables.loadDevelopmentDataAtStartUp]: filePath,
    });

    jest.doMock(filePath, () => ({
      configurations: {
        test: 'global-changed',
      },
      platforms: {
        ML: {
          configurations: {
            test2: 'platform-changed',
          },
          sites: {
            MLA: {
              test3: 'site-changed',
            },
          },
        },
      },
    }), { virtual: true });

    const getFactory = require('./get');
    const { getValue: get } = getFactory({
      data: {
        configurations: {
          test: 'global',
        },
        platforms: {
          ML: {
            configurations: {
              test: 'platform',
              test2: 'platform',
            },
            sites: {
              MLA: {
                test: 'site',
                test3: 'site',
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
    });

    expect(get({ key: 'test' })).toBe('global-changed');

    expect(get({
      key: 'test2',
      platform: {
        id: 'ML',
      },
    })).toBe('platform-changed');

    expect(get({
      key: 'test3',
      platform: {
        id: 'ML',
        siteId: 'MLA',
      },
    })).toBe('site-changed');

    // should not override platorms
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
      },
    })).toBe('platform');

    // should not override sites
    expect(get({
      key: 'test',
      platform: {
        id: 'ML',
        siteId: 'MLA',
      },
    })).toBe('site');

    expect(get({
      key: 'test2',
      platform: {
        id: 'ML',
        siteId: 'MLA',
      },
    })).toBe('platform');
  });

  test('run sendUsedKeys', () => {
    const mockTraceability = jest.fn();
    jest.doMock('./services/properties-traceability', () => mockTraceability);
    mockEnv({
      PRODUCTION: true,
      IS_CI: false,
      FURY: true,
    });
    const getFactory = require('./get');
    getFactory({
      data: {
        configurations: {
          test: true,
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
      notifyHandlers: () => { },
    });
    expect(mockTraceability).toHaveBeenCalled();
  });

  test('force update', () => {
    const mockUpdateConfig = jest.fn();
    jest.doMock('./services/cluster-messages/message-handlers', () => () => ({ updateConfig: mockUpdateConfig, getFile: () => { } }));
    const getFactory = require('./get');
    const { updateConfig } = getFactory({
      data: {
        configurations: { test: false },
        platforms: {
          ML: {
            sites: {
              MLC: {
                test: true,
              },
            },
          },
        },
      },
      modulePackage,
      envVariables,
      update,
      logger,
      notifyHandlers: () => { },
    });
    updateConfig();
    expect(mockUpdateConfig).toHaveBeenCalled();
  });
});
