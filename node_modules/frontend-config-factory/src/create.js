const getFactory = require('./get');
const getEnvironmentService = require('./services/get-environment');
const { generateBuildFilesFactory } = require('./services/build-files');
const logger = require('./logger');
const { getParams } = require('./services/get-params');
const { getHandlersMethods } = require('./update-handlers');

/**
 * create connection to config storage and returns methods to get them
 * and to upload them
 *
 * @param {object} params - Parameters used to create a connection
 * @param {object} params.data - Config data which will be readed or updated
 * @param {object} params.modulePackage - Namespace and version of the config (platform specific)
 * @param {object} params.restClientConfig - Params used in rest request to get remote config
 * @param {object} params.envVariables - Env parameters
 * @param {string} params.envVariables.update - Env to set if config must be updated by remote config file
 * @param {string} params.envVariables.loadEnvironmentAtStartUp - Env to load remote config at startup (not ready)
 * @param {object} params.update - Params for update with remote config file
 * @param {number} params.update.intervalInMs - Time between each fetch
 * @param {string} params.update.environmentHeader - env variable to search for a specific config version on headers
 * @param {boolean} params.update.updateStaticFilesOnRelease - If true, create a new config file when release
 * @return {object} response (get, setOnDevelopment, generateBuildFiles)
 */
const create = (params) => {
  const {
    addUpdateHandler,
    removeUpdateHandler,
    notifyHandlers,
  } = getHandlersMethods();

  const paramsWithDefaults = {
    ...getParams(params),
    logger: logger(params.modulePackage),
    notifyHandlers,
  };
  const {
    updateConfig,
    getValue,
    setOnDevelopment,
  } = getFactory(paramsWithDefaults);

  // Retrocompatibility for frontend-config's get implementation
  const getRetrocompatibility = (key, platform, site, environment) => getValue({
    key,
    platform: { id: platform, siteId: site },
    environment,
  });

  const getEnvironment = (req) => getEnvironmentService({
    req,
    environmentHeader: paramsWithDefaults.update.environmentHeader,
  });

  // Upload new config file
  const generateBuildFiles = generateBuildFilesFactory(paramsWithDefaults);
  return {
    getValue,
    update: updateConfig,
    getEnvironment,
    get: getRetrocompatibility,
    generateBuildFiles,
    addUpdateHandler,
    removeUpdateHandler,
    setOnDevelopment,
  };
};

module.exports = create;
