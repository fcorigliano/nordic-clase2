/**
 * @jest-environment jsdom
 */

const { appendImage, defaults, triggerLoadEvent } = require('./utils');

describe('OnLoad images && window.onload && document.readyState === complete', () => {
  afterEach(() => {
    const images = document.getElementsByTagName('IMG');

    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      image.remove();
    }
  });

  beforeAll(() => {
    Object.defineProperty(document, 'readyState', {
      get() { return 'loading'; },
    });

    require('../src');
  });

  test('single image should change data-src and delete class since there is only one', () => {
    const url = 'http:/url/to/image';

    appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' });

    triggerLoadEvent();

    const images = document.getElementsByTagName('IMG');

    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      const urlInImage = image.getAttribute(defaults.src);
      const dataSrc = image.getAttribute(defaults.dataSrc);

      expect(urlInImage).toBe(url);
      expect(dataSrc).toBe(null);
      expect(image.classList).toHaveLength(0);
    }
  });

  test('single image should change data-src and delete only the onloadLoadable class since there are more classes', () => {
    const url = 'http:/url/to/image';
    const additionalClass = 'another-class';

    appendImage({
      classes: [defaults.onloadClassName, additionalClass],
      dataSrc: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' });

    triggerLoadEvent();

    const images = document.getElementsByTagName('IMG');

    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      const urlInImage = image.getAttribute(defaults.src);
      const dataSrc = image.getAttribute(defaults.dataSrc);

      expect(urlInImage).toBe(url);
      expect(dataSrc).toBe(null);
      expect(image.classList).toHaveLength(1);
      expect(image.classList.item(0)).toBe(additionalClass);
    }
  });

  test('single image should change data-srcset and delete class since there is only one', () => {
    const url = 'http:/url/to/image';

    appendImage({
      classes: [defaults.onloadClassName],
      dataSrcSet: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' });

    triggerLoadEvent();

    const images = document.getElementsByTagName('IMG');

    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      const urlInImage = image.getAttribute(defaults.srcSet);
      const dataSrcSet = image.getAttribute(defaults.dataSrcSet);

      expect(urlInImage).toBe(url);
      expect(dataSrcSet).toBe(null);
      expect(image.classList).toHaveLength(0);
    }
  });

  test('multiple images should change data-src and delete class since there is only one', () => {
    const url = 'http:/url/to/image';

    appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' });

    triggerLoadEvent();

    const images = document.getElementsByTagName('IMG');

    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      const urlInImage = image.getAttribute(defaults.src);
      const dataSrc = image.getAttribute(defaults.dataSrc);

      expect(urlInImage).toBe(url);
      expect(dataSrc).toBe(null);
      expect(image.classList).toHaveLength(0);
    }
  });

  test('lazy and onload image should change data-src and delete class only for the provided node', () => {
    const url = 'http:/url/to/image';

    const imageWithoutOnload = appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    const imageLoad = appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' }, imageWithoutOnload);

    triggerLoadEvent();

    expect(imageWithoutOnload.classList).not.toContain(defaults.onloadClassName);
    expect(imageLoad.classList).toContain(defaults.onloadClassName);
  });
  test('lazy and onload image should change data-src and delete class only in case of node is undefined or null', () => {
    const url = 'http:/url/to/image';

    const imageWithoutOnload = appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    const imageLoad = appendImage({
      classes: [defaults.onloadClassName],
      dataSrc: url,
    });

    window.imageLazyLoading(defaults.onloadClassName, { loadMode: 'onload' });

    triggerLoadEvent();

    expect(imageWithoutOnload.classList).not.toContain(defaults.onloadClassName);
    expect(imageLoad.classList.length).toEqual(0);
  });
});

