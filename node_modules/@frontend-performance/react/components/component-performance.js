/* eslint-disable no-plusplus */
/* eslint-disable no-unused-expressions */
const React = require('react');
const log = require('frontend-logger')('react-performance');
const { renderToString } = require('react-dom/server');
const { render } = require('react-dom');
const { v4: uuidv4 } = require('uuid');
const { isNode } = require('../utils');


class ComponentPerformance extends React.Component {
  constructor(props) {
    if (props.children.length) {
      throw new Error('ComponentPerformance accepts only a single child component');
    }
    super(props);
    this.ssrIterations = props.ssr || 100;
    this.csrIterations = props.csr || 100;
    this.containerId = props.containerId || uuidv4();
    this.componentName = props.name || props.children.type.name;
  }

  componentDidMount() {
    if (
      this.csrIterations
      && !isNode()
    ) {
      const { children } = this.props;

      this.csr(children, {
        iterations: this.csrIterations,
      });
    }
  }

  ssr(children, opts) {
    const overalStartTime = Date.now();
    for (let i = 0; i < opts.iterations; i += 1) {
      renderToString(children);
    }
    const overalEndTime = Date.now();
    log.info(`SSR: It took ${overalEndTime - overalStartTime}ms to render ${opts.iterations} instances of the ${this.componentName} component`);
  }

  csr(children, opts) {
    const container = document.getElementById(this.containerId);
    if (!container) {
      console.error(`Target container #${this.containerId} is not a DOM element`);
      return;
    }

    const times = [];
    const overalStartTime = performance.now();
    for (let i = 0; i < opts.iterations; i += 1) {
      const individualStartTime = performance.now();
      render(React.cloneElement(children), container);
      const individualEndTime = performance.now();
      times.push(Math.round(individualEndTime - individualStartTime));
    }
    const overalEndTime = performance.now();

    container.parentElement.removeChild(container);

    console.info(`CSR: It took ${Math.round(overalEndTime - overalStartTime)}ms to render ${opts.iterations} instances of the ${this.componentName} component`);
    const timesTable = times.reduce((acc, time) => {
      const key = `${time}ms`;
      // eslint-disable-next-line security/detect-object-injection
      acc.ocurrences[key] ? acc.ocurrences[key]++ : acc.ocurrences[key] = 1;
      return acc;
    }, {
      ocurrences: {},
    });
    console.info(timesTable);
  }

  render() {
    const { children } = this.props;

    if (this.ssrIterations && isNode()) {
      this.ssr(children, {
        iterations: this.ssrIterations,
      });
    }

    return (
      <>
        { children }
        {
        this.csrIterations
          && !isNode()
          && !document.getElementById(this.containerId)
          && <div
            id={this.containerId}
            style={{ display: 'none' }}
            className="component-performance"
          />
      }
      </>
    );
  }
}

module.exports = ComponentPerformance;
