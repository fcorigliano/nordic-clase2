const doesNodeHaveLiteralType = (node) => {
  const hasLiteralType = typeof node.value !== 'string';
  // If the JSX has nodes, we run the validation for the expression contained
  if (node.type === 'JSXExpressionContainer' && node.expression) {
    return doesNodeHaveLiteralType(node.expression);
  }

  return hasLiteralType;
};

const checkIfStringsGoThroughI18n = (node) => {
  // If it has no children inside the node, it means that there
  // is definitely no hardcoded string, so we return that the node is safe
  if (node.children.length === 0) {
    return true;
  }

  // We then check if there is one child that has a literal. If there is, we should show the eslint error
  return node.children.some(doesNodeHaveLiteralType);
};

module.exports = {
  meta: {
    type: 'error',
    docs: {
      description: 'This rules checks that whenever a string is used in a jsx element, it is passed via i18n.gettext',
      category: 'Best Practices',
      recommended: true,
    },
    fixable: 'code',
    schema: [
      // TODO: figure out what options can be passed to this rule. Maybe allow string in certain scenarios?
    ],
    messages: {
      YOU_SHOULD_ALWAYS_USE_I18N_GETTEXT:
        'Missing i18n.gettext call around literal string. You can find out more about this feature in the documentation for i18n: https://github.com/mercadolibre/frontend-i18n#injecti18n',
    },
  },

  create(context) {
    return {
      JSXElement(node) {
        const isValid = checkIfStringsGoThroughI18n(node);

        if (isValid) {
          return;
        }
        context.report({
          node,
          messageId: 'YOU_SHOULD_ALWAYS_USE_I18N_GETTEXT',
        });
      },
    };
  },
};
