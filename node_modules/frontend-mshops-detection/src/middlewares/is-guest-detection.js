const jose = require('jose');

const env = require('frontend-env');
const statsd = require('frontend-statsd');
const logger = require('frontend-logger')('src/midddlewares/is-guest-detection');
const nr = require('newrelic');

const config = require('../config');
const isFromShops = require('../utils/is-from-shops');
const isBotRequest = require('../utils/is-bot-request');

const serializeError = (err, cause) => `${err.stack ? err.stack : err}\n\
  ${cause ? `caused by: ${serializeError(cause)}` : ''}`;

const buildErrorData = (req, callback, jwtExp, jwtSecretSize) => ({
  callback,
  jwtExp,
  jwtSecretSize,
  host: req.hostname,
  url: req.url,
  referer: req.headers?.referer,
  deviceType: req.device?.type,
});

const statNameMLRedirection = 'redirects.ml.checkSession';
const statNameShopGuestDetection = 'redirects.mshops.guestDetection';

const cookieOptions = (domain, expMin, httpOnly) => ({
  domain,
  expires: new Date(Date.now() + 60000 * expMin),
  httpOnly,
  secure: true,
});

const getDomain = req => {
  let domain = req.hostname;
  const wwwMatch = /^www(\..+)/.exec(domain);
  if (wwwMatch && wwwMatch.length === 2) {
    [, domain] = wwwMatch;
  }
  return domain;
};

const doesPathMatch = req => (
  config.features.guestDetection.paths
    .map(pattern => pattern.test(req.path))
    .filter(Boolean)
    .length > 0
);

const isBot = req => isBotRequest(req.get('User-Agent') || '');

const isDefaultHttpMethod = req => ['HEAD', 'OPTIONS'].includes(req.method);

const getJWTSecret = () => config.features.guestDetection.jwtSecret;

const isDeviceAllowed = (req) => config.features.guestDetection.deviceTypes.includes(req.device?.type);

const shouldRedirect = req => isFromShops(req)
  && isDeviceAllowed(req)
  && !isDefaultHttpMethod(req)
  && !isBot(req)
  && doesPathMatch(req)
  && getJWTSecret()
  && !req.cookies[config.COOKIES.IS_GUEST.name];

const writeJWT = (req, payload, exp, secret) => {
  const secretKey = new TextEncoder().encode(secret);
  return new jose.SignJWT(payload)
    // HMAC algorithm is used because its efficiency at computation time and its low token size
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setIssuer(`${env.SCOPE}:${env.APPLICATION}:${req.platform?.domain}`)
    .setAudience(req.platform?.siteId)
    .setExpirationTime(exp)
    .sign(secretKey);
};

function isGuestDetection(req, res, next) {
  const domain = config.ML_SITES[req.platform?.siteId]?.domain;
  if (shouldRedirect(req) && domain) {
    const host = env.DEVELOPMENT ? req.headers.host : req.platform.domain;
    const callback = `${req.protocol}://${host}${req.url}`;
    const { jwtTTL } = config.features.guestDetection;

    return writeJWT(req, { callback }, jwtTTL, getJWTSecret())
      .then(jwt => {
        statsd.increment(statNameMLRedirection, {
          shop: host,
          device_type: req.device?.type,
          callback_path: req.url,
          site_id: req.platform?.siteId,
        });
        return res.redirect(config.ENDPOINT.GUEST_DETECTION(domain, jwt));
      }).catch(err => {
        const errData = buildErrorData(req, callback, jwtTTL, getJWTSecret().length);
        logger.error(serializeError(err), errData);
        nr.noticeError(err, errData);
        return next();
      });
  }
  return next();
}

function catchSessionCookies(req, res, next) {
  if (!isFromShops(req)) {
    return next();
  }
  const now = Date.now();

  const isGuestQuery = req.query[config.features.guestDetection.queries.isGuest];
  const cpQuery = req.query[config.features.guestDetection.queries.cp];
  const timestamp = req.query[config.features.guestDetection.queries.timestamp] || now + 1;

  if ((isGuestQuery || cpQuery) && timestamp > now) {
    if (isGuestQuery) {
      req.cookies[config.COOKIES.IS_GUEST.name] = isGuestQuery;
      res.cookie(
        config.COOKIES.IS_GUEST.name,
        isGuestQuery,
        cookieOptions(getDomain(req), config.COOKIES.IS_GUEST.expMin, false),
      );
    }
    if (cpQuery) {
      req.cookies[config.COOKIES.CP.name] = cpQuery;
      res.cookie(
        config.COOKIES.CP.name,
        cpQuery,
        cookieOptions(`.${req.hostname}`, config.COOKIES.CP.expMin, true),
      );
    }
    statsd.increment(statNameShopGuestDetection, {
      shop: req.platform?.domain,
      device_type: req.device?.type,
      site_id: req.platform?.siteId,
      is_guest: isGuestQuery,
      is_cp: Boolean(cpQuery),
      is_bot: isBot(req),
    });
  }
  return next();
}

module.exports = {
  catchSessionCookies,
  isGuestDetection,
};
