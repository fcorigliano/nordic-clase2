/**
 * Modules dependencies
 */
const logger = require('frontend-logger')('frontend-mshops-detection/services');
const Timer = require('@mshops-web-core/timer').default;

const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');

const { ALLOWED_HEADERS_TO_BYPASS, CLIENT, ENDPOINT } = require('../../config');

/**
 * Service interface
 */
class FrontendWrapperService {
  static getByDomain({ url, section, device, editable, preview, userLogged, headers = {}, guestCartId, req }) {
    const tm = new Timer();

    return new Promise((resolve) => {
      restClient(CLIENT.FRONTEND_WRAPPER)
        .get(ENDPOINT.FRONTEND_WRAPPER, {
          params: {
            url,
            section,
            device,
            editable,
            preview,
            user_logged: userLogged,
            guest_cart_id: guestCartId,
            detection: true,
          },
          headers,
          context: req ? buildRestClientContext(req) : buildFlowStarterContext(),
        })
        .then(response => resolve(response.data))
        .catch((err) => {
          logger.error(err, {
            service: 'mshops-frontend-wrapper',
            responseTime: `${tm.elapsedMilliseconds()}ms`,
          });

          resolve(null);
        });
    });
  }

  /**
   * Retrieves the headers object from a request based on a certain group of headers.
   * @param {object} request The express request.
   */
  static getAllowedHeadersToBypass(req) {
    const result = {};
    ALLOWED_HEADERS_TO_BYPASS.forEach((key) => {
      const header = req.get(key);
      if (header) {
        // eslint-disable-next-line security/detect-object-injection
        result[key] = header;
      }
    });
    return result;
  }
}

/**
 * Expose Service
 */
module.exports = FrontendWrapperService;
