const httpMocks = require('node-mocks-http');
const nock = require('nock');

const FrontendWrapperService = require('../../../../src/services/frontend-wrapper');

const { ENDPOINT } = require('../../../../src/config');
const { UUID_V4_PATTERN } = require('../../mocks/utils');

describe('Service > frontend-wrapper', () => {
  const baseURL = 'https://internal-api.mercadolibre.com';

  beforeEach(() => {
    nock.cleanAll();
  });

  describe('.getByDomain', () => {
    it('should return the shop data on a success call with all the possible options', (done) => {
    // given
      const url = 'example.mercadoshops.com.ar';
      const section = 'home';
      const device = 'desktop';
      const detection = 'true';

      const exampleResponse = { shop: { name: 'Example AR' } };

      nock(baseURL, {
        reqheaders: { 'X-Request-Id': UUID_V4_PATTERN, 'x-flow-starter': true },
      })
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query({ url, section, device, detection })
        .reply(200, exampleResponse);

      // when
      FrontendWrapperService
        .getByDomain({
          url,
          section,
          device,
        })
        .then((data) => {
          // then
          expect(data).toEqual(exampleResponse);
          done();
        });
    });
  });

  describe('.getAllowedHeadersToBypass', () => {
    it('should return only the allowed headers', () => {
      // given
      const req = httpMocks.createRequest({
        headers: {
          'X-Frontend-Wrapper-Scope': 'green',
          'X-Dummy-Header': true,
          'Other-Header': 'other-value',
          'x-robots': '1',
        },
      });

      // when
      const headers = FrontendWrapperService.getAllowedHeadersToBypass(req);

      // then
      expect(headers).toEqual({
        'X-Frontend-Wrapper-Scope': 'green',
        'x-robots': '1',
      });
    });
  });
});
