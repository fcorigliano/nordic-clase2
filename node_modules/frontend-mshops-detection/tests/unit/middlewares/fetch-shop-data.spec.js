/**
 * Module dependencies
 */
const httpMocks = require('node-mocks-http');
const nock = require('nock');

const middleware = require('../../../src/middlewares/fetch-shop-data');
const { ENDPOINT } = require('../../../src/config');

const example = require('../mocks/get/shops/frontend-wrapper/example.json');
const exampleMsStore = require('../mocks/get/shops/frontend-wrapper/example-ms_store.json');

/**
 * Tests
 */
describe('Fetch shop data middleware', () => {
  const baseURL = 'https://internal-api.mercadolibre.com';
  const defaultLocals = { default: ['some-values'] };

  let req;
  let res = httpMocks.createResponse({
    locals: defaultLocals,
  });
  const next = () => {};

  beforeEach(() => {
    nock.cleanAll();
  });

  afterEach(() => {
    // clean res object
    res = httpMocks.createResponse({
      locals: defaultLocals,
    });
  });

  describe('Request not from MS', () => {
    test('default case, should do nothing', () => {
    // GIVEN
      const platform = { siteId: 'MLA', countryId: 'AR', id: 'MS', domain: 'mercadoshops.com.ar' };
      const cookies = { _ml_gc: 'jdfjkdsl' };
      req = httpMocks.createRequest({
        hostname: 'mercadolibre.com.ar',
        platform,
        cookies,
      });

      // WHEN
      middleware(req, res, next);

      // THEN
      expect(req.platform).toBe(platform);
      expect(res.locals).toBe(defaultLocals);
    });
  });

  describe('Request from MS', () => {
    const exampleRequest = {
      hostname: 'example.mercadoshops.com.mx',
      headers: {
        'X-Mshops': '1',
        'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
        'x-forwarded-header-names': 'X-Request-Id',
      },
    };

    const exampleQuery = (section = 'home') => ({
      url: 'example.mercadoshops.com.mx',
      section,
      editable: false,
      user_logged: false,
      detection: true,
    });

    describe('cases in which should avoid fetching shop data', () => {
      const testDomains = [
        'mercadolibre.com',
        'www.mercadolibre.com',
        'mercadolibre.com.ar',
        'www.mercadolibre.com.ar',
        'mercadolibre.cl',
        'www.mercadolibre.cl',
        'mercadolivre.com.br',
        'www.mercadolivre.com.br',
        'mercadolibre.com.co',
        'www.mercadolibre.com.co',
        'mercadolibre.com.mx',
        'www.mercadolibre.com.mx',
        undefined,
        null,
      ];

      testDomains.forEach((testDomain) => {
        test(`like in ${testDomain} when no ms_store param is included`, () => {
          req = httpMocks.createMocks({
            ...exampleRequest,
            hostname: testDomain,
          });

          const nextMock = jest.fn();

          middleware(req, res, nextMock);

          expect(req.platform).toBe(undefined);
          expect(res.locals.mercadoShops).toBe(undefined);
          expect(res.locals).toBe(defaultLocals);
          expect(nextMock).toHaveBeenCalled();
        });
      });
    });

    test('default case, should set the req.platform and fill its data', (done) => {
      // GIVEN
      req = httpMocks.createRequest(exampleRequest);

      nock(baseURL, {
        reqheaders: { 'X-Request-Id': '12345678-1234-1234-1234-123456789abc' },
        badheaders: ['x-flow-starter'],
      })
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery())
        .reply(200, example);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: 'MLM',
          countryId: 'MX',
          domain: 'example.mercadoshops.com.mx',
          shop: example.shop,
        });

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: example },
        });

        done();
      });
    });

    test('404 shop not found, should set platform with defaults and fill res.locals with nothing', (done) => {
      // GIVEN
      req = httpMocks.createRequest({
        hostname: 'example.mercadoshops.com.mx',
        // implicit testing also of the section and the cookie detection
        headers: { 'X-Mshops-Section': 'search' },
        cookies: { x_mshops: '1' },
      });

      nock(baseURL)
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery('search'))
        .reply(404);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: null,
          countryId: null,
          domain: null,
        });

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: null },
        });

        done();
      });
    });

    test('requesting to a stage scope of frontend-wrapper', (done) => {
      // GIVEN
      req = httpMocks.createRequest({
        ...exampleRequest,
        headers: {
          ...exampleRequest.headers,
          'X-Frontend-Wrapper-Scope': 'green',
        },
      });

      nock(baseURL, {
        reqheaders: {
          'X-Frontend-Wrapper-Scope': /^[a-z]+$/,
        },
      })
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery())
        .reply(200, example);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: 'MLM',
          countryId: 'MX',
          domain: 'example.mercadoshops.com.mx',
          shop: example.shop,
        });

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: example },
        });

        done();
      });
    });

    test('request with ms_store and feature enabled', (done) => {
      // GIVEN
      req = httpMocks.createRequest({
        ...exampleRequest,
        query: {
          ms_store: 'test-nativas.mercadoshops.com.ar',
        },
        hostname: 'dominio-delegado.com.ar',
      });

      nock(baseURL)
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query({
          ...exampleQuery(),
          url: 'test-nativas.mercadoshops.com.ar',
        })
        .reply(200, exampleMsStore);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: 'MLA',
          countryId: 'AR',
          domain: 'test-nativas.mercadoshops.com.ar',
          shop: exampleMsStore.shop,
        });

        expect(res.locals.mercadoShops).toBeDefined();
        expect(res.locals.mercadoShops.data.shop.features.includes('mshops-guest-cho')).toBeTruthy();

        done();
      });
    });
  });

  describe('Request from MS is from bots', () => {
    const exampleRequest = {
      hostname: 'example.mercadoshops.com.mx',
      headers: {
        'X-Mshops': '1',
        'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
        'x-forwarded-header-names': 'X-Request-Id',
        'User-Agent': 'Bot',
      },
    };

    const exampleQuery = (section = 'home') => ({
      url: 'example.mercadoshops.com.mx',
      section,
      editable: false,
      user_logged: false,
      detection: true,
    });

    test('default case, should set the req.platform and fill its data', (done) => {
      // GIVEN
      req = httpMocks.createRequest(exampleRequest);

      nock(baseURL, {
        reqheaders: { 'X-Request-Id': '12345678-1234-1234-1234-123456789abc' },
        badheaders: ['x-flow-starter'],
      })
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery())
        .reply(200, example);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: 'MLM',
          countryId: 'MX',
          domain: 'example.mercadoshops.com.mx',
          shop: example.shop,
        });

        expect(req.get('X-Robots')).toEqual(1);

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: example },
        });

        done();
      });
    });

    test('404 shop not found, should set platform with defaults and fill res.locals with nothing', (done) => {
      // GIVEN
      req = httpMocks.createRequest({
        hostname: 'example.mercadoshops.com.mx',
        // implicit testing also of the section and the cookie detection
        headers: { 'X-Mshops-Section': 'search' },
        cookies: { x_mshops: '1' },
      });

      nock(baseURL)
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery('search'))
        .reply(404);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: null,
          countryId: null,
          domain: null,
        });

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: null },
        });

        done();
      });
    });

    test('requesting to a stage scope of frontend-wrapper', (done) => {
      // GIVEN
      req = httpMocks.createRequest({
        ...exampleRequest,
        headers: {
          ...exampleRequest.headers,
          'X-Frontend-Wrapper-Scope': 'green',
        },
      });

      nock(baseURL, {
        reqheaders: {
          'X-Frontend-Wrapper-Scope': /^[a-z]+$/,
        },
      })
        .get(ENDPOINT.FRONTEND_WRAPPER)
        .query(exampleQuery())
        .reply(200, example);

      // WHEN
      middleware(req, res, () => {
        // THEN
        expect(req.platform).toEqual({
          id: 'MS',
          siteId: 'MLM',
          countryId: 'MX',
          domain: 'example.mercadoshops.com.mx',
          shop: example.shop,
        });

        expect(res.locals).toEqual({
          default: ['some-values'],
          mercadoShops: { data: example },
        });

        done();
      });
    });
  });
});
