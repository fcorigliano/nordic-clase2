/* eslint-disable max-classes-per-file */
jest.mock('../../../src/config', () => class {
  static get ENDPOINT() {
    return null;
  }

  static get ML_SITES() {
    return null;
  }

  static get COOKIES() {
    return null;
  }

  static get features() {
    return null;
  }
});

jest.mock('frontend-env', () => ({
  APPLICATION: 'mshops-web-app',
  SCOPE: 'prod',
}));

const { jwtVerify, SignJWT } = jest.requireActual('jose');
jest.mock('jose', () => class {
  static get SignJWT() {
    return null;
  }
});

/**
 * Module dependencies
 */
const mockJose = jest.requireMock('jose');
const httpMocks = require('node-mocks-http');
const middleware = require('../../../src/middlewares/is-guest-detection');

const { features, ENDPOINT, COOKIES, ML_SITES } = jest.requireActual('../../../src/config');
const mockConfig = jest.requireMock('../../../src/config');

const jwtSecret = 'dummy-secret-key-dummy-secret-key';

/**
 * Tests
 */
describe('Detection guest user', () => {
  let req;
  const res = httpMocks.createResponse();
  const next = jest.fn();

  beforeEach(() => {
    jest.spyOn(mockJose, 'SignJWT', 'get').mockReturnValue(SignJWT);
    jest.spyOn(mockConfig, 'ENDPOINT', 'get').mockReturnValue({ ...ENDPOINT });
    jest.spyOn(mockConfig, 'ML_SITES', 'get').mockReturnValue({ ...ML_SITES });
    jest.spyOn(mockConfig, 'COOKIES', 'get').mockReturnValue({ ...COOKIES });
    jest.spyOn(mockConfig, 'features', 'get').mockReturnValue({ ...features });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Request not from MS', () => {
    const platform = { siteId: 'MLA', countryId: 'AR', id: 'MS', domain: 'www.mercadolibre.com.ar' };
    const cookies = { [COOKIES.IS_GUEST.name]: null };

    test('catchSessionCookies should do nothing', () => {
      // GIVEN
      req = httpMocks.createRequest({
        hostname: platform.domain,
        platform,
        cookies,
        headers: {
          host: platform.domain,
        },
      });

      // WHEN
      middleware.catchSessionCookies(req, res, next);

      // THEN
      expect(next).toBeCalledTimes(1);
    });

    test('isGuestDetection should do nothing', () => {
      // GIVEN
      req = httpMocks.createRequest({
        hostname: platform.domain,
        platform,
        cookies,
        device: {
          type: 'desktop',
        },
        headers: {
          host: platform.domain,
        },
      });

      // WHEN
      middleware.isGuestDetection(req, res, next);

      // THEN
      expect(next).toBeCalledTimes(1);
    });
  });

  describe('Request from MS with mercadoshops domain', () => {
    const platform = { siteId: 'MLM', countryId: 'MX', id: 'MS', domain: 'www.example.mercadoshops.com.mx' };

    describe('catchSessionCookies tests', () => {
      test('should not set the mshopsIsGuest and cp Cookies because no queries exists', (done) => {
        // GIVEN
        const query = {};
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          query,
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.catchSessionCookies(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should set the mshopsIsGuest and cp Cookies when queries exists', (done) => {
        // GIVEN
        const query = {
          [features.guestDetection.queries.isGuest]: true,
          [features.guestDetection.queries.cp]: '01420',
        };
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          query,
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.catchSessionCookies(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        expect(req.cookies[COOKIES.IS_GUEST.name]).toEqual(true);
        expect(req.cookies[COOKIES.CP.name]).toEqual('01420');
        expect(res.cookies[COOKIES.IS_GUEST.name].value).toEqual(true);
        expect(res.cookies[COOKIES.CP.name].value).toEqual('01420');
        done();
      });
    });

    test('should set the mshopsIsGuest and cp Cookies when queries exist and timestamp is in time', (done) => {
      // GIVEN
      const query = {
        [features.guestDetection.queries.isGuest]: true,
        [features.guestDetection.queries.cp]: '01420',
        [features.guestDetection.queries.timestamp]: Date.now() + 30000,
      };
      const exampleRequest = {
        hostname: platform.domain,
        headers: {
          'X-Mshops': '1',
          'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
          'x-forwarded-header-names': 'X-Request-Id',
          host: platform.domain,
        },
        query,
      };
      req = httpMocks.createRequest(exampleRequest);

      // WHEN
      middleware.catchSessionCookies(req, res, next);

      // THEN
      expect(next).toBeCalledTimes(1);
      expect(req.cookies[COOKIES.IS_GUEST.name]).toEqual(true);
      expect(req.cookies[COOKIES.CP.name]).toEqual('01420');
      expect(res.cookies[COOKIES.IS_GUEST.name].value).toEqual(true);
      expect(res.cookies[COOKIES.CP.name].value).toEqual('01420');
      done();
    });

    test('should not set mshopsIsGuest and cp cookies when queries exist and timestamp is out of time', (done) => {
      // GIVEN
      const query = {
        [features.guestDetection.queries.isGuest]: true,
        [features.guestDetection.queries.cp]: '01420',
        [features.guestDetection.queries.timestamp]: Date.now() - 1,
      };
      const exampleRequest = {
        hostname: platform.domain,
        headers: {
          'X-Mshops': '1',
          'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
          'x-forwarded-header-names': 'X-Request-Id',
          host: platform.domain,
        },
        query,
      };
      req = httpMocks.createRequest(exampleRequest);

      // WHEN
      middleware.catchSessionCookies(req, res, next);

      // THEN
      expect(next).toBeCalledTimes(1);
      expect(req.cookies[COOKIES.IS_GUEST]).toBeUndefined();
      expect(req.cookies[COOKIES.CP]).toBeUndefined();
      expect(res.cookies[COOKIES.IS_GUEST]).toBeUndefined();
      expect(res.cookies[COOKIES.CP]).toBeUndefined();
      done();
    });

    describe('isGuestDetection tests', () => {
      const mockFeatures = {
        ...features,
      };

      beforeEach(() => {
        mockFeatures.guestDetection.paths = [/^\/route-1/, /^\/route-2/];
        mockFeatures.guestDetection.jwtSecret = jwtSecret;
        jest.spyOn(mockConfig, 'features', 'get').mockReturnValue(mockFeatures);
      });

      test('should not redirect when a HEAD request is received', (done) => {
        const cookies = {};
        // GIVEN
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          method: 'HEAD',
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should not redirect when request is from bot', (done) => {
        const cookies = {};
        // GIVEN
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            'user-agent': 'bot',
            host: platform.domain,
          },
          method: 'GET',
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should not redirect when request is a mobile device', (done) => {
        const cookies = {};
        // GIVEN
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            'user-agent': 'chrome',
            host: platform.domain,
          },
          method: 'GET',
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'mobile',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should not redirect when no jwt secret found', (done) => {
        const cookies = {};
        // GIVEN
        mockFeatures.guestDetection.jwtSecret = null;
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            'user-agent': 'chrome',
            host: platform.domain,
          },
          method: 'GET',
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should not redirect to MKPL because root path does not match', (done) => {
        const cookies = { [COOKIES.IS_GUEST.name]: true };
        // GIVEN
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
        done();
      });

      test('should not redirect to MKPL because no paths match', () => {
        const cookies = {};
        // GIVEN
        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          protocol: 'https',
          url: '/route-3/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        middleware.isGuestDetection(req, res, next);
        expect(next).toBeCalledTimes(1);
      });

      test('should redirect with signed jwt to MKPL when path match', async () => {
        const cookies = {};

        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            'user-agent': 'chrome',
            host: platform.domain,
          },
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        await middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toHaveBeenCalledTimes(0);
        expect(res.statusCode).toEqual(302);
        const regex = /https:\/\/www\.mercadolibre\.com\.mx\/mercadoshops\/check-session\?signed=(.+)/;
        const matched = regex.exec(res._getRedirectUrl());
        expect(matched).toHaveLength(2);

        await jwtVerify(matched[1], new TextEncoder().encode(jwtSecret))
          .then(jwt => {
            expect(jwt).toBeTruthy();
            expect(jwt.payload?.callback).toBe('https://www.example.mercadoshops.com.mx/route-1/push');
            expect(jwt.payload?.aud).toBe('MLM');
            expect(jwt.payload?.iss).toBe('prod:mshops-web-app:www.example.mercadoshops.com.mx');
            expect(jwt.payload?.iat).toBeTruthy();
            expect(jwt.payload?.exp).toBeTruthy();
            expect(jwt.payload.exp - jwt.payload.iat).toBe(30);
          })
          .catch(error => expect(error).toBeFalsy());
      });

      test('should invoke next when an error occurs with the jwt signing', async () => {
        const cookies = {};

        // GIVEN
        jest.spyOn(mockJose, 'SignJWT', 'get').mockReturnValue(class extends SignJWT {
          sign(key) {
            return Promise.reject(new Error(`JWT signing failure with key: [${key}]`));
          }
        });

        const exampleRequest = {
          hostname: platform.domain,
          headers: {
            'X-Mshops': '1',
            'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
            'x-forwarded-header-names': 'X-Request-Id',
            host: platform.domain,
          },
          protocol: 'https',
          url: '/route-1/push',
          platform,
          cookies,
          device: {
            type: 'desktop',
          },
        };
        req = httpMocks.createRequest(exampleRequest);

        // WHEN
        await middleware.isGuestDetection(req, res, next);

        // THEN
        expect(next).toBeCalledTimes(1);
      });
    });
  });

  describe('Request from MS with own domain', () => {
    const platform = { siteId: 'MCO', countryId: 'CO', id: 'MS', domain: 'www.myshop.com' };

    test('should redirect with signed jwt to MKPL when path match', async () => {
      const cookies = {};

      const exampleRequest = {
        hostname: platform.domain,
        headers: {
          'X-Mshops': '1',
          'X-Request-Id': '12345678-1234-1234-1234-123456789abc',
          'x-forwarded-header-names': 'X-Request-Id',
          'user-agent': 'chrome',
          host: platform.domain,
        },
        protocol: 'https',
        url: '/route-1/push',
        platform,
        cookies,
        device: {
          type: 'desktop',
        },
      };
      req = httpMocks.createRequest(exampleRequest);

      // WHEN
      await middleware.isGuestDetection(req, res, next);

      // THEN
      expect(next).toHaveBeenCalledTimes(0);
      expect(res.statusCode).toEqual(302);
      const regex = /https:\/\/www\.mercadolibre\.com\.co\/mercadoshops\/check-session\?signed=(.+)/;
      const matched = regex.exec(res._getRedirectUrl());
      expect(matched).toHaveLength(2);

      await jwtVerify(matched[1], new TextEncoder().encode(jwtSecret))
        .then(jwt => {
          expect(jwt).toBeTruthy();
          expect(jwt.payload?.callback).toBe('https://www.myshop.com/route-1/push');
          expect(jwt.payload?.aud).toBe('MCO');
          expect(jwt.payload?.iss).toBe('prod:mshops-web-app:www.myshop.com');
          expect(jwt.payload?.iat).toBeTruthy();
          expect(jwt.payload?.exp).toBeTruthy();
          expect(jwt.payload.exp - jwt.payload.iat).toBe(30);
        })
        .catch(error => expect(error).toBeFalsy());
    });
  });
});
