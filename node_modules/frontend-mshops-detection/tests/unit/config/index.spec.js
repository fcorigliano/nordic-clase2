const defaultConfig = require('../../../src/config/default');
const developmentConfig = require('../../../src/config/development');

// As frontend-env is checked on module require, we need to require config on each test,
// jest.resetModules() is needed to avoid module cache
describe('config', () => {
  beforeEach(() => {
    jest.resetModules();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('production env', () => {
    beforeEach(() => {
      jest.mock('frontend-env', () => ({ DEVELOPMENT: false }));
    });

    it('should return default config', () => {
      const config = require('../../../src/config');
      expect((JSON.stringify(config))).toStrictEqual((JSON.stringify(defaultConfig)));
    });
  });

  describe('development env', () => {
    beforeEach(() => {
      jest.mock('frontend-env', () => ({ DEVELOPMENT: true }));
    });

    it('should return merge with developmentConfig', () => {
      const config = require('../../../src/config');

      expect(config.CLIENT.FRONTEND_WRAPPER).toMatchObject({
        ...defaultConfig.CLIENT.FRONTEND_WRAPPER,
        ...developmentConfig.CLIENT.FRONTEND_WRAPPER,
      });
    });
  });

  describe('app config with robots set to true', () => {
    beforeEach(() => {
      jest.mock('frontend-config', () => ({
        mshopsDetection: { robots: true },
      }));
    });

    it('should set features.robot as true', () => {
      const config = require('../../../src/config');

      expect(config.features.robots).toEqual(true);
    });
  });
});
