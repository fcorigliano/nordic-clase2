/* eslint-disable max-classes-per-file */
jest.mock('../../../src/config', () => class {
  static get features() {
    return null;
  }
});
jest.mock('frontend-env', () => class {
  static get DEVELOPMENT() {
    return null;
  }
});

/**
 * Module dependencies
 */
const httpMocks = require('node-mocks-http');
const env = require('frontend-env');
const config = require('../../../src/config');
const isFromShops = require('../../../src/utils/is-from-shops');

/**
 * Tests
 */
describe('Utils > isFromShops', () => {
  beforeEach(() => {
    jest.spyOn(env, 'DEVELOPMENT', 'get').mockReturnValue(false);
    jest.spyOn(config, 'features', 'get').mockReturnValue({ fetchShopData: { devShopDomain: null } });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('if the request is not from MS, it should return false', () => {
    const req = httpMocks.createRequest();

    expect(isFromShops(req)).toBeFalsy();
  });

  test('if the request has headers of MS it should return true', () => {
    const req = httpMocks.createRequest({
      headers: {
        'X-MShops': '1',
      },
    });

    expect(isFromShops(req)).toBeTruthy();
  });

  test('if the request has cookies of MS it should return true', () => {
    const req = httpMocks.createRequest({
      cookies: {
        x_mshops: '1',
      },
    });

    expect(isFromShops(req)).toBeTruthy();
  });

  test('if env is dev, and devShopDomain config is defined it should return true', () => {
    jest.spyOn(env, 'DEVELOPMENT', 'get').mockReturnValue(true);
    jest.spyOn(config, 'features', 'get').mockReturnValue({ fetchShopData: { devShopDomain: 'www.shop.com' } });
    const req = httpMocks.createRequest({});

    expect(isFromShops(req)).toBeTruthy();
  });
});
