/* eslint-disable max-classes-per-file */
jest.mock('../../../src/config', () => class {
  static get features() {
    return null;
  }
});
jest.mock('frontend-env', () => class {
  static get DEVELOPMENT() {
    return null;
  }
});

const env = require('frontend-env');
const config = require('../../../src/config');
const getUrl = require('../../../src/utils/get-url');

describe('Utils -> getUrl', () => {
  beforeEach(() => {
    jest.spyOn(config, 'features', 'get').mockReturnValue({ fetchShopData: { devShopDomain: null } });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('development env', () => {
    beforeEach(() => {
      jest.spyOn(env, 'DEVELOPMENT', 'get').mockReturnValue(true);
    });

    it('should return domain_override query param for developments enviroments', () => {
      const mockReq = {
        query: { domain_override: 'testurl.com' },
        header: { 'X-Mshops': 1 },
      };

      expect(getUrl(mockReq)).toEqual(mockReq.query.domain_override);
    });

    it('should return domain_override cookie for developments enviroments', () => {
      const mockReq = {
        cookies: { domain_override: 'testurl.com' },
        header: { 'X-Mshops': 1 },
      };

      expect(getUrl(mockReq)).toEqual(mockReq.cookies.domain_override);
    });

    it('should throw an error in development env if domain_override is not defined', () => {
      const mockReq = {
        query: {},
        header: { 'X-Mshops': 1 },
      };

      try {
        getUrl(mockReq);
      } catch (error) {
        expect(error.message).toEqual(
          'domain_override query param must be defined in order to run app locally for mshops platform',
        );
      }
    });

    it('should return undefined when domain_override is not defined and request is not from shop', () => {
      const mockReq = {
        query: {},
        header: {},
      };

      expect(getUrl(mockReq)).toEqual(undefined);
    });

    it('should return devShopDomain from config props', () => {
      const shopDomain = 'www.shop.com';
      jest.spyOn(config, 'features', 'get').mockReturnValue({ fetchShopData: { devShopDomain: shopDomain } });

      expect(getUrl({})).toEqual(shopDomain);
    });
  });

  describe('production env', () => {
    beforeEach(() => {
      jest.spyOn(env, 'DEVELOPMENT', 'get').mockReturnValue(false);
    });

    it('should return req.hostname in production env', () => {
      const mockReq = { hostname: 'testurl.com' };

      expect(getUrl(mockReq)).toEqual(mockReq.hostname);
    });
  });
});
