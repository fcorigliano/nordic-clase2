const { propagateParams } = require('@node-utils/url');

const allowedParams = [
  'code',
  'device',
  'gclid',
  'utm_experiment',
  'utm_source',
  'utm_medium',
  'utm_campaign',
  'utm_word',
  'matt_tool',
  'matt_word',
];

const paramsToPropagate = new RegExp(allowedParams.join('|'));

/**
 * Return the whole navigation data depending on the siteId.
 *
 * @param {Boolean} enabled - Indicate whether the navigation is enabled or not
 * @param {Object} structure - The data structure that represents the navigation
 * @param {Object} translations - The labels to display for the navigation
 * @param {Object} urls - The URLs to display for the navigation
 * @param {Object} queryParams - The query params object from request
 * @returns {Object} The reassembled navigation data
 */
const getDataBySite = (enabled, structure, translations, urls, queryParams) => {
  // If the navigation is not enabled or has no structure just return an empty object
  if (!enabled || !structure) {
    return {};
  }

  // cloning to do not mutate structure
  const newStructure = {
    ...structure,
  };

  /**
   * Sets the header for the response for each access item (Example: tools for sellers)
   *
   * @param {String} access - Access id (Example: tools_for_sellers)
   * @param {Object} accessItem - Access item object
   * @param {Object} translationItem - Translation object from the corresponding access
   * @param {Object} accessUrls - Urls object from the corresponding access
   * @param {Object} accessIcons - Icons object from the corresponding access
   * @param {Object} params - The query params object
   */
  const setHeader = (access, accessItem, translationItem, accessUrls, params) => {
    if (accessItem.header) {
      // cloning to do not mutate structure data
      newStructure[access] = {
        ...newStructure[access],
        header: {
          label: translationItem.header.label,
          sub_label: translationItem.header.sub_label,
          url: propagateParams(accessUrls.header, params, paramsToPropagate),
          icon: `${access}__header`,
        },
      };
    } else {
      // cloning to do not mutate structure data
      newStructure[access] = {
        ...newStructure[access],
      };
      delete newStructure[access].header;
    }
  };

  /**
   * Sets the items array for the structure for each access (Example: tools for sellers)
   *
   * @param {String} access - Access id (Example: tools_for_sellers)
   * @param {Object} accessItem - Access item object
   * @param {Object} translationItem - Translation object from the corresponding access
   * @param {Object} accessUrls - Urls object from the corresponding access
   * @param {Object} accessIcons - Icons object from the corresponding access
   * @param {Object} params - The query params object
   */
  const setItems = (access, accessItem, translationItem, accessUrls, params) => {
    if (accessItem.items && accessItem.items.length) {
      const resultItems = accessItem.items.map(item => ({
        id: item,
        label: translationItem.items[item],
        url: propagateParams(accessUrls.items[item], params, paramsToPropagate),
        icon: `${access}__${item}`,
      }));
      // cloning to do not mutate structure data
      newStructure[access] = {
        ...newStructure[access],
        items: resultItems,
      };
    } else {
      // cloning to do not mutate structure data
      newStructure[access] = {
        ...newStructure[access],
      };
      delete newStructure[access].items;
    }
  };

  // Get inside each item from the structure and iterate over it getting the corresponding data for each item

  Object.keys(newStructure).forEach((access) => {
    const accessItem = newStructure[access];
    const translationItem = translations[access];
    const accessUrls = urls[access];

    // Set navLink translations
    // cloning to do not mutate structure data
    newStructure[access] = {
      ...newStructure[access],
      label: translationItem.label,
    };

    setHeader(access, accessItem, translationItem, accessUrls, queryParams);
    setItems(access, accessItem, translationItem, accessUrls, queryParams);
  });

  return newStructure;
};

module.exports = getDataBySite;
