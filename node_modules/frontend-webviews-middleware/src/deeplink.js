/* eslint-disable consistent-return */
/*
{
  deeplink: url-del-deeplink,
}
*/
const { getMattParams } = require('nordic-attribution/src/util');

const featureNativeVersion = {
  android: {
    major: 10,
    minor: 45,
  },
  ios: {
    major: 10,
    minor: 113,
  },
};

function getUrlMatt(req) {
  const mattParams = getMattParams(`${req.protocol}://${req.host}${req.url}`);

  let mattUrl = '';

  Object.entries(mattParams).forEach(([key, val]) => {
    if (val) {
      mattUrl += `&${key}=${val}`;
    }
  });

  return mattUrl;
}

function isValidNativeVersion(device) {
  try {
    const [major, minor] = device.nativeApp.version.split('.');
    const versionConfig = featureNativeVersion[device.nativeApp.os.toLowerCase()];

    return versionConfig.major < major || (versionConfig.major === parseInt(major, 10) && versionConfig.minor <= minor);
  } catch (ex) {
    return false;
  }
}

module.exports = (config = () => {}) => function deeplinkMiddleware(req, res, next) {
  if (req.header('x-native-deeplink') && isValidNativeVersion(req.device)) {
    const data = config(req, res);

    if (data && data.deeplink) {
      return res.send({
        deeplink: `${data.deeplink}${getUrlMatt(req)}`,
      });
    }
  }

  next();
};
