/* eslint-disable global-require */

const httpMocks = require('node-mocks-http');

const mockFunc = jest.fn();

jest.mock('../../src/deeplink', () => () => mockFunc);
jest.mock('../../src/csr-prerender', () => () => mockFunc);

const middleware = require('../../src');

const req = httpMocks.createRequest({
  device: {
    nativeWebview: true,
  },
});
const res = httpMocks.express.response.createResponse();

describe('Webviews middleware module', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.resetAllMocks();
  });

  it('Should execute middleware without config', (done) => {
    middleware()(req, res, () => {
      expect(mockFunc).not.toBeCalled();
      done();
    });
  });

  it('Should execute middlewares', (done) => {
    const config = {
      middlewares: {
        deeplink: true,
        csrPrerender: true,
      },
      deeplink: jest.fn(),
      csrPrerender: jest.fn(),
    };
    const next = jest.fn();

    middleware(config)(req, res, next);

    expect(mockFunc).toBeCalledWith(req, res, next);
    expect(mockFunc).toBeCalledTimes(2);
    done();
  });

  it('Should not execute middleware when is not a webview', (done) => {
    req.device.nativeWebview = false;

    middleware()(req, res, () => {
      expect(mockFunc).not.toBeCalled();
      done();
    });
  });
});
