/* eslint-disable global-require */
const httpMocks = require('node-mocks-http');

jest.mock('nordic-attribution/src/util', () => ({
  __esModule: true,
  getMattParams: (url) => {
    if (url.includes('matt')) {
      return {
        matt_tool: '123',
        matt_word: 'word',
      };
    }
    return {};
  },
}));

const middleware = require('../../src/deeplink');

const req = httpMocks.createRequest({
  method: 'GET',
  url: '/ofertas',
  protocol: 'https',
  hostname: 'www.mercadolibre.com.ar',
  headers: {
    'x-native-deeplink': 'true',
  },
  device: {
    nativeApp: {
      os: 'Android',
      version: '10.45.0',
    },
  },
});
const res = httpMocks.express.response.createResponse();
res.send = jest.fn();

describe('Deeplink middleware module', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.resetAllMocks();
  });

  it('Should execute middleware without config', (done) => {
    const config = jest.fn();

    middleware(config)(req, res, () => {
      expect(config).toBeCalledWith(req, res);
      done();
    });
  });

  it('Should execute middleware with config', (done) => {
    const config = {
      deeplink: 'meli://webview?url',
    };

    const customConfig = jest.fn().mockImplementation(() => config);

    middleware(customConfig)(req, res);
    expect(customConfig).toBeCalledWith(req, res);
    expect(res.send).toBeCalledWith(config);
    done();
  });

  it('Should execute middleware with matt params', (done) => {
    const config = {
      deeplink: 'meli://webview?url',
    };

    const mattParams = 'matt_tool=123&matt_word=word';

    const result = {
      deeplink: `meli://webview?url&${mattParams}`,
    };

    req.url += `?${mattParams}`;

    const customConfig = jest.fn().mockImplementation(() => config);

    middleware(customConfig)(req, res);
    expect(customConfig).toBeCalledWith(req, res);
    expect(res.send).toBeCalledWith(result);
    done();
  });

  it('Should not execute middleware when header is not present', (done) => {
    req.headers = { };

    middleware()(req, res, () => {
      expect(res.send).not.toBeCalled();
      done();
    });
  });

  it('Should not execute middleware when version app is not valid', (done) => {
    req.device = {
      nativeApp: {
        os: 'Android',
        version: '10.44.0',
      },
    };

    const config = {
      deeplink: 'meli://webview?url',
    };

    const customConfig = jest.fn().mockImplementation(() => config);

    middleware(customConfig)(req, res, () => {
      expect(customConfig).not.toBeCalled();
      expect(res.send).not.toBeCalled();
      done();
    });
  });
});
