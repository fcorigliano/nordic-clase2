// eslint-disable-next-line import/no-extraneous-dependencies
const babel = require('@babel/core');
const path = require('path');

const pluginPath = path.join(__dirname, '../src/index.js');

const babelOpts = {
  presets: [
    '@babel/preset-react',
  ],
  plugins: [
    [
      pluginPath,
      {
        elements: [
          'frontend-script', 'nordic/script',
          'frontend-style', 'nordic/style',
        ],
      },
    ],
  ],
};

describe('babel-plugin-remove-nordic-side-effect-elements', () => {
  it('Should remove one side effect component', () => {
    const actual = `const React = require('react');

const Script = require('frontend-script');

class Element extends React.Component {
  render() {
    return (
      <Script> some </Script>
    )
  }
}`;

    const expected = `const React = require('react');

class Element extends React.Component {
  render() {
    return null;
  }

}`;

    const actualTransformed = babel.transformSync(actual, babelOpts).code;
    expect(actualTransformed).toBe(expected);
  });

  it('Should remove one side effect component', () => {
    const actual = `const React = require('react');

const Script = require('frontend-script');
const Style = require('frontend-style');

class Element extends React.Component {
  render() {
    return (
      <>
        <Script> some </Script>
        <Style> some </Style>
      </>
    )
  }
}`;

    const expected = `const React = require('react');

class Element extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement(React.Fragment, null, null, null);
  }

}`;

    const actualTransformed = babel.transformSync(actual, babelOpts).code;
    expect(actualTransformed).toBe(expected);
  });

  it('Should do nothing when no exists a side effect component', () => {
    const actual = `const React = require('react');

class Element extends React.Component {
  render() {
    return (
      nothing
    )
  }
}`;

    const expected = `const React = require('react');

class Element extends React.Component {
  render() {
    return nothing;
  }

}`;

    const actualTransformed = babel.transformSync(actual, babelOpts).code;
    expect(actualTransformed).toBe(expected);
  });
});
