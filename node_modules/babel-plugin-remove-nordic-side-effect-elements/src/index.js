const t = require('@babel/types');
const isASideEffectPath = require('./isASideEffectPath');

const getElementsToRemove = state => state.opts.elements || [];

const DeleteElement = {
  JSXElement(path, elementToRemove) {
    const isAnElementToRemove = path.node
      && t.isJSXOpeningElement(path.node.openingElement)
      && t.isJSXIdentifier(path.node.openingElement.name, { name: elementToRemove });

    if (isAnElementToRemove) {
      path.replaceWith(t.expressionStatement(t.nullLiteral()));
    }
  },
};

function plugin({ assertVersion }) {
  assertVersion(7);

  return {
    name: 'remove-nordic-side-effect-elements',
    visitor: {
      VariableDeclaration(path, state) {
        const elementsToRemove = getElementsToRemove(state);


        if (isASideEffectPath(path, state, elementsToRemove)) {
          /**
           * First we'll get the variable name of the element
           * E.g: 'Script'
           */
          const sideEffectVarName = path.node.declarations[0].id.name;

          /**
           * Now we'll proceed to remove all uses of that side-effect in that file.
           */
          path.hub.file.path.traverse(DeleteElement, sideEffectVarName);

          /**
           * Finally we'll remove the require statement
           */
          path.remove();
        }
      },
    },
  };
}

module.exports = plugin;
