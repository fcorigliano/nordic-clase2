import type { ClientRequest } from 'http'

type MockRequest = Pick<ClientRequest, 'getHeader' | 'setHeader' | 'abort' | 'write'| 'emit'| 'end'>;

type MockRouteOption = {
  /**
   * Routes to be mocked
   *
   * @example
   * mock.intercept('api.mercadolibre.com', {
   *   path: '/sites/*',
   * });
   */
  path: string;

  /**
   * Mock based on query params values
   *
   * @example
   * mock.intercept('api.mercadolibre.com', {
   *   path: '/sites/*',
   *   query: {
   *     env: 'dev',
   *   }
   * });
   *
   * // use query with RegExp
   * mock.intercept('api.mercadolibre.com', {
   *   path: '/sites/*',
   *   query: {
   *     env: /(dev|test)/,
   *   }
   * });
   */
  query?: Record<string, string | RegExp>;

  /**
   * Mock based on headers values
   *
   * @example
   * mock.intercept('api.mercadolibre.com', {
   *   path: '/sites/*',
   *   headers: {
   *     'Accept-Encoding': 'gzip',
   *   }
   * });
   *
   * // use headers with RegExp
   * mock.intercept('api.mercadolibre.com', {
   *   path: '/sites/*',
   *   headers: {
   *     'Accept-Encoding': /^(gzip|br)$/,
   *   }
   * });
   */
  headers?: Record<string, string | RegExp>;
};

export interface MockConfig {
  /**
   * A relative or an absolute path to the mocks directory
   *
   * @default `mocks/${process.env.NODE_ENV}`
   * @example
   * const mock = Mock({
   *   dir: `mocks/${process.env.NODE_ENV}`,
   * });
   */
  dir?: string;

  /**
   * By default, the module throws an error when it is used in a production environment.
   * To prevent this to happen set unsafe option with `true`.
   * Use this property only if you're really sure of its effect (try to avoid it in production),
   * but it can be useful for demos.
   *
   * @default false
   * @example
   * const mock = Mock({
   *   dir: `${__dirname}/mocks`,
   *   unsafe: false, // disable mocks in production
   * });
   */
  unsafe?: boolean;

  /**
   * Use `false` to avoid the mock's file path hashing for a long values that exceeds 255 symbols.
   *
   * @default true
   * @example
   * const mock = Mock({
   *   dir: `${__dirname}/mocks`,
   *   hashDirname: true,
   * });
   */
  hashDirname?: boolean;
}

export type MockRoute = null | string | string[] | MockRouteOption;

export interface MockTransformer {
  /**
   * A function that receives the original response and returns the transformed response.
   *
   * @param data Mocked response data to be changed.
   * @param req Custom request object to access information from the request.
   * @return Modified response.
   *
   * @example
   * // Intercept the requests to https://api.mercadolibre.com/countries/*
   * // And transform the response by adding an additional dynamic data
   * mock.intercept('https://api.mercadolibre.com', '/countries/*', {
   *   transformResponse: function(data, req) {
   *     // Generate an unique id for every mocked request
   *     data.uuid = uuidv4();
   *     // Depending on the current request change the user's state
   *     data.isLoggedIn = !!req.user;
   *
   *     return data;
   *   },
   * });
   */
  transformResponse?: <T = unknown>(data: T, req?: MockRequest) => T;

  /**
   * A function that receives the original headers and returns the transformed headers.
   *
   * @param headers Mocked response headers to be changed.
   * @param req Custom request object to access information from the request.
   * @return Modified headers.
   *
   * @example
   * // Intercept the requests to https://api.mercadolibre.com/countries/*
   * // And transform the response by adding an additional dynamic data
   * mock.intercept('https://api.mercadolibre.com', '/countries/*', {
   *   transformHeaders: function(headers, req) {
   *     // Modify header to custom caller id
   *     headers['x-caller-id'] = 12345678;
   *
   *     return headers;
   *   },
   * });
   */
  transformHeaders?: (
    headers: Record<string, string>,
    req?: MockRequest
  ) => Record<string, string>;

  /**
   * An array of query string parameters that should be omitted while constructing a mock file name,
   * which are useful when some params are dynamic e.g. a timestamp
   *
   * @example
   * // Intercept the requests to api.mercadolibre.com for both protocols: https and http
   * // Do not include `uid` param in a mock filename
   * mock.intercept('api.mercadolibre.com', null, {
   *   ignoreParams: ['uid'],
   * });
   */
  ignoreParams?: string[];

  /**
   * An array of body data keys that should be omitted while constructing a mock file name,
   * applicable only for `POST`, `PUT` and `PATCH` requests that have a body
   *
   * @example
   * // Intercept the requests to api.mercadolibre.com for both protocols: https and http
   * // Do not include `uid` param in a mock filename
   * mock.intercept('api.mercadolibre.com', null, {
   *   ignoreData: ['payload'],
   * });
   */
  ignoreData?: string[];

  /**
   * An array of headers that should be included while constructing a mock file name,
   * which are useful to retrieve specific mocks given a unique value (like an `x-caller-id` header)
   *
   * @example
   * // Intercept the requests to api.mercadolibre.com for both protocols: https and http
   * // Do not include `uid` param in a mock filename
   * mock.intercept('api.mercadolibre.com', null, {
   *   includeHeaders: ['x-caller-id'],
   * });
   */
  includeHeaders?: string[];
}

export interface MainMock {
  /**
   * Intercept requests to a specific host by criteria
   *
   * @example
   * // Intercept all requests to https://api.mercadolibre.com
   * mock.intercept('https://api.mercadolibre.com');
   *
   * // Intercept the requests to https://api.mercadolibre.com  and http://api.mercadolibre.com
   * mock.intercept('api.mercadolibre.com');
   *
   * // Intercept the requests to https://api.mercadolibre.com/sites/:site
   * // Matches only requests to /sites/:site and no affects the other requests
   * // to api.mercadolibre.com
   * mock.intercept('https://api.mercadolibre.com', '/sites/:site');
   *
   * // Intercept the requests to api.mercadolibre.com for by matching a a bunch of paths
   * mock.intercept('api.mercadolibre.com', [
   *   '/countries/:country',
   *   '/currency/:currency',
   *   '/users/*',
   * ]);
   *
   */
  intercept(
    host: string,
    routes?: MockRoute,
    transformers?: MockTransformer
  ): void;

  /**
   * Remove the interceptors from the provided host
   *
   * @example
   * // Restore the requests to https://api.mercadolibre.com, remove all the routes
   * // but only for https protocol
   * mock.restore('https://api.mercadolibre.com');
   *
   * // Restore the requests to api.mercadolibre.com for both protocols https and http
   * // but only for /users/* route
   * mock.restore('api.mercadolibre.com', '/users/*');
   *
   * // Restore the requests to api.mercadolibre.com for https protocol only
   * // and a specific list of routes
   * mock.restore('https://api.mercadolibre.com', [
   *   '/countries/:country',
   *   '/currency/:currency',
   * ]);
   */
  restore(host: string, routes?: MockRoute): void;
}

export const Mock: (config?: MockConfig) => MainMock;
