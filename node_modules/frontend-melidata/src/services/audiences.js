const log = require('frontend-logger')('melidata');
const statsdInternal = require('frontend-statsd/internal');
const MelidataTrackService = require('./melidata-track');

const AudiencesApiCalls = require('../experiments/audiences-api-calls');

const NON_PARTICIPATING_VARIANT_ID = -1;
const NON_PARTICIPATING_VARIANT_NAME = 'NON_PARTICIPATING';

const melidataTrackService = new MelidataTrackService();
const sdk = 'node';

class AudiencesService {
  constructor() {
    this.apiService = new AudiencesApiCalls();
  }

  async getApplicableVariant(applicableVariant, experiment, userId, meliContext) {
    let userAudiences = null;

    if (experiment.audiences && userId && userId.length) {
      userAudiences = await this.getAudiencesFromApi(userId, meliContext);
    }
    return this.isParticipating(experiment, userAudiences)
      ? applicableVariant : AudiencesService.getNonParticipatingVariant();
  }

  async getAudiencesFromApi(userId, meliContext) {
    try {
      const audiences = await this.apiService.doGetAudiences(userId, meliContext);
      if (audiences !== null) {
        statsdInternal.increment('application.melidata.sdk.audiences.api_calls', 1, {
          successful: 'true',
          sdk,
          sdk_version: melidataTrackService.getPluginVersion(),
        });
        return audiences;
      }
    } catch (e) {
      log.error('Error creating audiences rest-client-pool', e);
    }

    statsdInternal.increment('application.melidata.sdk.audiences.api_calls', 1, {
      successful: 'false',
      sdk,
      sdk_version: melidataTrackService.getPluginVersion(),
    });
    return null;
  }

  isParticipating(experiment, userAudiences) {
    if (experiment.audiences === undefined) return true; // Audiences not configured
    if (userAudiences === null) return false;
    return this.isUserInAudience(experiment.audiences, userAudiences);
  }

  isUserInAudience(experimentAudiences, userAudiences) {
    return experimentAudiences.some(a => userAudiences.includes(a));
  }

  static getNonParticipatingVariant() {
    return { id: NON_PARTICIPATING_VARIANT_ID, name: NON_PARTICIPATING_VARIANT_NAME };
  }
}

module.exports = AudiencesService;
