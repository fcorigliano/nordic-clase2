/* eslint-disable max-len */
const os = require('os');
const path = require('path');
const log = require('frontend-logger')('melidata');
const env = require('frontend-env');
const Track = require('../track');
const MelidataScriptsReloadService = require('./melidata-script-reload');

const melidataScriptsReloadService = new MelidataScriptsReloadService();

const NO_JAVASCRIPT_REGEX = /.*(SPICE|BB10|SAMSUNG-GT-C3322|SAMSUNG-GT-E2200|SAMSUNG-GT-S5222|SAMSUNG-GT-S3570|S3570XILH1|blackberry|symbian|opera.mini|windows.phone|Nokia[0-9][0-9]|Nokia[A-Z][0-9]|LG-C[0-9]|LG-T[0-9]).*/i;

const DEVICE_TYPE_REGEXS = {
  tablet: /.*(ipad|Silk.1.0.22.79|android(?!(.*mobile|.*kindle|.*A2107A|.*HP.7|.*opera.mini|.*HP.Slate.7|.*B1-710|.*GT-P3100|.*GT-P1000|.*IdeaTabA1000|.*gt-P3110|.*gt-P3113|.*NX008HD8G|.*ME172V|.*ME173X|.*AT300|.*MediaPad.7.Lite|.*B1-A71|.*A200|.*A100|.*SM-T210R|.*SM-T211|.*SM-T217S|.*SGPT12|.*SM-T310|.*K00U.Build))(?!(.*MMS-V))|xoom|sch-i800|playbook|tablet|gt-P5100|gt-P7500|gt-P7510|kindle.fire|.*KFOT.Build|.*KFTT.Build|.*KFJWI.Build|.*KFJWA.Build).*/i,
  mobile: /.*(blackberry|android|iphone|ipod|symb|googlebot-mobile|Playstation.Vita|kindle|symbian|windows.phone|BB10|Mobile.*Firefox|Nokia[0-9][0-9]|Nokia[A-Z][0-9]|LG-[A-Z][0-9]|SAMSUNG-GT|SPICE|Opera.Mini).*/i,
};

const DEVICE_TYPE_DEFAULT = 'desktop';

const BUSINESS_MAP = {
  mercadolivre: 'mercadolibre',
};

const SITE_MAP = {
  ar: 'MLA',
  br: 'MLB',
  co: 'MCO',
  cr: 'MCR',
  cl: 'MLC',
  do: 'MRD',
  ec: 'MEC',
  mx: 'MLM',
  pa: 'MPA',
  pt: 'MPT',
  uy: 'MLU',
  ve: 'MLV',
  bo: 'MBO',
  hn: 'MHN',
  gt: 'MGT',
  ni: 'MNI',
  py: 'MPY',
  pe: 'MPE',
  sv: 'MSV',
};

const BLOCKED_COOKIES = ['orgapi', 'orghash'];

const BLOCKED_HEADERS = ['cookie'];

const UNKNOWN = 'UNKNOWN';

let appVersion;
try {
  appVersion = require(path.join(path.resolve('./'), 'package.json')).version; // eslint-disable-line
} catch (e) {
  log.error('Application version cannot be determined');
}

let melidataPluginVersion;
try {
  melidataPluginVersion = require('../../package.json').version; // eslint-disable-line global-require
} catch (e) {
  if (env.FURY && env.PRODUCTION) {
    log.error('Melidata version cannot be determined');
  }
  melidataPluginVersion = 'UNKNOWN';
}

class MelidataTrackService {
  constructor() {
    this.application = {
      version: this.loadAppVersion(),
      server_hostname: this.loadHostname(),
      server_poolname: this.loadPoolName(),
      app_name: this.loadApplication(),
      sdk_version: {
        node_version: this.getPluginVersion(),
      },
    };
  }

  getPluginVersion() {
    return melidataPluginVersion;
  }

  loadPoolName() {
    const { SCOPE, APPLICATION } = process.env;
    const scope = SCOPE ? `-${SCOPE}` : '';

    if (APPLICATION) {
      return `${APPLICATION}${scope}`;
    }

    const {
      APP, DEPT, SERV, GAV, DATACENTER,
    } = process.env;

    if (!DEPT) {
      return UNKNOWN;
    }

    return `${DEPT}-${APP}-${SERV}${scope}-${GAV}-${DATACENTER}`;
  }

  loadHostname() {
    const { DNSNAME, HOSTNAME } = process.env;
    if (DNSNAME) {
      return DNSNAME;
    }

    if (HOSTNAME) {
      return HOSTNAME;
    }

    try {
      return os.hostname();
    } catch (e) {
      return UNKNOWN;
    }
  }

  loadApplication() {
    const { APPLICATION } = process.env;

    if (APPLICATION) {
      return APPLICATION;
    }

    return UNKNOWN;
  }

  loadAppVersion() {
    const { VERSION } = process.env;

    if (VERSION) {
      return VERSION; // Fury o Cloud VERSION
    }
    if (appVersion) {
      return appVersion; // App version defined in package.json
    }

    return UNKNOWN;
  }

  createNewTrack() {
    return new Track();
  }

  fillTrack(request, track) {
    const { hostname } = request;
    const cookies = this.getCookies(request);

    track.withApplicationData(this.application)
      .withApplicationData({ business: this.getBusiness(hostname, request) })
      .withApplicationData({ site_id: this.getSiteId(hostname, request) })
      .withUserData(this.getUserData(request, cookies))
      .withDeviceData(this.getDeviceData(request))
      .withHttpData({ cookies: this.getTrackeableCookies(request) })
      .withHttpData({ headers: this.getHeaders(request) })
      .withHttpData(this.getBasicHttpData(request));

    track.isJavascript = this.checkForJavascript(request);

    return track;
  }

  getHeaders(request) {
    const { headers } = request;
    const allowedHeaders = this.getAllowedHeaders();
    const filteredHeaders = {};

    Object.keys(headers).forEach((key) => {
      if (BLOCKED_HEADERS.indexOf(key) === -1 && allowedHeaders.indexOf(key) !== -1) {
        filteredHeaders[key] = headers[key];
      }
    });

    return filteredHeaders;
  }

  /**
   * Check if the request support javascript
   * @param request
   * @return
   */
  checkForJavascript(request) {
    let js = request.headers['x-device-js'];
    if (!js) {
      js = true;
      const userAgent = request.headers['user-agent'];
      if (userAgent && NO_JAVASCRIPT_REGEX.test(userAgent)) {
        js = false;
      }
    } else {
      js = Boolean(JSON.parse(js));
    }

    return js;
  }

  getSiteId(hostname, request) {
    let site;
    if (request.headers) {
      site = request.headers['x-meli-trace-site'];
      if (site != null && site !== '' && site.localeCompare(UNKNOWN, 'en', { sensitivity: 'accent' })) {
        return site;
      }
    }

    if (request.platform) {
      site = request.platform.siteId;
      return site;
    }

    const { cbtSiteId } = this.getCookies(request);
    if (cbtSiteId) {
      site = cbtSiteId.split('-')[0];
      return site;
    }

    const tokens = hostname.split('.');
    if (tokens.length <= 1) {
      site = '';
    } else {
      site = tokens[tokens.length - 1];
    }

    if (SITE_MAP[site]) {
      site = SITE_MAP[site];
    }

    if (this.isCbtRequest(hostname)) {
      site = 'CBT';
    }

    return site;
  }

  getBasicHttpData(request) {
    const ret = {
      http_url: `${request.protocol}://${request.hostname}${request.originalUrl.split('?')[0]}`,
    };

    const { referer } = request.headers;

    if (referer) {
      ret.http_referer = `${referer.split('?')[0]}`;
    }

    return ret;
  }

  /**
   * Add User-Agent to de data and set the platform based on
   * X-Device-Type header
   *
   * @param request
   * @return
   */
  getDeviceData(request) {
    const device = { platform: UNKNOWN };
    device.user_agent = request.headers['user-agent'];

    const platform = request.headers['x-meli-trace-platform'];
    if (platform != null && platform !== '' && platform.localeCompare(UNKNOWN, 'en', { sensitivity: 'accent' })) {
      device.platform = platform;
      return device;
    }
    if (!device.user_agent) {
      return device;
    }

    let deviceType = request.headers['x-device-type'];
    if (!deviceType) {
      deviceType = DEVICE_TYPE_DEFAULT;

      Object.keys(DEVICE_TYPE_REGEXS).some((key) => {
        if (DEVICE_TYPE_REGEXS[key].test(device.user_agent)) {
          deviceType = key;
          return true;
        }

        return false;
      });
    }

    if (deviceType === 'desktop') {
      device.platform = '/web/desktop';
    } else {
      device.platform = this.isDesktopVersionForced(request) ? '/web/desktop/forced' : '/web/mobile';
    }

    return device;
  }

  getPlatform(request) {
    return this.getDeviceData(request).platform;
  }

  isDesktopVersionForced(request) {
    const header = request.headers['x-device-forced-desktop'];

    return header && header === 'true';
  }

  isMobileStaticOn(request) {
    const header = request.headers['x-device-js'];
    let deviceSupportsJS;

    if (header) {
      deviceSupportsJS = header === 'true';
    } else {
      deviceSupportsJS = true;
    }

    return !deviceSupportsJS;
  }

  getBusiness(hostname, request) {
    let business;
    if (request.headers) {
      business = request.headers['x-meli-trace-bu'];
      if (business !== undefined && business !== '') {
        return business;
      }
    }
    const host = hostname.replace('.com', '');
    const tokens = host.split('.');
    const isMShops = request.get && request.get('x-mshops') === '1';

    if (isMShops) {
      business = 'mercadoshops';
    } else if (tokens.length === 0) {
      business = '';
    } else if (tokens[0] === 'envios' || tokens[1] === 'envios') {
      business = 'mercadoenvios';
    } else if (tokens.length === 1) {
      // eslint-disable-next-line prefer-destructuring
      business = tokens[0];
    } else if (tokens.length === 2) {
      if (hostname.endsWith('.com')) {
        // eslint-disable-next-line prefer-destructuring
        business = tokens[1]; // www.mercadolibre.com
      } else {
        // eslint-disable-next-line prefer-destructuring
        business = tokens[0];// mercadolibre.com.ar
      }
    } else if (tokens.length > 2) {
      // eslint-disable-next-line prefer-destructuring
      business = tokens[1];
    }

    if (BUSINESS_MAP[business]) {
      business = BUSINESS_MAP[business];
    }

    return business;
  }

  /**
   * Get all cookies without the blocked cookies
   * @param {object} request
   * @return {object}
   */
  getCookies(request) {
    const cookies = request.cookies || {};
    const filteredCookies = Object.keys(cookies).reduce((cc, key) => {
      if (BLOCKED_COOKIES.indexOf(key) === -1) {
        cc[key] = cookies[key];
      }
      return cc;
    }, {});

    return filteredCookies;
  }

  getTrackeableCookies(request) {
    const cookies = request.cookies || {};
    const allowedCookies = this.getAllowedCookies();
    const filteredCookies = Object.keys(cookies).reduce((cc, c) => {
      if (BLOCKED_COOKIES.indexOf(c) === -1 && allowedCookies.indexOf(c) !== -1) {
        cc[c] = cookies[c];
      }
      return cc;
    }, {});

    return filteredCookies;
  }

  getUserData(request, providedCookies) {
    const userData = {};
    const cookies = providedCookies || this.getCookies(request);
    const tags = [];
    let d2Id = request.headers['x-d2id'];

    if (!d2Id) {
      d2Id = request.headers['x-request-device-id'];
      if (!d2Id) {
        d2Id = cookies._d2id;
        if (d2Id) {
          d2Id = d2Id.replace(/-n$/g, '');
        }
      }
    }

    if (d2Id) {
      userData.uid = d2Id;
    }
    const userId = (request.user && request.user.id) || cookies.orguseridp;
    const userNick = (request.user && request.user.nickname) || cookies.orgnickp;
    const operatorId = (request.user && request.user.operatorId);
    const isTestUser = (request.user && request.user.test);
    const rootId = (request.user && request.user.rootId);
    if (request.user || (userId && this.isUserLogged(userNick))) {
      userData.user_id = userId;
    }

    if (operatorId) {
      userData.user_id = operatorId;
      tags.push('operator');
      if (rootId) {
        userData.root_user_id = rootId;
      }
    }

    if (isTestUser) {
      tags.push('test_user');
    }

    userData.user_tags = tags;

    if (request.melidataCookieConsents && Object.keys(request.melidataCookieConsents).length > 0) {
      userData.privacy_consents = request.melidataCookieConsents;
    }

    return userData;
  }

  getScriptUrl(isSecure = false) {
    return melidataScriptsReloadService.getScriptUrl(isSecure);
  }

  getPixelUrl() {
    return melidataScriptsReloadService.getPixelUrl();
  }

  getAllowedHeaders() {
    return melidataScriptsReloadService.getHeadersWhiteList();
  }

  getAllowedCookies() {
    return melidataScriptsReloadService.getCookiesWhiteList();
  }

  isUserLogged(userNick) {
    return userNick && userNick !== '0';
  }

  isCbtRequest(hostname) {
    return hostname === 'global-selling.mercadolibre.com';
  }

  getTraceHeader(req, headerKey) {
    if (req.headers) {
      return req.headers[headerKey];
    }
    return null;
  }
}

module.exports = MelidataTrackService;
