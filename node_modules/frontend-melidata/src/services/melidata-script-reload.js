const config = require('frontend-config');
const restclient = require('frontend-restclient');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');
const querystring = require('querystring');
const log = require('frontend-logger')('melidata');

const {
  JS_SCRIPT_NAME,
  MAJOR_JS_VERSION,
  DEFAULT_SCRIPT_URL,
  DEFAULT_SCRIPT_URL_SECURE,
  DEFAULT_PIXEL_URL,
  DEFAULT_RELOAD_INTERVAL,
  CONFIG_PROPERTIES_URL,
  DEFAULT_DATADOG_TRACKING,
} = require('../../config/melidata');

const { NODE_ENV } = process.env;

/**
 * This service is responsible for reload the scripts urls from swift
 * this enable to change the scripts without the need of re-deploy and give us the
 * possibility to omit caches changing the names of files in runtime
 *
 * The bucket to be used is AUTH_83f65df429cb49c4bd607dfecc29de90
 *
 * tenant: melidata
 * tenant_id: 83f65df429cb49c4bd607dfecc29de90
 *
 */
class MelidataScriptsReloaderService {
  constructor() {
    this.isEnabled = this.getConfig(config.get('melidata.reloadClientJS.isEnabled'), NODE_ENV === 'production');

    this.reloadInterval = this.getConfig(config.get('melidata.reloadClientJS.reloadInterval'), DEFAULT_RELOAD_INTERVAL);

    this.configURL = this.getConfig(config.get('melidata.reloadClientJS.configURL'), CONFIG_PROPERTIES_URL);

    this.defaultProperties = {
      scriptURL: this.getConfig(config.get('melidata.reloadClientJS.scriptURL'), DEFAULT_SCRIPT_URL),
      scriptURLSSl: this.getConfig(config.get('melidata.reloadClientJS.scriptURLSSL'), DEFAULT_SCRIPT_URL_SECURE),
      pixelURL: this.getConfig(config.get('melidata.reloadClientJS.pixelURL'), DEFAULT_PIXEL_URL),
      dataDogTracking: this.getConfig(config.get('melidata.reloadClientJS.dataDogTracking'), DEFAULT_DATADOG_TRACKING),
      headersWhiteList: ['host', 'x-device-js', 'x-platform', 'x-nginx-host'],
      cookiesWhiteList: ['orgnickp', 'orgpms', 'ml_ga'],
    };

    // eslint-disable-next-line prefer-object-spread
    this.properties = Object.assign({}, this.defaultProperties);
    this.run();
  }

  getConfig(conf, defaultConf) {
    let retConf = conf;

    if (typeof retConf === 'undefined') {
      retConf = defaultConf;
    }

    if (typeof retConf === 'string') {
      retConf = retConf.replace('#mayorJSVersion#', MAJOR_JS_VERSION).replace('#jsScriptName', JS_SCRIPT_NAME);
    }

    return retConf;
  }

  getScriptUrl(isSsl = false) {
    if (isSsl) {
      return this.properties.scriptURLSSl; // lower "l" is just fine :D
    }

    return this.properties.scriptURL;
  }

  getPixelUrl() {
    return this.properties.pixelURL;
  }

  getHeadersWhiteList() {
    return this.properties.headersWhiteList;
  }

  getCookiesWhiteList() {
    return this.properties.cookiesWhiteList;
  }

  run() {
    if (this.isEnabled) {
      setInterval(() => this.exec(), this.reloadInterval);
      this.exec();
    }
  }

  exec() {
    const request = restclient({
      timeout: 2000,
    });

    return request
      .get(this.configURL, {
        context: buildFlowStarterContext(),
      })
      .then((response) => {
        if (response.status === 200) {
          /* Response sample
           scriptURL=http://analytics.mlstatic.com/melidata/js/3/0.0.38/melidata.min.js
           scriptURLSSl=https://a248.e.akamai.net/analytics.mlstatic.com/melidata/js/3/0.0.38/melidata.min.js
           headersWhiteList=host,x-device-js,x-platform,x-nginx-host
           cookiesWhiteList=orgnickp,LAST_SEARCH,vip_c,splash,pmsctx,ml_ga,poison_cookie,zipcode,_prefpm,orgpms,pmsword
           */
          const data = response.data.split('\n')
            .reduce((dd, d) => Object.assign(dd, querystring.parse(d, ';', '=')), {});

          // eslint-disable-next-line prefer-object-spread
          this.properties = Object.assign({}, this.defaultProperties, data);

          this.properties.headersWhiteList = (this.properties.headersWhiteList || '').split(',');
          this.properties.cookiesWhiteList = (this.properties.cookiesWhiteList || '').split(',');
        } else {
          log.error(`Response from [${this.configURL}] was not 200 [status: ${response.status}]`);
        }
      })
      .catch((error) => {
        log.warn(`Error updating melidata config from [${this.configURL}]. Error: [${error.message}]`);
      });
  }
}

module.exports = MelidataScriptsReloaderService;
