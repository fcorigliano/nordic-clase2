const crypto = require('crypto');
const BigInteger = require('node-biginteger');

const ALGORITHM = 'sha1';
const BASE = 1000;
const BI_BASE = BigInteger.fromString(String(BASE));

class HashingBaseService {}

HashingBaseService.getBase = function getBase() {
  return BASE;
};

HashingBaseService.getHash = function getHash(id, salt) {
  const input = `${id}${salt}`;
  const digest = crypto.createHash(ALGORITHM).update(input).digest();

  return BigInteger.fromBuffer(1, digest);
};

HashingBaseService.getWhitelistedVariant = function getWhitelistedVariant(id, userId, exp) {
  return exp.variants ? exp.variants.find(i => (i.whitelisted_seeds) && (i.whitelisted_seeds.includes(`${id}`) || i.whitelisted_seeds.includes(`${userId}`))) : null;
};

HashingBaseService.getApplicableVariant = function getApplicableVariant(
  id,
  e,
  site, platform, userId,
  /* , keepVariantsCondition = null */
) {
  if (!id) {
    return null;
  }

  const whitelistedVariant = this.getWhitelistedVariant(id, userId, e);
  if (whitelistedVariant) {
    return whitelistedVariant;
  }

  const hash = HashingBaseService.getHash(id, e.name);
  const index = parseInt(hash.remainder(BI_BASE).toString(), 10);

  const { variants } = e;
  variants.sort((a, b) => a.id > b.id);

  // if (keepVariantsCondition) {
  //   variants = this.getFilteredVariants(variants, keepVariantsCondition);
  // }

  const limits = variants.reduce((acc, v) => {
    acc.push(
      (acc.length ? acc[acc.length - 1] : 0)
      + parseInt(HashingBaseService.getVariantExposure(v, site, platform) * BASE, 10),
    );
    return acc;
  }, []);

  const position = limits.findIndex((v) => index < v);

  return variants[position];
};

HashingBaseService.getVariantExposure = function getVariantExposure(variant, site, platform) {
  if (Array.isArray(variant.exposure_configuration) && variant.exposure_configuration.length) {
    const exposureConfigurationList = variant.exposure_configuration;
    const siteAndPlatformKey = `${site}-${platform}`;
    let expConf = exposureConfigurationList.find(
      (conf) => (conf.key === siteAndPlatformKey),
    );
    if (typeof expConf === 'undefined') {
      expConf = exposureConfigurationList.find(
        (conf) => (conf.key === platform || conf.key === site),
      );
    }

    if (typeof expConf !== 'undefined') {
      return expConf.exposure;
    }
  }

  const { exposure } = variant;
  return exposure;
};

module.exports = HashingBaseService;
