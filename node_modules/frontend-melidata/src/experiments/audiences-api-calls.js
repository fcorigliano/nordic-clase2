const config = require('frontend-config');
const restclient = require('frontend-restclient');
const log = require('frontend-logger')('melidata');

const {
  MELIDATA_SDK_PRODUCTION,
  MELIDATA_ON_PRODUCTION,
  DEFAULT_MELIDATA_MP_ENDPOINT,
} = require('../../config/melidata');

const AUDIENCES_BASE_URL = 'incentive-engine/audience-api/v1';

class AudiencesApiCalls {
  doMockedGetAudiences() {
    const audiences = config.get('melidata.audiences') || {};
    return Promise.resolve(audiences);
  }

  doProductiveGetAudiences(userId, meliContext) {
    const audiencesUrl = this.getUrlWithParams(userId);
    return this.apiCall(audiencesUrl, meliContext)
      .then((result) => {
        if (result !== null && result.status === 200 && result.data) {
          return result.data.audiences;
        }
        return null;
      });
  }

  doGetAudiences(userId, meliContext) {
    return MELIDATA_SDK_PRODUCTION || MELIDATA_ON_PRODUCTION
      ? this.doProductiveGetAudiences(userId, meliContext) : this.doMockedGetAudiences();
  }

  apiCall(url, meliContext) {
    const request = restclient({
      timeout: 1000,
      baseURL: `${DEFAULT_MELIDATA_MP_ENDPOINT}/${AUDIENCES_BASE_URL}/`,
    });

    return request
      .get(url, {
        context: meliContext,
        headers: {
          'Content-Type': 'application/json',
        },
        retry: {
          maxRetries: 1,
          delay: 1000,
          maxDelay: 5000,
          factor: 2,
        },
        cache: {
          maxSize: 20000,
        },
      })
      .then((response) => ({
        status: response.status,
        data: response.data,
      }))
      .catch((err) => {
        log.error(`Cannot do the API call to audiences: ${err}`);
        return null;
      });
  }

  getUrlWithParams(userId) {
    return `users/${userId}/audiences`;
  }
}

module.exports = AudiencesApiCalls;
