const sanitizer = require('xss');

function getSendTrackCode(track) {
  return `
melidata("send", "${track.type}", {
  path: "${track.path}",
  data: {}
});`;
}

function template(data) {
  const {
    track, scriptURL, validation, completeTrackFunction, nonceCSP,
  } = data;

  if (!track.isJavascript) {
    return `
<!-- Melidata track:
${JSON.stringify(track.dump(), null, 2)}
-->`;
  }

  let out = '';

  out += `
console.log('View Track:', ${sanitizer(JSON.stringify(track.dump()))});
(function(w, r) {
  w[r] = w[r] || function() {
      (w[r].q = w[r].q || []).push(arguments)
    }
})(window,'melidata');`;

  out += `
melidata("add", "id", "${track.id}");
melidata("add", "server_id", "${track.id}" );
melidata("add", "application", ${sanitizer(JSON.stringify(track.application))});
melidata("add", "user", ${sanitizer(JSON.stringify(track.user))});
melidata("add", "device", ${sanitizer(JSON.stringify(track.device))});
melidata("add", "platform", ${sanitizer(JSON.stringify(track.platform))});
melidata("add", "event_data", ${sanitizer(JSON.stringify(track.event_data))});`;

  if (track.hasExperiments()) {
    out += `
melidata("add", "experiments", ${sanitizer(JSON.stringify(track.experiments))});
melidata("add", "experiments_timestamp", "${track.experiments_timestamp}");`;
  }

  if (completeTrackFunction) {
    out += `
if (typeof window['${completeTrackFunction}'] === 'function') {
  window['${completeTrackFunction}']();
}`;
  }

  out += `
(function(d,u){
  var i = d.createElement('iframe');
  (i.frameElement || i).style.cssText = "width: 0; height: 0; border: 0; position: absolute";
  i.src = "about:blank";
  i.id = "MelidataIframe";
  var t = d.getElementsByTagName('script')[0];
  t.parentNode.insertBefore(i, t);
  var doc = i.contentWindow.document;
  var script = doc.createElement('script');
  script.text = [
    'var initMelidata = function(){',
      'window.inDapIF = true;',
      'var js = document.createElement(\\'script\\');',
      'js.src = \\'' + u + '\\';',
      'document.documentElement.appendChild(js);',
    '};',
    'setTimeout(initMelidata,0);',
  ].join('');
  doc.documentElement.appendChild(script);
})(document,'${scriptURL}');`;

  if ('passed' in validation === false) {
    out += '\nconsole.log("It was not possible to validate the track against the Catalog");';
  } else if (validation && validation.passed === false) {
    out += `\nconsole.log("Track is not valid (version: ${validation.version})");`;
    if (Array.isArray(validation.messages)) {
      validation.messages.forEach((msg) => {
        out += `\nconsole.log("${track.path}: ${msg}");`;
      });
    }
  } else {
    out += `console.log("Track ${track.path} is valid (version: ${validation.version})")`;
  }

  if (!track.isDeferred) {
    out += getSendTrackCode(track);
  }

  return `<script${nonceCSP ? ` nonce="${nonceCSP}"` : ''}>${out}</script>`;
}

module.exports = template;
