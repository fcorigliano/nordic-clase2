const restclient = require('frontend-restclient');
const log = require('frontend-logger')('melidata');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');

const {
  DEFAULT_MELIDATA_ML_ENDPOINT,
} = require('../../config/melidata');

const SIGNATURE_URL = '/melidata/internal/signature_key';

class SignatureApiCalls {
  constructor() {
    this.url = `${DEFAULT_MELIDATA_ML_ENDPOINT}${SIGNATURE_URL}`;
  }

  getSignatureKey() {
    return this.getProductiveSignKey();
  }

  getProductiveSignKey() {
    return this.apiCall()
      .then((result) => {
        if (result && result.status === 200) {
          if (result.data && result.data.signature_key) {
            return result.data;
          }
        }
        return null;
      });
  }

  apiCall() {
    const request = restclient({
      timeout: 1000,
    });
    return request
      .get(this.url, {
        context: buildFlowStarterContext(),
        headers: {
          'Content-Type': 'application/json',
        },
        retry: {
          maxRetries: 1,
          delay: 1000,
          maxDelay: 5000,
          factor: 2,
        },
      })
      .then((response) => (
        {
          status: response.status,
          data: response.data,
        }
      ))
      .catch((err) => {
        log.error(`ERROR: Couldn't get Melidata track signature Key. This host won't be sending tracks propertly: ${err}`);

        return null;
      });
  }
}

module.exports = SignatureApiCalls;
