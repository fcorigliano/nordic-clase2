import type { RequestHandler } from 'express';
import type { ComponentType, FunctionComponent, ReactNode } from 'react';
import { I18nBase } from './src/I18nBase';

declare global {
  namespace Express {
    interface Request {
      /**
       * Custom locale to override the language used by default by i18n
       *
       * @example 'pt-BR'
       */
      locale?: string;
    }
  }
}

type Replacement = string | number | boolean;

export type Translations = Record<string, string[]>;

export interface I18nOptions {
  translations: Translations;
  locale?: string;
}

export interface I18nJSXSettings {
  /**
   * HTML tags to be injected to the text.
   * @example { 1: '<strong>', 2: '</strong>' }
   */
  tags: Record<string | number, string>;

  /**
   * Replacement strings to inject into text.
   * @example { 0: 'John' }
   */
  replacements?: Record<string | number, string>;

  /**
   * HTML tag which will be wrapping the resulting JSX Element.
   * @default 'div'
   * @example 'p'
   */
  wrapper?: keyof JSX.IntrinsicElements;

  /**
   * Classname that can be injected to the resulting JSX Element.
   * @example 'awesome-jsx-text'
   */
  className?: string;
}

export interface I18nPluralJSXSettings extends I18nJSXSettings {
  /**
   * Number to determine if singular or plural text should be used.
   */
  quantity: number;
}

export class I18n extends I18nBase {
  jsx: {
    /**
     * Given a text and JSX Settings, return the translation as a JSX Element.
     * @param text Text key to search in translations.
     * @param settings JSX Settings to setup final JSX Element
     * @return The JSX Element to render.
     *
     * @example
     * const settings = {
     *   tags: {
     *     0: '<strong>',
     *     1: '</strong>',
     *   },
     * };
     * i18n.jsx.gettext('Welcome to {0}Mercado Libre{1}', settings);
     */
    gettext(text: string, settings: I18nJSXSettings): JSX.Element;

    /**
     * Given singular and plural texts, and JSX Settings, return the translation as a JSX Element.
     * @param singularText Singular text key to search in translations.
     * @param pluralText Plural text key to search in translations.
     * @param settings JSX Settings to setup final JSX Element
     * @return The JSX Element to render.
     *
     * @example
     * const settings = {
     *   wrapper: 'div',
     *   tags: {
     *     2: '<strong>',
     *     3: '</strong>',
     *   },
     *   replacements: {
     *     0: 'John',
     *     1: 6,
     *   },
     *   quantity: 6,
     * };
     * i18n.jsx.ngettext('{0}, You have {1} {2}message{3}', '{0}, You have {1} {2}messages{3}', settings);
     */
    ngettext(singularText: string, pluralText: string, settings: I18nPluralJSXSettings): JSX.Element;

    /**
     * Given a context, text and JSX Settings, return the translation for the given context as a JSX Element.
     * @param context The context in which this text will be displayed.
     * @param text Text key to search in translations.
     * @param settings JSX Settings to setup final JSX Element
     * @return The JSX Element to render.
     *
     * @example
     * const settings = {
     *   tags: {
     *     1: '<strong>',
     *     2: '</strong>',
     *   },
     *   replacements: {
     *     0: 'John',
     *   },
     * };
     * i18n.jsx.ngettext('question', '{2}This{3} is {0}, right {0}?', settings);
     */
    pgettext(context: string, text: string, settings: I18nJSXSettings): JSX.Element;

    /**
     * Given singular and plural texts, and JSX Settings, return the translation for the given context as a JSX Element.
     * @param context The context in which this text will be displayed.
     * @param singularText Singular text key to search in translations.
     * @param pluralText Plural text key to search in translations.
     * @param settings JSX Settings to setup final JSX Element
     * @return The JSX Element to render.
     *
     * @example
     * const settings = {
     *   wrapper: 'div',
     *   tags: {
     *     2: '<strong>',
     *     3: '</strong>',
     *   },
     *   replacements: {
     *     0: 'John',
     *     1: 6,
     *   },
     *   quantity: 6,
     * };
     * i18n.jsx.npgettext('information', '{0}, {2}You{3} have {1} message', '{0}, {2}You{3} have {1} messages', settings);
     */
    npgettext(context: string, singularText: string, pluralText: string, settings: I18nPluralJSXSettings): JSX.Element;
  };
}

declare global {
  namespace Express {
    interface Request {
      i18n?: I18n;
      translations?: Translations;
    }
  }
}

/**
 * An i18n middleware that create an I18n module instance per request.
 * @param config Configuration needed to setup i18n instance.
 */
export function i18nMiddleware(config: i18nMiddlewareConfig): RequestHandler;

export interface i18nMiddlewareConfig {
  /**
   * Folder route where the keys will be extracted and read by i18nMiddleware. Include the `__dirname` of your app.
   * @example `${__dirname}/../app`
   * @default '/app'
   */
  srcPath?: string;
}

type Props = {
  i18n: I18n;
  children: ReactNode;
};

export const I18nProvider: FunctionComponent<Props>;

export const useI18n: () => { i18n: I18n };

export function injectI18n<P = {}, S = {}>(Component: ComponentType<P>): FunctionComponent<P>;
