/**
 * Module dependencies
 */
const I18n = require('./lib/I18n'); // eslint-disable-line import/no-unresolved, import/extensions
const translations = require('./src/translations');
const { countryLocales } = require('./src/locales');

/**
 * Set up i18n middleware
 */
function i18nMiddleware(config = {}) {
  // Process translations before set the real middleware
  const tr = translations(config);
  // Set the real middleware
  // eslint-disable-next-line no-shadow
  return function i18nMiddleware(req, res, next) {
    /**
     * Use a given locale or a country locale or the default language (the keys).
     * Eg.: en-US => en => keys.
     * In a near future will support default language.
     * Eg.: en-US => en => es.
     */
    const locale = req.locale || (req.platform && countryLocales[req.platform.countryId]);
    const language = locale && locale.split('-')[0];
    // If a locale has not translations, try to use its languange or an empty translations (use the keys).
    req.translations = tr[locale] || tr[language] || {};
    req.i18n = new I18n({
      translations: req.translations,
      locale,
    });
    next();
  };
}

/**
 * Expose i18nMiddleware
 */
module.exports = i18nMiddleware;
