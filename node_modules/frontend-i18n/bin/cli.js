#!/usr/bin/env node

const { program } = require('commander');
const logger = require('frontend-logger')('frontend-i18n');
const readline = require('readline');

const { version } = require('../package.json');
const m10e = require('../src/m10e');

program.version(version);

program
  .command('gettext')
  .description('Scan sources code and generate source message file')
  .action(() => {
    m10e.generateSources(m10e.messagesFilename, (error) => {
      if (error) {
        logger.error(error);
      } else {
        logger.info('Scan and generate file success');
      }
    });
  });

program
  .command('download')
  .description('Download translations from https://i18n.adminml.com')
  .option('-p, --path <dir>', 'Specified directory to download the translations')
  .action((option) => {
    m10e.downloadTranslations(option.path, (error) => {
      if (error) {
        logger.error(error);
      } else {
        logger.info('Download success');
      }
    });
  });

program
  .command('upload')
  .description('Upload translations to https://i18n.adminml.com')
  .option('-f, --force', 'Force upload, removing source messages not present in the current upload')
  .action((option) => {
    const errExit = (error) => {
      if (error) logger.error(error);
      logger.error('Force upload canceled');
      process.exit(0);
    };

    const succExit = () => {
      logger.info('Upload success');
      process.exit(0);
    };

    const upload = (successCb, errorCallback) => {
      m10e.generateSources(m10e.messagesFilename, (error) => {
        if (error) {
          errorCallback(error);
        } else {
          logger.info('Scan and generate file success');
          m10e.uploadSources(option.force, (err) => {
            if (err) {
              errorCallback(err);
            } else {
              successCb();
            }
          });
        }
      });
    };

    if (option.force) {
      const rl = readline.createInterface(process.stdin, process.stdout);
      rl.setPrompt('Force upload will remove all keys not found in the current branch. This action must be executed form an integration branch such as master. Are you sure to continue? (y/n)? ');
      rl.prompt();
      rl.on('line', (line) => {
        switch (line.trim().toLowerCase()) {
          case 'y':
            upload(succExit, errExit);
            break;
          case 'n':
            rl.close();
            break;
          default:
            rl.prompt();
            break;
        }
      }).on('close', () => {
        errExit();
      });
    } else {
      upload(succExit, errExit);
    }
  });

program.parse(process.argv);
