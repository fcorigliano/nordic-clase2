type Replacement = string | number | boolean;

type Translations = Record<string, string[]>;

interface I18nOptions {
  translations: Translations;
  locale?: string;
}

export class I18nBase {
  constructor(config: I18nOptions);

  /**
   * Given a text, return the translation with its arguments replaced.
   * @param text Text key to search in translations.
   * @param replacements Replacement strings to inject into text.
   * @return The text translated and replaced.
   *
   * @example gettext('This is {0}, right {0}?', 'John') // This is John, right John?
   */
  gettext(text: string, ...replacements: Replacement[]): string;

  /**
   * Given a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
   * @param singularText Singular text key to search in translations.
   * @param pluralText Plural text key to search in translations.
   * @param quantity Number to determine if singular or plural text should be used.
   * @param replacements Replacement strings to inject into text.
   * @return The text translated and replaced.
   *
   * @example ngettext('{0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6]) // John, You have 6 messages
   */
  ngettext(singularText: string, pluralText: string, quantity: number, ...replacements: Replacement[]): string;

  /**
   * Given a context and a text, return the translation with its arguments replaced.
   * @param context The context in which this text will be displayed.
   * @param text Text key to search in translations.
   * @param replacements Replacement strings to inject into text.
   * @return The text translated and replaced.
   *
   * @example pgettext('question', 'This is {0}, right {0}?', 'John') // This is John, right John?
   */
  pgettext(context: string, text: string, ...replacements: Replacement[]): string;

  /**
   * Given a context, a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
   * @param context The context in which this text will be displayed.
   * @param singularText Singular text key to search in translations.
   * @param pluralText Plural text key to search in translations.
   * @param quantity Number to determine if singular or plural text should be used.
   * @param replacements Replacement strings to inject into text.
   * @return The text translated and replaced.
   *
   * @example npgettext('information', '{0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6]) // John, You have 6 messages
   */
  npgettext(context: string, singularText: string, pluralText: string, quantity: number, ...replacements: Replacement[]): string;
}
