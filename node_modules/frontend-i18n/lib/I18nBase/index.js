/**
 * I18nBase (without React)
 */
class I18nBase {
  constructor(options = {}) {
    this.translations = options.translations;
    this.locale = options.locale;
  }

  /**
   * Given some arrays, convert those in a unique array
   * Usage: flattenArray([[1], [2], [[2,4],2]]); // [1,2,2,4,2]
   * @return {array} The array flatten
   */
  flattenArray(arrays) {
    return arrays.reduce(
      (acc, val) => acc.concat(
        Array.isArray(val) ? this.flattenArray(val) : val,
      ), [],
    );
  }

  /**
   * Given a text with arguments, replace those arguments in the text.
   * Usage: replaceArguments('This is {0}, right {0}?', 'John'); // This is John, right John?
   * @return {string} The text modified
   */
  replaceArguments(...args) {
    let out = args[0];
    const replacements = [];

    args.forEach((argument, index) => {
      replacements.push(args[index + 1]);
    });

    replacements.forEach((replacement, index) => {
      // Use a global regex replace because of possible infinite loops with while implementation
      out = out.replace(new RegExp(`\\{${index}\\}`, 'g'), replacement);
    });

    return out;
  }

  /**
   * Given a text and a msgctxt, returns the translation id.
   * Usage: getTranslationId('context', 'My message'); // 'context\u0004My message'
   * It is using the unicode '\u0004' as prefix because po2json package has this format for context keys.
   * @see https://github.com/mikeedwards/po2json/blob/3c45ebf19fe5ae566d262710b5dedb28f0c7bd7b/lib/parse.js#L39
   * @return {string} The translation id.
   */
  getTranslationId(text, msgctxt) {
    return typeof msgctxt === 'string' ? `${msgctxt}\u0004${text}` : text;
  }

  /**
   * Given a text, returns the translation.
   * Usage: getTranslation('My message'); // My message
   * @return {string} The translation
   */
  getTranslation(text, msgctxt) {
    const id = this.getTranslationId(text, msgctxt);
    const tr = this.translations[id];
    if (tr && tr[1] && tr[1].length > 0) {
      return tr[1];
    }
    return text;
  }

  /**
   * Given a text and a quantity, returns the translation of the text depending on whether it is singular or plural.
   * Usage: getPluralTranslation('You have {0} message', 'You have {0} messages', 3); // You have 3 messages'
   * @return {string} The translation
   */
  getPluralTranslation(text, nText, quantity, msgctxt) {
    const id = this.getTranslationId(text, msgctxt);
    const tr = this.translations[id];

    // Singular text
    if (quantity === 1) {
      if (tr && tr[1] && tr[1].length) {
        return tr[1];
      }
      return text;
    }

    // Plural text
    if (tr && tr[2] && tr[2].length) {
      return tr[2];
    }

    return nText;
  }

  /**
   * Given a text, return the translation with its arguments replaced.
   * Usage: gettext('This is {0}, right {0}?', 'John') // This is John, right John?
   * @return {string} The text modified and replaced
   */
  gettext(text, ...replacements) {
    const translation = this.getTranslation(text);
    return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
  }

  /**
   * Given a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
   * Usage: ngettext('{0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6])
   * // John, You have 6 messages
   * @return {string} The text modified and replaced
   */
  ngettext(text, nText, quantity, ...replacements) {
    const translation = this.getPluralTranslation(text, nText, quantity);
    return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
  }

  /**
   * Given a context and a text, return the translation with its arguments replaced.
   * Usage: pgettext('question', This is {0}, right {0}?', 'John') // This is John, right John?
   * @return {string} The text modified and replaced
   */
  pgettext(msgctxt, text, ...replacements) {
    const translation = this.getTranslation(text, msgctxt);
    return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
  }

  /**
   * Given a context, a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
   * Usage: npgettext('information', {0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6])
   * // John, You have 6 messages
   * @return {string} The text modified and replaced
   */
  npgettext(msgctxt, text, nText, quantity, ...replacements) {
    const translation = this.getPluralTranslation(text, nText, quantity, msgctxt);
    return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
  }
}

/**
 * Expose I18n
 */
module.exports = I18nBase;
