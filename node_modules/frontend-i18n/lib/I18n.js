module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var i18nJsxCreator = __webpack_require__(3);

var I18nBase = __webpack_require__(5);
/**
 * I18n
 */


var I18n = /*#__PURE__*/function (_I18nBase) {
  _inherits(I18n, _I18nBase);

  var _super = _createSuper(I18n);

  function I18n() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, I18n);

    _this = _super.call(this, options);
    _this.jsx = {
      gettext: function gettext(text, settings) {
        if (!settings) return null;

        var translation = _this.getTranslation(text);

        return i18nJsxCreator.create(translation, settings);
      },
      ngettext: function ngettext(text, nText, settings) {
        if (!settings) return null;

        var translation = _this.getPluralTranslation(text, nText, settings.quantity);

        return i18nJsxCreator.create(translation, settings);
      },
      pgettext: function pgettext(msgctxt, text, settings) {
        if (!settings) return null;

        var translation = _this.getTranslation(text, msgctxt);

        return i18nJsxCreator.create(translation, settings);
      },
      npgettext: function npgettext(msgctxt, text, nText, settings) {
        if (!settings) return null;

        var translation = _this.getPluralTranslation(text, nText, settings.quantity, msgctxt);

        return i18nJsxCreator.create(translation, settings);
      }
    };
    return _this;
  }

  return _createClass(I18n);
}(I18nBase);
/**
 * Expose I18n
 */


module.exports = I18n;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { REACT_ELEMENT_TYPE || (REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103); var defaultProps = type && type.defaultProps, childrenLength = arguments.length - 3; if (props || 0 === childrenLength || (props = { children: void 0 }), 1 === childrenLength) props.children = children;else if (childrenLength > 1) { for (var childArray = new Array(childrenLength), i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) for (var propName in defaultProps) { void 0 === props[propName] && (props[propName] = defaultProps[propName]); } else props || (props = defaultProps || {}); return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: void 0 === key ? null : "" + key, ref: null, props: props, _owner: null }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var React = __webpack_require__(0);

var I18nJsx = __webpack_require__(4); // This class exists only not to include the React scope in the i18n class file.


var i18nJsxCreator = /*#__PURE__*/function () {
  function i18nJsxCreator() {
    _classCallCheck(this, i18nJsxCreator);
  }

  _createClass(i18nJsxCreator, null, [{
    key: "create",
    value: function create(text, settings) {
      return /*#__PURE__*/_jsx(I18nJsx, {
        crowdinKey: text,
        settings: settings
      });
    }
  }]);

  return i18nJsxCreator;
}();

module.exports = i18nJsxCreator;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) { REACT_ELEMENT_TYPE || (REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103); var defaultProps = type && type.defaultProps, childrenLength = arguments.length - 3; if (props || 0 === childrenLength || (props = { children: void 0 }), 1 === childrenLength) props.children = children;else if (childrenLength > 1) { for (var childArray = new Array(childrenLength), i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } if (props && defaultProps) for (var propName in defaultProps) { void 0 === props[propName] && (props[propName] = defaultProps[propName]); } else props || (props = defaultProps || {}); return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: void 0 === key ? null : "" + key, ref: null, props: props, _owner: null }; }

var React = __webpack_require__(0);

function I18nJsx(props) {
  var crowdinKey = props.crowdinKey,
      settings = props.settings;

  var interpolate = function interpolate(str, values) {
    return str.replace(/{(\w+)}/g, function (match, expr) {
      return values[expr] || match;
    });
  };

  var Wrapper = settings.wrapper || 'div'; // Replace the html tags

  var interpolated = interpolate(crowdinKey, settings.tags); // Replace other placeholders if present. For the cases of ngettext, pgettext, npgettext.

  if (settings.replacements) {
    interpolated = interpolate(interpolated, settings.replacements);
  }

  return /*#__PURE__*/_jsx(Wrapper, {
    dangerouslySetInnerHTML: {
      __html: interpolated
    },
    className: settings.className
  });
}

module.exports = I18nJsx;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * I18nBase (without React)
 */
var I18nBase = /*#__PURE__*/function () {
  function I18nBase() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, I18nBase);

    this.translations = options.translations;
    this.locale = options.locale;
  }
  /**
   * Given some arrays, convert those in a unique array
   * Usage: flattenArray([[1], [2], [[2,4],2]]); // [1,2,2,4,2]
   * @return {array} The array flatten
   */


  _createClass(I18nBase, [{
    key: "flattenArray",
    value: function flattenArray(arrays) {
      var _this = this;

      return arrays.reduce(function (acc, val) {
        return acc.concat(Array.isArray(val) ? _this.flattenArray(val) : val);
      }, []);
    }
    /**
     * Given a text with arguments, replace those arguments in the text.
     * Usage: replaceArguments('This is {0}, right {0}?', 'John'); // This is John, right John?
     * @return {string} The text modified
     */

  }, {
    key: "replaceArguments",
    value: function replaceArguments() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var out = args[0];
      var replacements = [];
      args.forEach(function (argument, index) {
        replacements.push(args[index + 1]);
      });
      replacements.forEach(function (replacement, index) {
        // Use a global regex replace because of possible infinite loops with while implementation
        out = out.replace(new RegExp("\\{".concat(index, "\\}"), 'g'), replacement);
      });
      return out;
    }
    /**
     * Given a text and a msgctxt, returns the translation id.
     * Usage: getTranslationId('context', 'My message'); // 'context\u0004My message'
     * It is using the unicode '\u0004' as prefix because po2json package has this format for context keys.
     * @see https://github.com/mikeedwards/po2json/blob/3c45ebf19fe5ae566d262710b5dedb28f0c7bd7b/lib/parse.js#L39
     * @return {string} The translation id.
     */

  }, {
    key: "getTranslationId",
    value: function getTranslationId(text, msgctxt) {
      return typeof msgctxt === 'string' ? "".concat(msgctxt, "\x04").concat(text) : text;
    }
    /**
     * Given a text, returns the translation.
     * Usage: getTranslation('My message'); // My message
     * @return {string} The translation
     */

  }, {
    key: "getTranslation",
    value: function getTranslation(text, msgctxt) {
      var id = this.getTranslationId(text, msgctxt);
      var tr = this.translations[id];

      if (tr && tr[1] && tr[1].length > 0) {
        return tr[1];
      }

      return text;
    }
    /**
     * Given a text and a quantity, returns the translation of the text depending on whether it is singular or plural.
     * Usage: getPluralTranslation('You have {0} message', 'You have {0} messages', 3); // You have 3 messages'
     * @return {string} The translation
     */

  }, {
    key: "getPluralTranslation",
    value: function getPluralTranslation(text, nText, quantity, msgctxt) {
      var id = this.getTranslationId(text, msgctxt);
      var tr = this.translations[id]; // Singular text

      if (quantity === 1) {
        if (tr && tr[1] && tr[1].length) {
          return tr[1];
        }

        return text;
      } // Plural text


      if (tr && tr[2] && tr[2].length) {
        return tr[2];
      }

      return nText;
    }
    /**
     * Given a text, return the translation with its arguments replaced.
     * Usage: gettext('This is {0}, right {0}?', 'John') // This is John, right John?
     * @return {string} The text modified and replaced
     */

  }, {
    key: "gettext",
    value: function gettext(text) {
      var translation = this.getTranslation(text);

      for (var _len2 = arguments.length, replacements = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        replacements[_key2 - 1] = arguments[_key2];
      }

      return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
    }
    /**
     * Given a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
     * Usage: ngettext('{0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6])
     * // John, You have 6 messages
     * @return {string} The text modified and replaced
     */

  }, {
    key: "ngettext",
    value: function ngettext(text, nText, quantity) {
      var translation = this.getPluralTranslation(text, nText, quantity);

      for (var _len3 = arguments.length, replacements = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
        replacements[_key3 - 3] = arguments[_key3];
      }

      return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
    }
    /**
     * Given a context and a text, return the translation with its arguments replaced.
     * Usage: pgettext('question', This is {0}, right {0}?', 'John') // This is John, right John?
     * @return {string} The text modified and replaced
     */

  }, {
    key: "pgettext",
    value: function pgettext(msgctxt, text) {
      var translation = this.getTranslation(text, msgctxt);

      for (var _len4 = arguments.length, replacements = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
        replacements[_key4 - 2] = arguments[_key4];
      }

      return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
    }
    /**
     * Given a context, a text in singular, a text in plural and a quantity, return the translation with its arguments replaced.
     * Usage: npgettext('information', {0}, You have {1} message', '{0}, You have {1} messages', 6, ['John', 6])
     * // John, You have 6 messages
     * @return {string} The text modified and replaced
     */

  }, {
    key: "npgettext",
    value: function npgettext(msgctxt, text, nText, quantity) {
      var translation = this.getPluralTranslation(text, nText, quantity, msgctxt);

      for (var _len5 = arguments.length, replacements = new Array(_len5 > 4 ? _len5 - 4 : 0), _key5 = 4; _key5 < _len5; _key5++) {
        replacements[_key5 - 4] = arguments[_key5];
      }

      return this.replaceArguments.apply(null, this.flattenArray([translation, replacements]));
    }
  }]);

  return I18nBase;
}();
/**
 * Expose I18n
 */


module.exports = I18nBase;

/***/ })
/******/ ]);