const {
  CURRENCY_SYMBOLS,
  CURRENCY_IDS,
  CURRENCY_TEXT_BY_SYMBOL,
  CURRENCY_TEXT_BY_ID,
  DEFAULT_CURRENCY_SYMBOL_TEXT,
  CENTS_TEXT_BY_ID,
  DEFAULT_CENTS_TEXT,
  CENTS_TEXT_BY_SYMBOL,
} = require('../constants/currencies');
const includes = require('./includes');

const getRelatedText = (symbol, currencyId, DEFAULT, TEXT_BY_SYMBOL, TEXT_BY_ID) => {
  if (!symbol && !currencyId) return DEFAULT;
  if (!includes(CURRENCY_SYMBOLS, symbol) && !includes(CURRENCY_IDS, currencyId)) return DEFAULT;

  return (
    TEXT_BY_SYMBOL[(String(symbol))]
    || TEXT_BY_ID[String(currencyId)]
    || DEFAULT
  );
};

const getCurrencyText = (symbol, currencyId) => getRelatedText(symbol, currencyId, DEFAULT_CURRENCY_SYMBOL_TEXT, CURRENCY_TEXT_BY_SYMBOL, CURRENCY_TEXT_BY_ID);

const getCentsText = (symbol, currencyId) => getRelatedText(symbol, currencyId, DEFAULT_CENTS_TEXT, CENTS_TEXT_BY_SYMBOL, CENTS_TEXT_BY_ID);

const getAccesibleAmount = (i18n, combo, previous, { symbol, currencyId, fraction, cents }) => {
  if (!i18n || (!currencyId && !symbol) || !fraction) return '';
  const context = 'andes-money-amount';
  const currencyText = getCurrencyText(symbol, currencyId);
  const centsText = getCentsText(symbol, currencyId);
  const normalizedFraction = fraction.replace(/[,.]/g, '');
  let amountText = '';

  if (combo) {
    amountText += i18n.pgettext(context, previous ? 'Antes: ' : 'Ahora: ');
  } else if (previous) {
    amountText += i18n.pgettext(context, 'Precio anterior: ');
  }

  amountText += i18n.npgettext(
    context,
    `{0} ${currencyText.singular}`,
    `{0} ${currencyText.plural}`,
    Number(normalizedFraction),
    [normalizedFraction],
  );

  if (cents && Number(cents)) {
    amountText += i18n.npgettext(
      context,
      ` con {0} ${centsText.singular}`,
      ` con {0} ${centsText.plural}`,
      Number(cents),
      [cents],
    );
  }

  return amountText;
};

const getCryptoAccesibleAmount = ({ currencyId, fraction, cents }, centsType) => {
  if ((!currencyId) || !fraction) return '';
  const currencyText = getCurrencyText(null, currencyId);
  const normalizedFraction = fraction.replace(/[,.-]/g, '');

  const centsAmount = cents ? `${centsType === 'dot' ? '.' : ','}${cents}` : '';
  return `${normalizedFraction}${centsAmount} ${currencyText}`;
};

module.exports = getAccesibleAmount;
module.exports.getCryptoAccesibleAmount = getCryptoAccesibleAmount;
module.exports.getCurrencyText = getCurrencyText;
module.exports.getCentsText = getCentsText;
