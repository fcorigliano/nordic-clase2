/* eslint-disable nordic/i18n-jsx-no-literals */
const React = require('react');
const { string, oneOf, bool, shape } = require('prop-types');
const classNames = require('classnames');
const { I18nContext } = require('frontend-i18n/lib/I18nProvider');
const { getPatchedI18n } = require('../utils');
const VisuallyHidden = require('./VisuallyHidden');

const {
  formatAmount,
  getAccesibleAmount,
  getCryptoAccesibleAmount,
  isNegative,
} = require('../utils');
const {
  CURRENCY_SYMBOLS,
  CURRENCY_IDS,
  CURRENCY_SYMBOLS_BY_ID,
  DEFAULT_CURRENCY_SYMBOL,
} = require('../constants/currencies');
const {
  DECIMAL_SEPARATOR_BY_CENTS_TYPE,
  DECIMAL_SEPARATOR_COMMA,
} = require('../constants/formats');
const {
  CENTS_SUPERSCRIPT_MARGINS,
  CENTS_SUPERSCRIPT_COMPACT_MARGINS,
  CENTS_SUPERSCRIPT_FONT_SIZES,
} = require('../constants/layout');
const { esTranslations, ptTranslations } = require('../translations');
// const MoneyAmountLogo = require('./MoneyAmountLogo');

const { useMemo } = React;

const namespace = 'andes-money-amount';

const MoneyAmount = ({
  className,
  size,
  weight,
  previous,
  centsType,
  amount,
  meta,
  combo,
  compact,
  showCurrencyText,
  type,
  // showLogo,
  suffix,
}) => {
  const { symbol, currencyId, fraction, cents } = amount;
  const Component = previous ? 's' : 'span';
  const absoluteFraction = isNegative(fraction) ? fraction.slice(1) : fraction;
  const calculatedCentsType = centsType === 'superscript' && size <= 14 ? 'comma' : centsType;
  const i18n = getPatchedI18n({}, I18nContext, esTranslations, ptTranslations);
  const isCrypto = type === 'crypto';

  const amountClassNames = classNames(namespace, className, {
    [`${namespace}--previous`]: previous,
    [`${namespace}--cents-${calculatedCentsType}`]: calculatedCentsType,
    [`${namespace}--compact`]: compact,
    [`${namespace}--weight-semibold`]: weight === 'semibold',
  });

  const centsClassNames = classNames(`${namespace}__cents`, {
    // Superscript is not allowed in sizes above 16px
    [`${namespace}__cents--superscript-${size}`]:
      calculatedCentsType === 'superscript',
  });

  const amountStyles = useMemo(() => ({ fontSize: size }), [size]);

  const centsStyles = useMemo(() => {
    const centsMargins = compact
      ? CENTS_SUPERSCRIPT_COMPACT_MARGINS
      : CENTS_SUPERSCRIPT_MARGINS;

    if (calculatedCentsType === 'superscript') {
      return {
        fontSize: CENTS_SUPERSCRIPT_FONT_SIZES[Number(size)] || size / 2,
        marginTop: centsMargins[Number(size)],
      };
    }

    return {};
  }, [size, calculatedCentsType, compact]);

  const metaValues = useMemo(
    () => (meta
      ? {
        main: {
          itemProp: 'offers',
          itemScope: true,
          itemType: 'http://schema.org/Offer',
        },
        currency: { itemProp: 'priceCurrency', content: currencyId },
      }
      : {}),
    [meta, currencyId],
  );

  const getAccesibleText = () => {
    let text = isCrypto
      ? getCryptoAccesibleAmount(amount, centsType)
      : getAccesibleAmount(i18n, combo, previous, amount);
    text += suffix
      ? ` ${suffix && i18n.pgettext(namespace, 'por {0}', suffix)}`
      : '';

    return text;
  };

  const getCents = () => {
    if (!cents) return null;

    const decimalSeparator = DECIMAL_SEPARATOR_BY_CENTS_TYPE[calculatedCentsType];

    return (
      <>
        {decimalSeparator && <span aria-hidden>{decimalSeparator}</span>}
        {/* For superscript cases, an invisible comma is added in order to allow copying the value correctly */}
        {!decimalSeparator && (
          <VisuallyHidden aria-hidden>{DECIMAL_SEPARATOR_COMMA}</VisuallyHidden>
        )}
        <span className={centsClassNames} style={centsStyles} aria-hidden>
          {cents}
        </span>
      </>
    );
  };

  return (
    <Component
      className={amountClassNames}
      style={amountStyles}
      {...metaValues.main}
    >
      <VisuallyHidden>{getAccesibleText()}</VisuallyHidden>
      {/* {showLogo && (
        <MoneyAmountLogo currencyId={currencyId} amountSize={size} />
      )} */}
      {meta && <meta itemProp="price" content={formatAmount(amount)} />}
      {isNegative(fraction) && (
        <span className={`${namespace}__negative-symbol`} aria-hidden>
          -
        </span>
      )}
      <span
        className={`${namespace}__currency-symbol`}
        {...metaValues.currency}
        aria-hidden
      >
        {showCurrencyText || isCrypto
          ? currencyId
          : symbol
            || CURRENCY_SYMBOLS_BY_ID[String(currencyId)]
            || DEFAULT_CURRENCY_SYMBOL}
      </span>
      <span className={`${namespace}__fraction`} aria-hidden>
        {absoluteFraction}
      </span>
      {getCents()}
      {suffix && (
        <div
          className={`${namespace}__suffix ${namespace}__suffix-${size}`}
          aria-hidden
        >
          {`/${suffix}`}
        </div>
      )}
    </Component>
  );
};

MoneyAmount.propTypes = {
  className: string,
  size: oneOf([12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60]),
  weight: oneOf(['regular', 'semibold']),
  previous: bool,
  // centsType: checkCentsTypefunction,
  amount: shape({
    symbol: oneOf(CURRENCY_SYMBOLS),
    currencyId: oneOf(CURRENCY_IDS),
    fraction: string.isRequired,
    cents: string,
  }).isRequired,
  meta: bool,
  combo: bool,
  compact: bool,
  showCurrencyText: bool,
  type: oneOf(['default', 'crypto']),
  // showLogo: bool,
  // suffix: checkSuffixfunction,
};

MoneyAmount.defaultProps = {
  className: '',
  size: 36,
  weight: 'regular',
  previous: false,
  centsType: 'comma',
  meta: false,
  combo: false,
  compact: false,
  showCurrencyText: false,
  type: 'default',
  // showLogo: false,
  suffix: '',
};

module.exports = MoneyAmount;
