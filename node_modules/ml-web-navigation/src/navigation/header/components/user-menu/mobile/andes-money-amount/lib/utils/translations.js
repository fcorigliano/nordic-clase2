const { useContext } = require('react');
const I18n = require('frontend-i18n');
const { ES_AR, PT_BR } = require('../constants/locales');
const warning = require('./warning');

const msj = `Please, check the following comunication about i18n on Andes:
 https://meli.workplace.com/groups/andesUI/permalink/4174925412635671/`;

const getBestLocale = (locale) => (locale === PT_BR ? PT_BR : ES_AR);

const injectTranslations = (i18n, ...availableTranslations) => {
  if (i18n && availableTranslations.length) {
    const bestLocale = getBestLocale(i18n.locale);
    const componentTranslations = availableTranslations.find(
      ({ locale }) => locale === bestLocale,
    );
    const { module } = componentTranslations;

    if (!i18n.andes) i18n.andes = {};

    if (!i18n.andes[String(module)]) {
      i18n.translations = {
        ...i18n.translations,
        ...componentTranslations.translations,
      };
      i18n.andes[String(module)] = true;
    }
  }
};

const getI18nFromContext = (context) => {
  const getContext = context.Consumer ? useContext : (value) => value;
  return getContext(context).i18n;
};

const getPatchedI18n = (
  andesContext,
  i18nContext = {},
  ...availableTranslations
) => {
  const module = availableTranslations[0]?.module || '@andes';

  // Get i18n from AndesContext or I18nContext
  let i18n = getI18nFromContext(andesContext) || getI18nFromContext(i18nContext);

  // Instance i18n and warn
  if (!i18n) {
    warning(false, `${module} could not get a valid i18n instance. ${msj}`);

    i18n = new I18n({ translations: {} });
  }

  // Check & resolve locale
  if (!i18n.locale && typeof document !== 'undefined') {
    const documentLang = document.documentElement?.lang;
    i18n.locale = documentLang;
    warning(
      !!documentLang,
      `${module} could not resolve any locale for i18n. ${msj}`,
    );
  }

  injectTranslations(i18n, ...availableTranslations);

  return i18n;
};

module.exports = { injectTranslations, getBestLocale, getPatchedI18n };
