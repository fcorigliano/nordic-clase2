/* eslint-disable security/detect-object-injection */
/* eslint-disable nordic/i18n-jsx-no-literals */
const React = require('react');
const ShallowRenderer = require('react-test-renderer/shallow');
const DownloadApp = require('.');

const position = 'some-position';

describe('Mercado Libre Download App', () => {
  it('returns null since there are no positions defined', () => {
    const renderer = new ShallowRenderer();

    const component = <DownloadApp position={null} />;
    expect(renderer.render(component)).toMatchSnapshot();
  });

  describe('raw html', () => {
    it('should render render raw html strings', () => {
      const renderer = new ShallowRenderer();
      const props = {
        [position]: [{
          type: 'html',
          data: '<script>console.log(\'test 1\')</script>',
        }, {
          type: 'html',
          data: '<script>console.log(\'test 2\')</script>',
        }],
      };
      const component = <DownloadApp position={props[position]} />;
      expect(renderer.render(component)).toMatchSnapshot();
    });
  });

  describe('raw html with unknown type', () => {
    it('should render render raw html strings', () => {
      const renderer = new ShallowRenderer();
      const props = {
        [position]: [
          {
            type: 'html',
            data: '<script>console.log(\'test 1\')</script>',
          },
          {
            type: 'not-a-valid-component',
            data: '<script>console.log(\'test 2\')</script>',
          },
        ],
      };
      const component = <DownloadApp position={props[position]} />;
      expect(renderer.render(component)).toMatchSnapshot();
    });
  });

  describe('Script components', () => {
    it('should render script components', () => {
      const renderer = new ShallowRenderer();
      const props = {
        [position]: [{
          type: 'script',
          data: {
            src: 'some-source-1.js',
            on: 'load',
            priority: 1,
            preload: false,
          },
        }, {
          type: 'script',
          data: {
            src: 'some-source-2.js',
            on: 'now',
            priority: 2,
            true: false,
          },
        }],
      };

      const component = <DownloadApp position={props[position]} />;
      expect(renderer.render(component)).toMatchSnapshot();
    });
  });
});
