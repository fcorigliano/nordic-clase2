const defaultProps = {
  req: {
    someRequestProperty: 'someRequestValue',
  },
  platform: {
    somePlatformProperty: 'somePlatformValue',
  },
  device: {
    mobile: true,
  },
  navigationUrls: {
    'some-id': {
      link: 'some-id-link',
      name: 'some-id-name',
    },
    'some-other-id': {
      link: 'some-other-id-link',
      name: 'some-other-id-name',
    },
  },
};

const addedLink = {
  href: 'some-added-id-link',
  id: 'some-added-id',
  name: 'some-added-id-name',
};

describe('Mercado Libre Navigation', () => {
  beforeEach(() => jest.resetModules());

  describe('Footer Navigation props', () => {
    it('returns props needed for a mobile Footer navigation Component', () => {
      const getValue = jest.fn().mockReturnValue([{
        link: 'some-id',
      }, 'some-other-id',
      'some-missing-id']);
      jest.doMock('ml-navigation-config', () => ({ getValue }));

      const addLinks = jest.fn().mockImplementation(links => {
        links.push(addedLink);
      });
      jest.doMock('../sites/additional-links', () => ({ addLinks }));

      const footerProps = require('./props');

      const props = footerProps(defaultProps);

      const expectedLinks = [{
        href: 'some-id-link',
        id: 'some-id',
        name: 'some-id-name',
      }, {
        href: 'some-other-id-link',
        id: 'some-other-id',
        name: 'some-other-id-name',
      }];

      expect(props).toEqual({
        isMobile: true,
        links: expectedLinks.concat(addedLink),
      });
      expect(getValue).toHaveBeenCalledWith({
        key: 'mobileSecondaryFooterLinks',
        req: defaultProps.req,
        platform: defaultProps.platform,
      });

      // concatenating here because jest keeps reference of parameters and compares against it
      // so the expected parameter should contain added data
      expect(addLinks).toHaveBeenCalledWith(expectedLinks.concat(addedLink), defaultProps);
    });

    it('returns props needed for a desktop Footer navigation Component', () => {
      const getValue = jest.fn().mockReturnValue([{
        link: 'some-id',
      }, 'some-other-id',
      'some-missing-id']);
      jest.doMock('ml-navigation-config', () => ({ getValue }));

      const addLinks = jest.fn().mockImplementation(links => links.push(addedLink));
      jest.doMock('../sites/additional-links', () => ({ addLinks }));

      const footerProps = require('./props');

      const expectedLinks = [{
        href: 'some-id-link',
        id: 'some-id',
        name: 'some-id-name',
      }, {
        href: 'some-other-id-link',
        id: 'some-other-id',
        name: 'some-other-id-name',
      }];

      const inputProps = {
        ...defaultProps,
        device: {
          ...defaultProps.device,
          mobile: false,
        },
      };
      const props = footerProps(inputProps);

      expect(props).toEqual({
        isMobile: false,
        links: expectedLinks.concat(addedLink),
      });
      expect(getValue).toHaveBeenCalledWith({
        key: 'desktopFooterLinks',
        req: inputProps.req,
        platform: inputProps.platform,
      });

      // concatenating here because jest keeps reference of parameters and compares against it
      // so the expected parameter should contain added data
      expect(addLinks).toHaveBeenCalledWith(expectedLinks.concat(addedLink), inputProps);
    });
  });
});
