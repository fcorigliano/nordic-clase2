const defaultProps = {
  someProp: 'somePropValue',
};

describe('Mercado Libre Navigation', () => {
  beforeEach(() => jest.resetModules());

  describe('Additional Links props', () => {
    it('should add a link when applies', () => {
      const links = [{
        href: 'https://www.mercadolibre.com.ar',
        name: 'Home',
      }];

      const linksClone = [...links];

      const doesApply = jest.fn().mockReturnValue(true);
      const added = {
        link: {
          href: 'otherHref',
          name: 'otherName',
        },
      };
      const props = jest.fn().mockReturnValue(added);
      jest.doMock('./sic', () => ({
        doesApply,
        props,
      }));
      const { addLinks } = require('./additional-links');

      addLinks(links, defaultProps);

      expect(links).toEqual(linksClone.concat(added.link));
      expect(doesApply).toHaveBeenCalledWith(defaultProps);
      expect(props).toHaveBeenCalledWith(defaultProps);
    });

    it('should not add a link when does not applies', () => {
      const links = [{
        href: 'https://www.mercadolibre.com.ar',
        name: 'Home',
      }];

      const linksClone = [...links];

      const doesApply = jest.fn().mockReturnValue(false);
      const props = jest.fn();
      jest.doMock('./sic', () => ({
        doesApply,
        props,
      }));
      const { addLinks } = require('./additional-links');

      addLinks(links, defaultProps);

      expect(links).toEqual(linksClone);
      expect(doesApply).toHaveBeenCalledWith(defaultProps);
      expect(props).not.toHaveBeenCalled();
    });
  });
});
