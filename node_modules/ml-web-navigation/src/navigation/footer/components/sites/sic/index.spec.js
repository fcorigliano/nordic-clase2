const React = require('react');
const ShallowRenderer = require('react-test-renderer/shallow');

const originalProps = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  device: {
    mobile: false,
  },
  req: 'some-req-thing',
};

const getComponentModule = () => require('./tertiary');
const getPropsModule = () => require('.');

const mockConfig = () => {
  const getValue = jest.fn().mockImplementation(({ key }) => {
    if (key === 'sic') {
      return {
        url: 'https://www.sic.gov.co/',
        urlPum: 'https://www.sic.gov.co/pare-y-compare',
        name: 'www.sic.gov.co',
        altSic: 'SIC - Industria y comercio',
        altPum: 'Precio por unidad de medida',
        sicImageName: 'sic.png',
        sicImage2xName: 'sic@2x.png',
        pumImageName: 'pum.png',
        pumImage2xName: 'pum@2x.png',
      };
    }

    return 'mocked-ui-navigation-version';
  });
  jest.doMock('ml-navigation-config', () => ({ getValue }));

  const assertConfigCalled = () => {
    expect(getValue).toHaveBeenCalledWith({
      key: 'sic',
      platform: originalProps.platform,
      req: originalProps.req,
    });
  };

  return {
    assertConfigCalled,
  };
};

describe('Mercado Libre Navigation', () => {
  beforeEach(() => jest.resetModules());

  describe('SIC', () => {
    it('matches the default snapshot for SIC', () => {
      const renderer = new ShallowRenderer();
      const { assertConfigCalled } = mockConfig();
      const props = getPropsModule().props(originalProps);
      console.log('SIC props', props);
      const SIC = getComponentModule();

      const component = (
        <SIC {...props} />
      );
      expect(renderer.render(component)).toMatchSnapshot();
      assertConfigCalled();
    });

    it('matches the default snapshot for SIC with no link', () => {
      const renderer = new ShallowRenderer();
      const { assertConfigCalled } = mockConfig();
      const props = getPropsModule().props(originalProps);
      const SIC = getComponentModule();

      const component = (
        <SIC
          {...props}
          link={null}
        />
      );
      expect(renderer.render(component)).toMatchSnapshot();
      assertConfigCalled();
    });
  });
});

