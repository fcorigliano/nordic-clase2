const React = require('react');
const {
  DESKTOP,
  TABLET,
  MOBILE,
} = require('@frontend-navigations/commons/constants/device-types');
const ShallowRenderer = require('react-test-renderer/shallow');
const Css = require('.');
const {
  FULL,
  INTERNAL,
} = require('../../constants/navigation-types');

const defaultProps = {
  platformId: 'ML',
  siteId: 'MLA',
  navigationType: FULL,
  firstRequestInlineStyles: false,
  deviceType: MOBILE,
  browser: {
    name: 'chrome',
    major: '80',
  },
  cdn: {
    link: 'https://some-cdn-link.com',
  },
};

describe('Mercado Libre Navigation', () => {
  describe('Css component', () => {
    it('should match snapshot with non-internal navigation type and mobile device', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css {...defaultProps} />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with non-internal navigation type and desktop device', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          deviceType={DESKTOP}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with non-internal navigation type and tablet device', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          deviceType={TABLET}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with non-internal navigation type and unknown device', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          deviceType="unknown-device-type"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with internal navigation type', () => {
      const renderer = new ShallowRenderer();
      const props = {
        ...defaultProps,
        navigationType: INTERNAL,
      };
      const component = (
        <Css {...props} />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with ie < 9', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          browser={{
            name: 'ie',
            major: '8',
          }}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with ie equals 9', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          browser={{
            name: 'ie',
            major: '9',
          }}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with firstRequestInlineStyles configuration', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          {...defaultProps}
          firstRequestInlineStyles
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });
  });
});
