const React = require('react');
const PropTypes = require('prop-types');
const Favicons = require('@frontend-navigations/commons/lib/favicons-component');
const Header = require('./header');
const headerProps = require('./header/props');
const Snackbar = require('./widgets/snackbar');
const snackbarProps = require('./widgets/snackbar/props');
const SignUpMessages = require('./widgets/sign-up-message');
const signUpMessagesProps = require('./widgets/sign-up-message/props');
const LoanMessages = require('./widgets/loan-message');
const loanMessagesProps = require('./widgets/loan-message/props');
const Tracking = require('./widgets/tracking');
const Footer = require('./footer');
const footerProps = require('./footer/props');
const PreloadedState = require('./preloaded-state');
const preloadedStateProps = require('./preloaded-state/props');
const { isHidden, isClean } = require('../layout-type-detection');
const icons = require('./utils/icons');
const DownloadApp = require('./widgets/download-app');
const downloadAppProps = require('./widgets/download-app/props');
const getLinkTagsProps = require('./common/link-tag/props');
const Css = require('./css');
const cssProps = require('./css/props');
const faviconsProps = require('./favicons/props');
const KycMessage = require('./header/components/kyc-message');
const kycMessageProps = require('./header/components/kyc-message/props');

const navMenuSwitchId = 'nav-header-menu-switch';

const Navigation = ({ children, ...props }) => {
  if (isHidden(props.type)) {
    return [children];
  }

  const downloadApp = downloadAppProps(props);
  icons.inject(props);

  const linkTagsProps = getLinkTagsProps(props);

  const FooterComponent = props.overrides.footerComponent || Footer;
  const footerComponentProps = props.overrides.footerComponentProps || footerProps;

  return [
    <DownloadApp position={downloadApp['page-top']} />,
    <Css {...cssProps(props)} />,
    <Favicons {...faviconsProps(props)} />,
    <SignUpMessages {...signUpMessagesProps(props)} />,
    <PreloadedState {...preloadedStateProps(props)} />,
    <Tracking />,
    // TODO: this input should not be here since it is something specifically related to web/mobile
    // but if we change the markup, styling for this component will no longer work.
    // For now, we leave it here and when we do the css refactor we will move it to the web/mobile section
    !isClean(props.type) && <input type="checkbox" id={navMenuSwitchId} />,
    <Header
      {...headerProps(props, linkTagsProps)}
      navMenuSwitchId={navMenuSwitchId}
    />,
    <LoanMessages {...loanMessagesProps(props)} />,
    <KycMessage {...kycMessageProps(props)} />,
    <Snackbar {...snackbarProps(props)} />,
    children,
    <FooterComponent {...footerComponentProps(props, linkTagsProps)} />,
    <DownloadApp position={downloadApp['page-bottom']} />,
  ];
};

Navigation.propTypes = {
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node,
  ]).isRequired,
  overrides: PropTypes.shape({}),
  downloadApp: PropTypes.object.isRequired,
  platform: PropTypes.object,
};

Navigation.defaultProps = {
  overrides: {},
};

module.exports = Navigation;
