const getModule = () => require('./index');

const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  headers: {},
};
const baseResponse = {};
const baseParams = {
  type: 'plus',
};

const PRODUCTION = true;

const mockEnvironment = () => jest.doMock('frontend-env', () => ({
  PRODUCTION,
}));

const timeoutConfig = 1234;

const mockTimeoutConfig = () => {
  const restClientTimeout = jest.fn().mockReturnValue(timeoutConfig);
  jest.doMock('./config', () => ({
    restClientTimeout,
  }));

  const assertTimeoutConfig = () => expect(restClientTimeout).toHaveBeenCalledWith(PRODUCTION);

  return {
    assertTimeoutConfig,
  };
};

const restClientError = {
  stack: 'some-stack',
};

const mockRestClient = ({
  fail,
} = {}) => {
  const get = jest.fn();

  if (fail) {
    get.mockRejectedValue(restClientError);
  } else {
    get.mockResolvedValue({
      data: {
        android: 0,
        ios: 0,
        'web-mobile': 2,
        'web-tablet': 0,
        'web-desktop': 0,
      },
    });
  }

  const context = 'some-context';
  const buildRestClientContext = jest.fn().mockReturnValue(context);
  jest.doMock('frontend-restclient/src/build-context', () => buildRestClientContext);

  const restClientMock = jest.fn().mockReturnValue(({ get }));
  jest.doMock('frontend-restclient', () => restClientMock);

  const assertRestClient = ({
    request,
  }) => {
    expect(restClientMock).toHaveBeenCalledWith({
      timeout: timeoutConfig,
      logErrors: false,
    });
    expect(get).toHaveBeenCalledWith(`/users/${request.user.id}/newsgroups_count?caller.id=${request.user.id}&access_token=${request.user.access_token}&marketplace=mercadolibre`, {
      context,
    });
    expect(buildRestClientContext).toHaveBeenCalledWith(request);
  };

  return {
    assertRestClient,
  };
};

const mockLogger = () => {
  const error = jest.fn();
  jest.doMock('../logger', () => ({
    error,
  }));

  const assertLogger = ({
    request,
  }) => expect(error).toHaveBeenCalledWith({
    req: request,
    err: restClientError,
    errorType: 'notifications',
    message: restClientError.stack,
  });

  return {
    assertLogger,
  };
};

const userId = 'some-user-id';

describe('Mercado Libre - Prepare to Render', () => {
  describe('Notifications Service', () => {
    beforeEach(() => jest.resetModules());

    it('returns the empty information for notifications since there is no user', () => {
      const NotificationsService = getModule();

      return NotificationsService(baseRequest, baseResponse, baseParams)
        .then((result) => expect(result).toEqual({ count: 0 }));
    });

    it('returns the notifications for the current user', () => {
      mockEnvironment();
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const request = { ...baseRequest,
        user: {
          id: userId,
        } };

      const NotificationsService = getModule();

      return NotificationsService(request, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({ count: 2 });
        assertRestClient({ request });
        assertTimeoutConfig();
      });
    });

    it('returns the default notifications since API call fails', () => {
      mockEnvironment();
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient({
        fail: true,
      });
      const { assertLogger } = mockLogger();
      const request = { ...baseRequest,
        user: {
          id: userId,
        } };

      const NotificationsService = getModule();

      return NotificationsService(request, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({ count: 0 });
        assertRestClient({ request });
        assertTimeoutConfig();
        assertLogger({ request });
      });
    });
  });
});
