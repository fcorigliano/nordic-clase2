const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const { PRODUCTION } = require('frontend-env');
const { restClientTimeout } = require('./config');
const { isHidden, isClean } = require('../../../layout-type-detection');
const logger = require('../logger');

const endpoint = user => `/users/${user.id}/newsgroups_count?caller.id=${user.id}&access_token=${user.access_token}&marketplace=mercadolibre`;

const request = restClient({
  timeout: restClientTimeout(PRODUCTION),
  logErrors: false,
});

// TODO: in the future, we only want this API called executed on web/mobile, not on desktop
const shouldNotificationsBeDisplayed = (type, user) => user && !isHidden(type) && !isClean(type);

const execute = ({ user, type, req }) => {
  const data = {
    count: 0,
  };

  if (!shouldNotificationsBeDisplayed(type, user)) {
    return Promise.resolve(data);
  }

  const countUrl = endpoint(user);

  /**
   * HEAD'S UP!
   * This API call is done for both desktop and mobile, but the data retrieved is only from web mobile
   * since desktop also holds the markup for the mobile version. This is due to the fact that we want to be responsive,
   * so if the user makes the screen smaller, it will show the notifications as well. The desktop notifications are
   * retrieved client side, so that is what they are not queried here.
   */
  return request.get(countUrl, {
    context: buildRestClientContext(req),
  })
    .then((response) => {
      data.count = response.data['web-mobile'];
      return data;
    })
    .catch((err) => {
      const errorType = 'notifications';
      logger.error({
        req,
        err,
        errorType,
        message: err.stack,
      });

      return data;
    });
};

const generateServiceContext = (req, res, params) => {
  const { user } = req;
  const { type } = params;

  return {
    req,
    user,
    type,
  };
};

module.exports = (req, res, params) => execute(generateServiceContext(req, res, params));
