const DownloadAppService = require('./index');

const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLX',
  },
  device: {
    desktop: false,
    mobile: true,
    webView: false,
    type: 'mobile',
  },
  headers: {
    cookie: '',
  },
  query: {},
};
const baseResponse = {};
const baseParams = {
  type: 'plus',
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('Download App Service', () => {
    it('returns the download app information for a specific site and platform', (done) => {
      DownloadAppService(baseRequest, baseResponse, baseParams)
        .then((result) => {
          expect(result).toBeDefined();
          done();
        });
    });

    it('returns the download app information for a specific site and platform and variant', (done) => {
      DownloadAppService(
        {
          ...baseRequest,
          query: {
            navigation_download_app_variant: '2938',
          },
        },
        baseResponse,
        baseParams,
      ).then((result) => {
        expect(result).toBeDefined();
        done();
      });
    });

    it('returns the download app information for a specific site and platform and variant and enabled param', (done) => {
      DownloadAppService(
        {
          ...baseRequest,
          query: {
            navigation_download_app_variant: '2938',
          },
        },
        baseResponse,
        { ...baseParams, hideDownloadApp: false },
      ).then((result) => {
        expect(result).toBeDefined();
        done();
      });
    });

    it('returns an empty result since has disabled param', (done) => {
      DownloadAppService(
        {
          ...baseRequest,
          query: {
            navigation_download_app_variant: '2938',
          },
        },
        baseResponse,
        { ...baseParams, hideDownloadApp: true },
      ).then((result) => {
        expect(result).toEqual({});
        done();
      });
    });

    it('returns an empty result since it is a webview', (done) => {
      DownloadAppService({
        ...baseRequest,
        device: {
          mobile: true,
          webView: true,
        },
      }, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({});
        done();
      });
    });

    it('returns an empty result since platform is not correct', (done) => {
      DownloadAppService({
        ...baseRequest,
        platform: { siteId: 'MLA', id: 'MLA' },
      }, baseResponse, baseParams).then((error) => {
        expect(error).toEqual({});
        done();
      });
    });
  });
});
