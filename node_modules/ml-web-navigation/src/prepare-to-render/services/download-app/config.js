const typeMapper = require('../../../navigation/utils/type-mapper');

const restClientTimeout = isProduction => (isProduction ? 100 : 1000);

const getParams = ({
  req,
  type,
  appId,
  downloadAppi,
}) => {
  const params = {
    site: req.platform.siteId,
    platform: req.platform.id,
    app: appId || 'development',
    'navigation-type': typeMapper(type),
    'device-type': req.device.type,
  };

  /* eslint-disable no-underscore-dangle */
  if (req.query.__nav_download_appi_variants) {
    req.query.__nav_download_appi_variants
      .split(';')
      .forEach((experimentString) => {
        const experimentStringArray = experimentString.split(',');
        if (experimentStringArray.length === 2) {
          const [
            experimentShortName,
            variantId,
          ] = experimentStringArray;

          const parsedVariantId = parseInt(variantId, 10);
          // eslint-disable-next-line no-restricted-globals
          if (!isNaN(parsedVariantId) && experimentShortName) {
            const experimentName = `variant_frontend-core/${experimentShortName}`;
            params[experimentName] = parsedVariantId;
          }
        }
      });
  }
  /* eslint-enable no-underscore-dangle */

  if (req.user) {
    params['caller.id'] = req.user.id;
  }

  if (req.headers.referer) {
    params.referrer = req.headers.referer;
  }

  if (downloadAppi && downloadAppi.widgetsBlacklist && downloadAppi.widgetsBlacklist.length) {
    params['widget-blacklist'] = downloadAppi.widgetsBlacklist.join(',');
  }

  return params;
};

const endpoint = (env) => {
  const { SCOPE, DEVELOPMENT } = env;
  const scope = SCOPE && SCOPE.toLowerCase();
  const isTestScope = scope && (scope.startsWith('furytest') || scope.startsWith('test'));
  const testURL = DEVELOPMENT
    || isTestScope ? '-test' : '';

  return `/download${testURL}-appi`;
};

module.exports = {
  restClientTimeout,
  getParams,
  endpoint,
};
