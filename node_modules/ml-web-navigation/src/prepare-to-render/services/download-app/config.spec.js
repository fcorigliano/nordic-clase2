const config = require('./config');

describe('Mercado Libre - Prepare to Render', () => {
  describe('Download app service Config', () => {
    describe('getParams', () => {
      const baseParams = {
        type: 'plus',
        appId: 'frontend-navigations',
        req: {
          query: {},
          platform: {
            siteId: 'MLM',
            id: 'ML',
          },
          headers: {
            referer: 'referrer url',
          },
          device: {
            type: 'mobile',
          },
          user: {
            id: '1234',
          },
        },
      };

      const baseResult = {
        app: baseParams.appId,
        'caller.id': baseParams.req.user.id,
        'navigation-type': baseParams.type,
        platform: baseParams.req.platform.id,
        site: baseParams.req.platform.siteId,
        'device-type': baseParams.req.device.type,
        referrer: baseParams.req.headers.referer,
      };

      it('returns the base params to call download appi', () => {
        const params = config.getParams(baseParams);

        expect(params).toEqual(baseResult);
      });

      it('returns the melidata query strings to call download appi', () => {
        const variants = [{
          name: 'name1',
          value: 1,
        }, {
          name: 'name2',
          value: 2,
        }, {
          name: 'name3',
          value: 3,
        }];

        const requestQueryStringValue = variants
          .map(variant => `${variant.name},${variant.value}`)
          .join(';');

        const params = config.getParams({
          ...baseParams,
          req: {
            ...baseParams.req,
            query: {
              ...baseParams.req.query,
              __nav_download_appi_variants: requestQueryStringValue,
            },
          },
        });

        const variantsResult = variants
          .reduce((hash, variant) => ({
            ...hash,
            [`variant_frontend-core/${variant.name}`]: variant.value,
          }), {});

        expect(params).toEqual({
          ...baseResult,
          ...variantsResult,
        });
      });

      it('should skip widget blacklist parameter if the list if not defined', () => {
        const params = config.getParams({
          ...baseParams,
          downloadAppi: {},
        });

        expect(params).toEqual(baseResult);
      });

      it('should skip widget blacklist parameter if the list is empty', () => {
        const params = config.getParams({
          ...baseParams,
          downloadAppi: {
            widgetsBlacklist: [],
          },
        });

        expect(params).toEqual(baseResult);
      });

      it('should return serialized widget blacklist parameter', () => {
        const params = config.getParams({
          ...baseParams,
          downloadAppi: {
            widgetsBlacklist: [
              '1',
              '2',
              '3',
            ],
          },
        });

        expect(params).toEqual({
          ...baseResult,
          'widget-blacklist': '1,2,3',
        });
      });

      it('returns the params to call download appi when the app is not defined', () => {
        const params = config.getParams({
          ...baseParams,
          type: 'plus',
          appId: null,
        });

        expect(params).toEqual({
          app: 'development',
          'caller.id': '1234',
          'navigation-type': 'plus',
          platform: 'ML',
          site: 'MLM',
          'device-type': 'mobile',
          referrer: 'referrer url',
        });
      });

      it('returns the params to call download appi when there is no user', () => {
        const params = config.getParams({
          ...baseParams,
          req: {
            ...baseParams.req,
            headers: {},
            user: null,
          },
        });

        expect(params).toEqual({
          app: baseParams.appId,
          'navigation-type': 'plus',
          platform: 'ML',
          site: 'MLM',
          'device-type': 'mobile',
        });
      });
    });

    it('returns a specific timeout depending on the environment', () => {
      expect(config.restClientTimeout(true)).toEqual(100);
      expect(config.restClientTimeout(false)).toEqual(1000);
    });

    it('returns the endpoint for prod', () => {
      const url = config.endpoint({
        SCOPE: 'prod',
        DEVELOPMENT: false,
      });

      expect(url).toEqual('/download-appi');
    });

    it('returns the endpoint for test env', () => {
      const url = config.endpoint({
        SCOPE: 'furytest',
        DEVELOPMENT: false,
      });

      expect(url).toEqual('/download-test-appi');
    });
  });
});
