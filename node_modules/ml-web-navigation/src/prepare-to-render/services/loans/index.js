const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const { PRODUCTION } = require('frontend-env');
const { restClientTimeout, clientId } = require('./config');
const logger = require('../logger');

const endpoint = user => `/api/v1/credits/consumer/loans/summary?caller.id=${user}`;
const shouldCreditsBeDisplayed = (user, features) => {
  const userHasCreditsProfile = user && user.raw && user.raw.tags
    ? user.raw.tags.indexOf('credits_profile') !== -1 : false;

  return features.loansMessages && user && userHasCreditsProfile;
};

const request = restClient({
  timeout: restClientTimeout(PRODUCTION),
  retry: {
    maxRetries: 0,
  },
  logErrors: false,
});

const execute = ({ user, features, req }) => {
  const data = null;

  if (!shouldCreditsBeDisplayed(user, features)) {
    return Promise.resolve(data);
  }

  const url = endpoint(user.id);
  const requestConfig = {
    headers: {
      'X-Client-Id': clientId,
      'X-Caller-Id': user && user.id,
    },
    context: buildRestClientContext(req),
  };

  return request.get(url, requestConfig)
    .then((response) => {
      const responseData = response.data && response.data.data && response.data.data.result
        && response.data.data.result.length ? response.data.data.result[0] : null;

      return responseData;
    })
    .catch((err) => {
      const errorType = 'loans';
      logger.error({
        req,
        err,
        errorType,
        message: err.stack,
      });

      return data;
    });
};

const generateServiceContext = (req, res, params) => {
  const { platform, device, user } = req;
  const { features } = params;

  return {
    platformId: platform.id,
    siteId: platform.siteId,
    isMobile: device.mobile,
    req,
    user,
    features,
  };
};

module.exports = (req, res, params) => execute(generateServiceContext(req, res, params));

