jest.doMock('frontend-env', () => ({
  PRODUCTION: true,
  SCOPE: 'testdevelop-nordic',
}));

const getModule = () => require('./index');

const userId = '1234';
const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  device: {
    desktop: true,
  },
  headers: {},
  cookies: {},
};
const baseResponse = {};
const baseParams = {
  type: 'plus',
};

const timeoutConfig = 1234;

const mockTimeoutConfig = () => {
  const restClientTimeout = jest.fn().mockReturnValue(timeoutConfig);
  jest.doMock('./config', () => ({
    restClientTimeout,
  }));

  const assertTimeoutConfig = () => expect(restClientTimeout).toHaveBeenCalledWith(true);

  return {
    assertTimeoutConfig,
  };
};

const restClientError = {
  stack: 'some-stack',
};

const restClientResult = 'some-result';

const mockRestClient = ({
  fail,
} = {}) => {
  const get = jest.fn();

  if (fail) {
    get.mockRejectedValue(restClientError);
  } else {
    get.mockResolvedValue({
      data: restClientResult,
    });
  }

  const context = 'some-context';
  const buildRestClientContext = jest.fn().mockReturnValue(context);
  jest.doMock('frontend-restclient/src/build-context', () => buildRestClientContext);

  const restClientMock = jest.fn().mockReturnValue(({ get }));
  jest.doMock('frontend-restclient', () => restClientMock);

  const assertRestClient = ({
    request,
  }) => {
    expect(restClientMock).toHaveBeenCalledWith({
      timeout: timeoutConfig,
      retry: {
        maxRetries: 0,
      },
      logErrors: false,
    });
    expect(get).toHaveBeenCalledWith(`/frontend/sites/${request.platform.siteId}/menu/exhibitors`, {
      params: {
        ...(request.cookies.meliLab
          ? {
            env: 'testdevelop-nordic',
          }
          : null
        ),
        ...(request.user
          ? {
            user_id: request.user.id,
          }
          : null
        ),
      },
      context,
      headers: {
        'x-client-capabilities': `webp=${request.browser && request.browser.support ? request.browser.support.webp : false}`,
      },
    });
    expect(buildRestClientContext).toHaveBeenCalledWith(request);
  };

  return {
    assertRestClient,
  };
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('Exhibitor Service', () => {
    beforeEach(() => jest.resetModules());

    it('returns the exhibitor information for a specific site', (done) => {
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const ExhibitorService = getModule();
      ExhibitorService(baseRequest, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({ request: baseRequest });
        done();
      });
    });

    it('returns the exhibitor information for a specific site and for a specific user', (done) => {
      const request = { ...baseRequest,
        user: {
          id: userId,
        } };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({ request });
        done();
      });
    });

    it('returns the exhibitor information for a specific site and for a specific user browser support null', (done) => {
      const request = { ...baseRequest,
        user: {
          id: userId,
        },
        browser: null };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({ request });
        done();
      });
    });

    it('returns the exhibitor information for a specific site and for a specific user browser support true', (done) => {
      const request = { ...baseRequest,
        user: {
          id: userId,
        },
        browser: {
          support: true,
        } };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({ request });
        done();
      });
    });

    it('returns the exhibitor default information since it should not be displayed because it is mobile', (done) => {
      const request = { ...baseRequest,
        device: {
          mobile: true,
        } };

      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({
          exhibitorInfo: {},
        });
        done();
      });
    });

    it('returns the exhibitor default information since it should not be displayed because it is not plus', (done) => {
      const params = { ...baseParams, type: 'lite' };

      const ExhibitorService = getModule();
      ExhibitorService(baseRequest, baseResponse, params).then((result) => {
        expect(result).toEqual({
          exhibitorInfo: {},
        });
        done();
      });
    });

    it('returns the exhibitor default information since it should not be displayed because it is not plus', (done) => {
      const request = { ...baseRequest,
        platform: {
          id: 'ML',
          siteId: 'ERROR',
        },
        user: {
          id: userId,
        } };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient({ fail: true });
      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({
          exhibitorInfo: {},
        });
        assertTimeoutConfig();
        assertRestClient({ request });
        done();
      });
    });

    it('returns the exhibitor default information from test environment because with melilab and production', (done) => {
      jest.doMock('frontend-env', () => ({
        PRODUCTION: true,
        SCOPE: 'testdevelop-nordic',
      }));
      const request = { ...baseRequest,
        platform: {
          id: 'ML',
          siteId: 'ERROR',
        },
        user: {
          id: userId,
        },
        cookies: {
          meliLab: 'develop-nordic',
        } };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient({ fail: true });
      const ExhibitorService = getModule();
      ExhibitorService(request, baseResponse, baseParams).then((result) => {
        expect(result).toEqual({
          exhibitorInfo: {},
        });
        assertTimeoutConfig();
        assertRestClient({ request });
        done();
      });
    });
  });
});
