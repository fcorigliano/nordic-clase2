const getModule = () => require('./index');

const userId = '1234';
const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  device: {
    mobile: false,
  },
  headers: {},
};
const baseResponse = {};
const baseParams = {
  type: 'plus',
};

const cartServiceError = {
  stack: 'some-stack',
};

const cartServiceResult = 'some-result';
const mockCartService = ({
  fail,
} = {}) => {
  const CartService = jest.fn();
  const getInfo = jest.fn().mockResolvedValue({
    data: cartServiceResult,
  });
  CartService.mockReturnValue({
    getInfo,
  });
  if (fail) {
    getInfo.mockRejectedValue(cartServiceError);
  } else {
    getInfo.mockResolvedValue({
      data: cartServiceResult,
    });
  }
  jest.doMock('nav-cart', () => ({ CartService }));

  const context = 'some-context';
  const buildRestClientContext = jest.fn().mockReturnValue(context);
  jest.doMock('frontend-restclient/src/build-context', () => buildRestClientContext);

  const assertCartService = ({ request }) => {
    expect(CartService).toHaveBeenCalledWith({
      siteId: request.platform.siteId,
      user: request.user,
      context,
    });
  };

  return {
    assertCartService,
  };
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('Cart Service', () => {
    beforeEach(() => jest.resetModules());

    it('returns the empty cart information for a specific site when there is no user', (done) => {
      const CartService = getModule();
      CartService(baseRequest, baseResponse, baseParams).then((result) => {
        expect(result).toBeDefined();
        expect(result.badge_icon).toBeDefined();
        done();
      });
    });

    it('returns the cart information for a specific site and for a specific user', (done) => {
      const request = { ...baseRequest,
        user: {
          id: userId,
          raw: {
            status: {
              shopping_cart: {
                buy: 'allowed',
              },
            },
          },
        } };

      const { assertCartService } = mockCartService();

      const CartService = getModule();
      CartService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(cartServiceResult);
        assertCartService({ request });
        done();
      });
    });

    it('returns the default cart information since cart should not be displayed', (done) => {
      const CartService = getModule();
      CartService(baseRequest, baseResponse, { type: 'lite' }).then((result) => {
        expect(result).toBeDefined();
        expect(result.badge_icon).not.toBeDefined();
        done();
      });
    });

    it('returns the empty cart information since cart api call failed', (done) => {
      const request = { ...baseRequest,
        user: {
          id: userId,
          raw: {
            status: {
              shopping_cart: {
                buy: 'allowed',
              },
            },
          },
        } };

      const { assertCartService } = mockCartService({ fail: true });
      const CartService = getModule();
      CartService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBeDefined();
        expect(result.badge_icon).toBeDefined();
        assertCartService({ request });
        done();
      });
    });
  });
});
