jest.doMock('frontend-env', () => ({
  PRODUCTION: true,
}));

const getModule = () => require('./index');

const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  device: {
    type: 'desktop',
  },
  cookies: {},
  headers: {},
};
const baseResponse = {
  cookie: () => {},
};
const baseParams = {
  type: 'plus',
  features: {
    menuShippingLocation: {
      isShippingLocation: true,
    },
  },
  urls: {
    mainDomain: {
      link: 'mercadolibre.com.ar',
    },
  },
};

const restClientResult = {
  id: 'nav-location',
  type: 'nav-location',
  title: 'Enviar a',
  label: 'Some label',
  zipcode: '1234',
  address_line: 'Some address',
  city: {
    id: 'TUxBQlBBUjYwMzZa',
    name: 'Parque Patricios',
  },
  state: {
    id: 'AR-C',
    name: 'Capital Federal',
  },
  country: {
    id: 'AR',
    name: 'Argentina',
  },
  inferred: false,
};

const timeoutConfig = 1234;

const mockTimeoutConfig = () => {
  const restClientTimeout = jest.fn().mockReturnValue(timeoutConfig);
  jest.doMock('./config', () => ({
    restClientTimeout,
    cookieMaxAge: 60 * 60 * 24 * 30 * 1000,
  }));

  const assertTimeoutConfig = () => expect(restClientTimeout).toHaveBeenCalledWith(true);

  return {
    assertTimeoutConfig,
  };
};

const restClientError = {
  stack: 'some-stack',
};

const mockRestClient = ({
  fail,
} = {}) => {
  const get = jest.fn();

  if (fail) {
    get.mockRejectedValue(restClientError);
  } else {
    get.mockResolvedValue({
      data: restClientResult,
    });
  }

  const context = 'some-context';
  const buildRestClientContext = jest.fn().mockReturnValue(context);
  jest.doMock('frontend-restclient/src/build-context', () => buildRestClientContext);

  const restClientMock = jest.fn().mockReturnValue(({ get }));
  jest.doMock('frontend-restclient', () => restClientMock);

  const assertRestClient = ({
    request,
  }) => {
    expect(restClientMock).toHaveBeenCalledWith({
      timeout: timeoutConfig,
      retry: {
        maxRetries: 0,
      },
      logErrors: false,
    });
    expect(get).toHaveBeenCalledWith(`/frontend/sites/${request.platform.siteId}/menu/location`, {
      context,
      params: {
        user_id: request.user && request.user.id,
        zipcode: request.cookies.cp || request.cookies.zipcode,
      },
      headers: {
        'X-CLIENT-NAME': request.device.type,
        'X-CLIENT-VERSION': '0.1',
      },
    });
    expect(buildRestClientContext).toHaveBeenCalledWith(request);
  };

  return {
    assertRestClient,
  };
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('CP Service', () => {
    beforeEach(() => jest.resetModules());

    it('returns null for cp since type is "lite"', (done) => {
      const params = { ...baseParams, type: 'lite' };

      const CPService = getModule();
      CPService(baseRequest, baseResponse, params).then((result) => {
        expect(result).toBe(null);
        done();
      });
    });

    it('returns null for cp since is not enable by features', (done) => {
      const params = { ...baseParams, features: null };
      const CPService = getModule();
      CPService(baseRequest, baseResponse, params).then((result) => {
        expect(result).toBe(null);
        done();
      });
    });

    it('returns cpInfo with basic info for user not logged and no zipcode cookie', (done) => {
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const CPService = getModule();
      CPService(baseRequest, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({
          request: baseRequest,
        });
        done();
      });
    });

    it('returns cpInfo with info with cookie cp "1211"', (done) => {
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const request = { ...baseRequest,
        cookies: {
          cp: '1211',
        } };
      const CPService = getModule();
      CPService(request, baseResponse, baseParams).then((result) => {
        assertTimeoutConfig();
        assertRestClient({
          request,
        });
        expect(result).toBe(restClientResult);
        done();
      });
    });

    it('returns cpInfo with info with user Id', (done) => {
      const request = { ...baseRequest,
        user: {
          id: '1234',
        } };
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const CPService = getModule();
      CPService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(restClientResult);
        assertTimeoutConfig();
        assertRestClient({
          request,
        });
        done();
      });
    });

    it('returns cpInfo and save to cookie', (done) => {
      const request = { ...baseRequest,
        user: {
          id: '1234',
        } };
      const response = { ...baseResponse,
        cookie: (name, data, options) => {
          expect(name).toBe('cp');
          expect(data).toBe('1260');
          expect(options.maxAge).toBe(2592000000);
          expect(options.httpOnly).toBe(true);
          expect(options.domain).toBe('.mercadolibre.com.ar');
        } };
      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const CPService = getModule();
      CPService(request, response, baseParams).then(() => {
        assertTimeoutConfig();
        assertRestClient({
          request,
        });
        done();
      });
    });

    it('returns endpoint with error', (done) => {
      const request = { ...baseRequest,
        cookies: {
          cp: 'ERROR',
        } };

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient({ fail: true });

      const CPService = getModule();
      CPService(request, baseResponse, baseParams).then((result) => {
        expect(result).toBe(null);
        assertTimeoutConfig();
        assertRestClient({
          request,
        });
        done();
      });
    });
  });
});
