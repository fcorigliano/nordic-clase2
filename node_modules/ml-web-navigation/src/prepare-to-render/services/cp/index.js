const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const { PRODUCTION } = require('frontend-env');
const { isPlus } = require('../../../layout-type-detection');
const { restClientTimeout, cookieMaxAge } = require('./config');
const logger = require('../logger');

const request = restClient({
  timeout: restClientTimeout(PRODUCTION),
  retry: {
    maxRetries: 0,
  },
  logErrors: false,
});

const onError = (err, zipcode, req) => {
  const errorType = 'cp';

  logger.error({
    req,
    err,
    errorType,
    message: err.stack,
    tags: {
      zipcode,
    },
  });

  return null;
};

const cpCookieIsNotSameAsApi = (cpCookie, zipcode) => cpCookie && cpCookie.split('|')[0] !== zipcode;

const setCookie = (cpInfo, cpCookie, mainDomainLink, res) => {
  if (!cpCookie || cpCookieIsNotSameAsApi(cpCookie, cpInfo.zipcode)) {
    const maxAge = cookieMaxAge;
    res.cookie(
      'cp',
      cpInfo.zipcode,
      { maxAge, httpOnly: true, domain: `.${mainDomainLink}` },
    );
  }
};

const shouldCPBeDisplayed = (type, isCPEnabled) => isPlus(type) && isCPEnabled;

const execute = ({
  siteId,
  type,
  user,
  isCPEnabled,
  zipcodeCookie,
  cpCookie,
  device,
  res,
  mainDomainLink,
  req,
}) => {
  if (!shouldCPBeDisplayed(type, isCPEnabled)) {
    return Promise.resolve(null);
  }

  const endpoint = `/frontend/sites/${siteId}/menu/location`;
  const params = {
    user_id: user && user.id,
    zipcode: zipcodeCookie,
  };
  const headers = {
    'X-CLIENT-NAME': device.type,
    'X-CLIENT-VERSION': '0.1',
  };
  const config = {
    params,
    headers,
    context: buildRestClientContext(req),
  };

  return request.get(endpoint, config)
    .then((response) => {
      const cpInfo = response.data;
      if (cpInfo && cpInfo.zipcode) {
        setCookie(cpInfo, cpCookie, mainDomainLink, res);
      }
      return cpInfo;
    })
    .catch(err => onError(err, zipcodeCookie, req));
};

const generateServiceContext = (req, res, params) => {
  const { platform, user, cookies, device } = req;
  const { type, features, urls } = params;

  return {
    siteId: platform.siteId,
    user,
    type,
    features,
    req,
    zipcodeCookie: cookies.cp || cookies.zipcode,
    cpCookie: cookies.cp,
    isCPEnabled: features && features.menuShippingLocation && features.menuShippingLocation.isShippingLocation,
    device,
    res,
    mainDomainLink: urls.mainDomain.link,
  };
};

module.exports = (req, res, params) => execute(generateServiceContext(req, res, params));

