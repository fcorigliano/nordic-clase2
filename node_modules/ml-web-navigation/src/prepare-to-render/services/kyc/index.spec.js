const getModule = () => require('./index');

jest.doMock('frontend-env', () => ({
  PRODUCTION: true,
}));

const userId = '1234';
const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  headers: {},
};

const feConfigEnvironment = 'testing';

const restClientResult = 'some-user-menu-data';

const timeoutConfig = 1234;

const mockTimeoutConfig = () => {
  const restClientTimeout = jest.fn().mockReturnValue(timeoutConfig);
  jest.doMock('./config', () => ({
    restClientTimeout,
  }));

  const assertTimeoutConfig = () => expect(restClientTimeout).toHaveBeenCalledWith(true);

  return {
    assertTimeoutConfig,
  };
};

const restClientError = {
  stack: 'some-stack',
};

const campaign = '123';

const mockRestClient = ({
  fail,
} = {}) => {
  const get = jest.fn();

  if (fail) {
    get.mockRejectedValue(restClientError);
  } else {
    get.mockResolvedValue({
      data: restClientResult,
    });
  }

  const context = 'some-context';
  const buildRestClientContext = jest.fn().mockReturnValue(context);
  jest.doMock('frontend-restclient/src/build-context', () => buildRestClientContext);

  const restClientMock = jest.fn().mockReturnValue(({ get }));
  jest.doMock('frontend-restclient', () => restClientMock);

  const assertRestClient = ({
    request,
  }) => {
    expect(restClientMock).toHaveBeenCalledWith({
      timeout: timeoutConfig,
      retry: {
        maxRetries: 0,
      },
      logErrors: false,
    });
    expect(get).toHaveBeenCalledWith(`/kyc-onboarding/v1/campaigns/${campaign}/users/${request.user.id}?caller.id=${request.user.id}`, {
      context,
    });
    expect(buildRestClientContext).toHaveBeenCalledWith(request);
  };

  return {
    assertRestClient,
  };
};

const mockConfig = () => {
  const getValue = jest.fn().mockReturnValue({
    uif: {
      campaignId: campaign,
    },
  });

  jest.doMock('ml-navigation-config', () => ({ getValue }));

  const assertConfig = ({
    request,
  }) => {
    expect(getValue).toHaveBeenCalledWith({
      key: 'kyc',
      req: request,
      platform: request.platform,
    });
  };

  return {
    assertConfig,
  };
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('Kyc Service', () => {
    beforeEach(() => jest.resetModules());

    it('should returns the empty object since the user is not logged in', async () => {
      const turnOnKycMessages = true;
      const KycService = getModule();
      const response = await KycService(baseRequest, null, { feConfigEnvironment, turnOnKycMessages });
      expect(response).toEqual({});
    });

    it('should returns the empty information since the user is logged in, has an active campaign but not should see the banner', async () => {
      const request = Object.assign(baseRequest, {
        user: {
          id: userId,
        },
      });
      const turnOnKycMessages = true;

      const { assertTimeoutConfig } = mockTimeoutConfig();
      const { assertRestClient } = mockRestClient();
      const { assertConfig } = mockConfig();
      const KycService = getModule();
      const response = await KycService(request, null, { feConfigEnvironment, turnOnKycMessages });

      expect(response).toBe(restClientResult);
      assertTimeoutConfig();
      assertRestClient({ request });
      assertConfig({ request });
    });

    it('returns a value since the user is logged in, has an active campaign and should see the banner', async () => {
      const request = Object.assign(baseRequest, {
        user: {
          id: userId,
        },
      });
      const turnOnKycMessages = true;

      const KycService = getModule();
      const response = await KycService(request, null, { feConfigEnvironment, turnOnKycMessages });

      expect(response).toBe(restClientResult);
    });

    it('returns an empty object since the feature is turned off', async () => {
      const request = Object.assign(baseRequest, {
        user: {
          id: userId,
        },
      });
      const turnOnKycMessages = false;

      const KycService = getModule();
      const response = await KycService(request, null, { feConfigEnvironment, turnOnKycMessages });

      expect(response).toEqual({});
    });
  });
});
