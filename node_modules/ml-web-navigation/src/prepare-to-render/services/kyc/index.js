const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const { PRODUCTION } = require('frontend-env');
const { getValue } = require('ml-navigation-config');
const { restClientTimeout } = require('./config');

const endpoint = (user, campaign) => `/kyc-onboarding/v1/campaigns/${campaign}/users/${user}?caller.id=${user}`;
const shouldKycMessagesBeDisplayed = (user, turnOnKycMessages) => turnOnKycMessages && user;

const request = restClient({
  timeout: restClientTimeout(PRODUCTION),
  retry: {
    maxRetries: 0,
  },
  logErrors: false,
});

const defaultResult = Promise.resolve({});
const execute = ({
  user,
  platform,
  turnOnKycMessages,
  req,
}) => {
  if (!shouldKycMessagesBeDisplayed(user, turnOnKycMessages)) {
    return defaultResult;
  }

  const kycConfig = getValue({
    key: 'kyc',
    req,
    platform,
  });

  if (kycConfig && kycConfig.uif) {
    const { uif } = kycConfig;
    const url = endpoint(user.id, uif.campaignId);
    return request
      .get(url, {
        context: buildRestClientContext(req),
      })
      .then(response => response.data || {})
      .catch(() => defaultResult);
  }

  return defaultResult;
};

const generateServiceContext = (req, _, params) => {
  const { platform, user } = req;
  const { turnOnKycMessages } = params;

  return {
    platform,
    req,
    user,
    turnOnKycMessages,
  };
};

module.exports = (req, res, params) => execute(generateServiceContext(req, res, params));

