/* eslint-disable security/detect-object-injection */
const { getValue } = require('ml-navigation-config');

const HEADER_TEST_SUFFIX = '-test';
const VERSION_SEPARATOR = '=';
const FEATURE_SEPARATOR = ';';
const HEADER_NAME = 'x-navigation-features';

/**
 * Returns a list of features with their versions parsed from the raw navigation
 * feature header. the format from that header is `feature-1=x.x.x;feature-2=x.x.x;`
 * @param {object} headers - key/value with the request headers and their values
 * @param {string} key - header key to retrieve the features from
 */
const getFeatures = (headers, key) => {
  if (headers && headers[key]) {
    const featuresVersions = headers[key].split(FEATURE_SEPARATOR);

    return featuresVersions;
  }

  return [];
};

/**
 * Checks whether the raw feature has a version configured. Format could be `feature-1=x.x.x;`
 * @param {string} feature - raw feature string
 */
const hasSpecificVersionConfigured = (feature) => feature.indexOf(VERSION_SEPARATOR) !== -1;

const getFeature = (featureString) => {
  let featureKey = null;
  let featureValue = null;
  if (hasSpecificVersionConfigured(featureString)) {
    const keyValue = featureString.split(VERSION_SEPARATOR);
    // eslint-disable-next-line prefer-destructuring
    featureKey = keyValue[0];
    // eslint-disable-next-line prefer-destructuring
    featureValue = keyValue[1];
  } else if (featureString.length) {
    featureKey = featureString;
    featureValue = true;
  }
  return { featureKey, featureValue };
};
/**
 * Returns a key/value object of features with their versions parsed from the raw navigation
 * feature header. the format from that header is `feature-1=x.x.x;feature-2=x.x.x;`
 * @param {object} headers - key/value with the request headers and their values
 * @param {string} headerName - navigation feature header to check
 */
const getFeaturesFromHeader = (headers, headerName) => {
  const features = {};
  const featuresTest = {};

  /**
   * Navigation features header in production is called `x-navigation-features` but for testing envs,
   * it is called `x-navigation-features-test`. In order to check the version that needs to be used
   * we check both headers to obtain the different versions.
   */
  const featuresVersions = getFeatures(headers, headerName);
  const featuresVersionsTest = getFeatures(
    headers,
    headerName + HEADER_TEST_SUFFIX,
  );

  featuresVersions.forEach((featureString) => {
    const { featureKey, featureValue } = getFeature(featureString);
    features[featureKey] = featureValue;
  });

  featuresVersionsTest.forEach((featureString) => {
    const { featureKey, featureValue } = getFeature(featureString);
    featuresTest[featureKey] = featureValue;
  });

  return { features, featuresTest };
};

const overrideDiscountsFeature = (features, platform) => features.discounts && features.discounts.indexOf(platform.siteId) !== -1;

const getNavigationFeatures = (req) => {
  const { platform, headers } = req;
  const featuresByConfig = getValue({
    key: 'widgetsVersions',
    req,
    platform,
  });
  const { features: featuresByHeader, featuresTest: featuresByHeaderTest } = getFeaturesFromHeader(headers, HEADER_NAME);

  const features = {

    ...featuresByHeader,
    ...featuresByConfig,
    ...featuresByHeaderTest,
  };
  features.discountsEnabled = overrideDiscountsFeature(features, platform);
  features.modelessBoxVersion = features.modelessBoxVersion ?? headers['x-notifications-version'];
  return features;
};

module.exports = (req) => Promise.resolve(getNavigationFeatures(req));
