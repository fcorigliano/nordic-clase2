const getModule = () => require('./index');
const baseRequest = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
  },
  headers: {},
  cookies: {},
};


const mockConfiguration = (toReturn, request) => {
  const getValue = jest.fn().mockReturnValue(toReturn);
  jest.doMock('ml-navigation-config', () => ({ getValue }));

  const assertConfigGetCalled = () => {
    expect(getValue).toHaveBeenCalledWith({
      key: 'widgetsVersions',
      req: request,
      platform: request.platform,
    });
  };

  return {
    assertConfigGetCalled,
  };
};

describe('Mercado Libre - Prepare to Render', () => {
  describe('Navigation Features Service', () => {
    beforeEach(() => jest.resetModules());

    it('returns empty object when there is no headers and no config set up', (done) => {
      const { assertConfigGetCalled } = mockConfiguration({}, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({});
        done();
      });
    });

    it('returns from header test when there is a header with suffix "-test"', (done) => {
      const mockedValues = {
        categoriesVersion: '1.4.2',
      };
      baseRequest.headers = {
        'x-navigation-features-test': 'categoriesVersion=1.4.0',
        'x-navigation-features': 'categoriesVersion=1.3.0',
      };
      const { assertConfigGetCalled } = mockConfiguration(mockedValues, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({ categoriesVersion: '1.4.0' });
        done();
      });
    });
    it('returns from config when there is a something on config with widgetsVersions', (done) => {
      const mockedValues = {
        categoriesVersion: '1.4.2',
      };
      baseRequest.headers = {
        'x-navigation-features-test': 'onBoardingCPVersion=1.1.0',
        'x-navigation-features': 'categoriesVersion=1.3.0',
      };
      const { assertConfigGetCalled } = mockConfiguration(mockedValues, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({ onBoardingCPVersion: '1.1.0', categoriesVersion: '1.4.2' });
        done();
      });
    });
    it('returns from header without suffix when there is nothing on  config with widgetsVersions and nothing with siffix header', (done) => {
      const mockedValues = {
        onBoardingCPVersion: '1.1.1',
      };
      baseRequest.headers = {
        'x-navigation-features-test': 'onBoardingCPVersion=1.1.0',
        'x-navigation-features': 'categoriesVersion=1.3.0',
      };
      const { assertConfigGetCalled } = mockConfiguration(mockedValues, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({ onBoardingCPVersion: '1.1.0', categoriesVersion: '1.3.0' });
        done();
      });
    });
    it('returns modelessBoxVersion from header x-navigation-features instead of x-notifications-version when there is something on the header', (done) => {
      const mockedValues = {
        onBoardingCPVersion: '1.1.1',
      };
      baseRequest.headers = {
        'x-navigation-features-test': 'onBoardingCPVersion=1.1.0',
        'x-navigation-features': 'categoriesVersion=1.3.0;modelessBoxVersion=2.0.0',
        'x-notifications-version': '2.3.0',
      };
      const { assertConfigGetCalled } = mockConfiguration(mockedValues, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({ onBoardingCPVersion: '1.1.0', categoriesVersion: '1.3.0', modelessBoxVersion: '2.0.0' });
        done();
      });
    });
    it('returns modelessBoxVersion from header x-notifications-version instead of config others headers when there is nothing there', (done) => {
      const mockedValues = {
        onBoardingCPVersion: '1.1.1',
      };
      baseRequest.headers = {
        'x-navigation-features-test': 'onBoardingCPVersion=1.1.0',
        'x-navigation-features': 'categoriesVersion=1.3.0',
        'x-notifications-version': '2.3.0',
      };
      const { assertConfigGetCalled } = mockConfiguration(mockedValues, baseRequest);
      const NavigationFeaturesService = getModule();
      NavigationFeaturesService(baseRequest).then((result) => {
        assertConfigGetCalled();
        expect(result).toEqual({ onBoardingCPVersion: '1.1.0', categoriesVersion: '1.3.0', modelessBoxVersion: '2.3.0' });
        done();
      });
    });
  });
});
