/* eslint-disable func-names, no-var, no-param-reassign, one-var, vars-on-top, prefer-template, no-useless-escape */
/* eslint-disable no-undef, no-restricted-globals, no-global-assign, prefer-destructuring */
/* global window, navigator, XMLHttpRequest */
(function (window) {
  function getUrlVars() {
    var vars = {};
    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,
      /* eslint-disable prefer-arrow-callback */
      function (m, key, value) {
        vars[key] = value;
      });
    return vars;
  }

  function addQueryParam(param, key, value) {
    return param.concat('&' + key + '=').concat(value);
  }

  var vars = getUrlVars();
  var mattUrl = 'https://matt' + window.location.hostname.substr(window.location.hostname.indexOf('.'), window.location.hostname.length);
  var go = window.location.protocol + '//' + window.location.host + window.location.pathname;
  mattUrl = mattUrl.concat('?go=').concat(go);

  /* eslint-disable prefer-arrow-callback */
  Object.keys(vars).forEach(function (key) {
    if (key === 'gclid') {
      mattUrl = addQueryParam(mattUrl, 'gclid', vars.gclid);
    } else if (key === 'matt_tool') {
      mattUrl = addQueryParam(mattUrl, 'tool', vars.matt_tool);
    } else if (key === 'matt_word') {
      mattUrl = addQueryParam(mattUrl, 'word', vars.matt_word);
    } else if (key.indexOf('matt_') >= 0) {
      mattUrl = addQueryParam(mattUrl, key, vars[key]);
    } else if (key === 'gbraid') {
      mattUrl = addQueryParam(mattUrl, 'gbraid', vars.gbraid);
    } else if (key === 'wbraid') {
      mattUrl = addQueryParam(mattUrl, 'wbraid', vars.wbraid);
    }
  });

  var bodyParams = {};
  var referrer = window.document.referrer;

  if (referrer) {
    bodyParams.previousReferrer = referrer;
  }

  if (navigator && navigator.sendBeacon) {
    status = navigator.sendBeacon(mattUrl, JSON.stringify(bodyParams));
  } else {
    var Http = new XMLHttpRequest();
    Http.open('POST', mattUrl);
    Http.send(JSON.stringify(bodyParams));
  }
}(window));
