const { readFileSync } = require('fs');

const {
  expectedHydrateLineRegex,
  hydrateExportedAsTrueRegex,
  hydrateExportedAsFalseRegex,
  whiteSpaceRegex,
} = require('./regexs');

const { log } = require('../../../logger');
const {
  getInvalidHydratePropertyError,
  getHydratePropertyError,
} = require('./error-messages');

let countOfNonHydratedEntries = 0;

const getNonHydratedEntriesCount = () => countOfNonHydratedEntries;

const sumANonHydratedEntry = () => {
  countOfNonHydratedEntries += 1;
};

const getViewContentIfHydratePropertyFound = (view) => {
  let viewContent = '';

  try {
    viewContent = (readFileSync(view)).toString().replace(whiteSpaceRegex, '');

    if (!expectedHydrateLineRegex.test(viewContent)) {
      viewContent = '';
    }
  } catch (error) {
    throw new Error(getHydratePropertyError(view, error));
  }

  return viewContent;
};

const getHydrateProperty = (view) => {
  let viewContent;

  try {
    viewContent = getViewContentIfHydratePropertyFound(view);

    if (!viewContent) return true;

    const hydrateExportedAsTrue = hydrateExportedAsTrueRegex.test(viewContent);
    const hydrateExportedAsFalse = hydrateExportedAsFalseRegex.test(viewContent);

    if (!hydrateExportedAsTrue && !hydrateExportedAsFalse) {
      throw new Error(getInvalidHydratePropertyError(view));
    }

    if (hydrateExportedAsFalse) {
      sumANonHydratedEntry();
      return false;
    }
  } catch (error) {
    log.error(error.message);
  }

  return true;
};

module.exports = {
  getNonHydratedEntriesCount,
  getHydrateProperty,
};

if (process.env.NODE_ENV === 'test') {
  exports = module.exports;
  exports.getViewContentIfHydratePropertyFound = getViewContentIfHydratePropertyFound;
}
