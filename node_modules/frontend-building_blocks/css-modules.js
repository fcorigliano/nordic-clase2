const common = require('./common');

/**
 * CSS Modules webpack block.
 *
 * @see https://github.com/webpack/css-loader
 * @param {object} [options]
 * @param {RegExp, Function, string}  [options.exclude]         Directories to exclude.
 * @param {number}                    [options.importLoaders]
 * @param {string}                    [options.localIdentName]
 * @return {Function}
 */
function cssModules(fileType, options = {}) {
  const localIdentDefault = String(process.env.NODE_ENV) === 'production'
    ? '[hash:base64:10]'
    : '[name]--[local]--[hash:base64:5]';

  const loader = 'css-loader';
  const baseLoaders = { loader, options: {} };

  const importLoaders = options.importLoaders || 1;
  const localIdentName = options.localIdentName || localIdentDefault;

  return (context, webpackConfig) => {
    let typeLoaders = [baseLoaders];

    try {
      const currentConfig = common.getLoaderConfigByType(context, webpackConfig, fileType);
      if (Array.isArray(currentConfig.use)) {
        typeLoaders = currentConfig.use;
      }
    } catch (e) {
      throw new Error('Loader config is required to enable css modules');
    }

    const cssLoaderIndex = typeLoaders.findIndex((l) => l === loader || l.loader === loader);

    if (cssLoaderIndex === -1) {
      throw new Error(`${loader} is required to enable css modules`);
    }

    if (typeof typeLoaders[cssLoaderIndex] === 'string') {
      typeLoaders[cssLoaderIndex] = baseLoaders;
    }

    typeLoaders[cssLoaderIndex].options = {

      ...typeLoaders[cssLoaderIndex].options,
      modules: {
        localIdentName,
      },
      sourceMap: true,
      importLoaders,
    };

    return {
      module: {
        rules: [
          {
            test: context.fileType(fileType),
            use: typeLoaders,
            ...(options.exclude ? {
              exclude: Array.isArray(options.exclude) ? options.exclude : [options.exclude],
            } : {}),
          },
        ],
      },
    };
  };
}

module.exports = cssModules;
