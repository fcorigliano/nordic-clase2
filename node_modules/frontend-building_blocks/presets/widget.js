/**
 * Module dependencies
 */
const path = require('path');
const cssnano = require('cssnano');
const nodeExternals = require('webpack-node-externals');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const autoprefixer = require('autoprefixer');
const webpack = require('webpack');
const TerserPlugin = require('terser-webpack-plugin'); // TODO: https://github.com/mercadolibre/fury_frontend-building-blocks/issues/13
const {
  group,
  setOutput,
  setStats,
  addPlugins,
  customConfig,
  sourceMaps,
  env, fileType, setTarget,
} = require('../index');
const babel = require('../babel');
const sass = require('../sass');
const postcss = require('../postcss');
const { fastRefreshEnabled, fastRefreshBabelPlugin } = require('../utils/fast-refresh');
const browsersList = require('../core/browsersList');

const nodeEnv = process.env.NODE_ENV || 'development';
const postCssPlugins = [
  autoprefixer({
    overrideBrowserslist: browsersList,
    flexbox: 'no-2009',
  }),
].concat(nodeEnv === 'production' ? [cssnano({
  preset: ['default', { normalizeUrl: false }], // @see https://cssnano.co/guides/presets
})] : []);

/**
 * Widget Preset
 */
function widgetPreset({
  buildPath, name, version, babelrc, target,
} = {}) {
  const actualBuildPath = buildPath || './lib';

  const babelConfig = {
    presets: [
      '@babel/preset-react',
      ['@babel/preset-env', {
        targets: { browsers: browsersList },
      }],
    ],
    plugins: [
      '@babel/plugin-proposal-object-rest-spread',
      ...fastRefreshBabelPlugin('widget'),
    ].concat(nodeEnv === 'production' ? [
      '@babel/plugin-transform-react-constant-elements',
      '@babel/plugin-transform-react-inline-elements',
      'babel-plugin-transform-react-remove-prop-types',
    ] : []),
    ...babelrc,
  };

  return group([
    setTarget(target),
    babel(babelConfig),
    postcss(fileType('text/css'), postCssPlugins),
    postcss(fileType('text/x-sass'), postCssPlugins),
    sass(),
    setStats('adaptive'),
    customConfig({
      externals: [
        nodeExternals(),
      ],
    }),
    env('development', [
      sourceMaps(),
      setOutput({
        libraryTarget: 'window',
        library: name,
        path: path.join(path.resolve('.'), 'examples/build'),
        filename: '[name].js',
      }),
      addPlugins([
        ...(fastRefreshEnabled ? [
          new webpack.HotModuleReplacementPlugin(),
          new ReactRefreshWebpackPlugin({ overlay: false })] : []
        ),
      ]),
    ]),
    env('production', [
      setOutput({
        libraryTarget: 'window',
        library: name,
        path: path.join(path.resolve('.'), `${actualBuildPath}/v${version}`),
        filename: '[name].js',
        clean: true,
      }),
      customConfig({
        optimization: {
          minimize: true,
          minimizer: [
            new TerserPlugin({
              parallel: true,
              terserOptions: {
                ecma: undefined,
                warnings: false,
              },
            }),
          ],
        },
      }),
    ]),
  ]);
}

/**
 * Expose widgetPreset
 */
module.exports = widgetPreset;
