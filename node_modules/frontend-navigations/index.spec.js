/* eslint-disable import/no-extraneous-dependencies */
const factory = require('.');

describe('Factory', () => {
  describe('create', () => {
    it('returns Mercado Libre Navigation for platform ML and no site', () => {
      const navigation = factory.create({
        platform: {
          id: 'ML',
        },
      });

      expect(navigation.id).toEqual('ML');
    });

    it('returns Mercado Libre Navigation for platform ML and site with default navigation', () => {
      const navigation = factory.create({
        platform: {
          id: 'ML',
          siteId: 'MLA',
        },
      });

      expect(navigation.id).toEqual('ML');
    });

    it('returns Mercado Pago Navigation for platform MP', () => {
      const navigation = factory.create({
        platform: {
          id: 'MP',
        },
      });

      expect(navigation.id).toEqual('MP');
    });

    it('returns Mercado Libre CBT Navigation for platform ML and site CBT', () => {
      const navigation = factory.create({
        platform: {
          id: 'ML',
          siteId: 'CBT',
        },
      });

      expect(navigation.id).toEqual('CB');
    });

    it('returns Mercado Libre CBT Navigation for platform MP and site CBT', () => {
      const navigation = factory.create({
        platform: {
          id: 'MP',
          siteId: 'CBT',
        },
      });

      expect(navigation.id).toEqual('CB');
    });

    it('returns Mercado Shops Navigation for platform MS', () => {
      const navigation = factory.create({
        platform: {
          id: 'MS',
        },
      });

      expect(navigation.id).toEqual('MS');
    });

    it('returns First Party Navigation with truthy req.firstParty.isFirstPartyMarketplaceFlow', () => {
      const navigation = factory.create({
        platform: {
          id: 'ML',
        },
        firstParty: {
          isFirstPartyMarketplaceFlow: true,
        },
      });

      expect(navigation.id).toEqual('First-party');
    });

    it('returns Mercado Libre since req.firstParty.isFirstPartyMarketplaceFlow is falsy', () => {
      const navigation = factory.create({
        platform: {
          id: 'ML',
        },
        firstParty: {
          isFirstPartyMarketplaceFlow: false,
        },
      });

      expect(navigation.id).toEqual('ML');
    });

    it('returns throws an error since platform was not provided', () => {
      expect(() => factory.create({
        platform: {
          id: null,
        },
      })).toThrow();
    });

    it('returns null since platform provided is not supported', () => {
      expect(factory.create({
        platform: {
          id: 'imaginary-platform',
        },
      })).toEqual(null);
    });
  });

  describe('get', () => {
    it('returns known navigation', () => {
      const navigation = factory.get('First-party');

      expect(navigation.id).toBe('First-party');
    });

    it('returns null for unknown navigation', () => {
      const navigation = factory.get('unknown');

      expect(navigation).toBe(null);
    });
  });
});
