const { getLoginURL, getAccountAccessLiteURL } = require('@auth/urls');
const config = require('frontend-config');
const { getPlatform } = require('frontend-platform_detection');
const { isMshopsRequest } = require('./mshops/helpers');
const logger = require('./logger');

/**
 * @param {Express.Request} req
 */
const baseURL = (req) => {
  const { platform } = req;
  const { id, siteId } = platform;
  const mainDomain = config.get('url.mainDomain.link', id, siteId);
  const prependedSubdomain = siteId === 'CBT' ? '' : 'www.';

  return `https://${prependedSubdomain}${mainDomain}`;
};

/**
 * URL where auth error page is located.
 * @param {Express.Request} req Current request
 */
exports.failedAuthURL = (req) => {
  const { hostname, originalUrl } = req;
  const redirectURL = `https://${hostname}${originalUrl}`;
  const errorPath = `/auth/error?retry_url=${encodeURIComponent(redirectURL)}`;

  if (isMshopsRequest(req)) {
    return errorPath;
  }

  return `${baseURL(req)}${errorPath}`;
};

/**
 * Returns the URL to redirect a failed authorization.
 * @param {Express.Request} req
 */
exports.unauthorizedURL = (req) => {
  if (isMshopsRequest(req)) {
    logger.warn('Mshops user has site_status disabled when he should not', {
      user_id: req.auth.user.id,
      detached_id: req.auth.session.detached_id,
    });

    return getAccountAccessLiteURL(req);
  }

  const { platform } = req;
  if (platform) {
    return config.get('url.helpValidateUser.link', platform.id, platform.siteId);
  }

  return null;
};

/**
 * @param {import('express').Request} req Request
 */
exports.getLoginURL = (req) => {
  if (isMshopsRequest(req)) {
    const { hostname, originalUrl, platform } = req;
    const currentPlatform = getPlatform(hostname);

    // If navigating in MS subdomain and shop has delegated domain,
    // or if navigating in ML (CHON),
    // redirect user to delegated domain to see if there's a session there.
    if (platform?.shop && (
      (currentPlatform && currentPlatform.id !== 'MS')
      || (currentPlatform?.id === 'MS' && !getPlatform(platform.shop.domain)))
    ) {
      return new URL(originalUrl, `https://${platform.shop.domain}`).href;
    }

    return getAccountAccessLiteURL(req);
  }

  return getLoginURL(req);
};
