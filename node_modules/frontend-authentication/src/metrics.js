const {
  PRODUCTION,
  IS_CI,
  APPLICATION,
  SCOPE,
  FURY_IS_TEST_SCOPE,
  npm_package_name, // eslint-disable-line camelcase
} = require('frontend-env');
const statsd = require('frontend-statsd/internal');
const config = require('frontend-config');
const logger = require('./logger');
const { PACKAGE_VERSION } = require('./constants');

const baseTags = {
  application: APPLICATION || npm_package_name, // eslint-disable-line camelcase
  scope: SCOPE || 'unknown',
  test_scope: FURY_IS_TEST_SCOPE || 'unknown',
  sdk_version: PACKAGE_VERSION,
};

/**
 * @param {Error} axiosError Error thrown from request error (frontend-restclient)
 * @returns {string} Type of error
 */
const getErrorCode = axiosError => (axiosError.response
  && axiosError.response.status
  && axiosError.response.status.toString())
  || 'transport_error'; // If response has no status, then a transport error ocurred (timeout)

const REQUEST_METRIC_NAMES = {
  GET_SSID: 'auth.get.ssid.client.request.time',
  GET_TOKEN: 'auth.get.token.client.request.time',
  GET_USER: 'auth.get.user.client.request.time',
  GET_MSHOPS: 'auth.get.mshops.client.request.time',
};

/**
 * Log request delay to DataDog
 *
 * @param {Object} params
 * @param {number} params.startTime
 * @param {'GET_SSID' | 'GET_TOKEN' | 'GET_USER' | 'GET_MSHOPS'} params.operation
 * @param {number} params.retryCount
 * @param {number} [params.shopId]
 * @param {Error} [params.error]
 * @param {string} [params.tokenSource]
 */
const logAPIRequest = (params) => {
  const {
    startTime,
    operation,
    retryCount,
    tokenSource,
    shopId,
    error,
  } = params;

  const elapsedTime = Date.now() - startTime;
  const metricName = REQUEST_METRIC_NAMES[operation];

  const tags = {
    ...baseTags,
    retry_count: retryCount,
    error: String(!!error), // True or false, as string
    ...operation === 'GET_TOKEN' && { source: tokenSource },
    ...operation === 'GET_MSHOPS' && { shop_id: shopId.toString() },
  };

  if (error) {
    tags.error_code = getErrorCode(error);
  }

  statsd.histogram(metricName, elapsedTime, tags);
};

/**
 * @param {Parameters<typeof logAPIRequest>[0]} loggerParams
 */
exports.createLoggerInterceptor = loggerParams => [(res) => {
  const startTime = res.config?.startTime;
  const retryCount = res.config?.headers?.['x-retry'];
  logAPIRequest({ ...loggerParams, retryCount, startTime });
  return res;
}, (error) => {
  const startTime = error.config?.startTime;
  const retryCount = error.config?.headers?.['x-retry'];
  logAPIRequest({
    ...loggerParams, error, retryCount, startTime,
  });
  return Promise.reject(error);
}];

/**
 * @param {import('nordic-axios').AxiosRequestConfig} reqConfig
 */
exports.requestHook = (reqConfig) => {
  reqConfig.startTime = Date.now();
  return reqConfig;
};

const ERROR_METRIC_NAME = 'auth.authorization.error';

/**
 * Log authorization error
 *
 * @param {Object} params
 * @param {Error} params.error
 * @param {'REDIRECT_LOGIN' | 'REDIRECT_ERROR' | 'IGNORE_REDIRECT' | 'AJAX_RESPONSE'} params.onError
 * @param {'token' | 'ssid' | 'users' | 'mshops_session'} [params.failedRequest]
 */
exports.logAuthorizationError = (params) => {
  const { error, onError, failedRequest } = params;
  const tags = {
    ...baseTags,
    error_code: getErrorCode(error),
    on_error: onError,
    failed_request: failedRequest || 'unknown',
  };

  statsd.increment(ERROR_METRIC_NAME, tags);
};

const USER_PROP_METRIC_NAME = 'auth.user.prop.accessed';
const SESSION_PROP_METRIC_NAME = 'auth.session.prop.accessed';

/**
 * Log deprecated user or session objects being accessed
 * @param {'user' | 'session'} obj User or Session
 * @param {string} prop Property accessed
 * @param {import('frontend-platform_detection').Platform} platform
 */
exports.logDeprecatedUserOrSessionAccessed = (obj, prop, platform) => {
  const { id: platformId, siteId } = platform;
  const shouldLog = config.get('auth.logDeprecatedProp', platformId, siteId);

  if (PRODUCTION) {
    if (shouldLog === true) {
      const metric = obj === 'user' ? USER_PROP_METRIC_NAME : SESSION_PROP_METRIC_NAME;
      statsd.increment(metric, { ...baseTags, property: prop });
    }
  } else if (!IS_CI) {
    logger.warn(`req.${obj === 'user' ? 'user' : 'userSession'} has been deprecated. Please read the following guide to migrate to req.auth: https://nordic.adminml.com/docs/migration-guides/modules/auth/migration-req-auth`);
  }
};
