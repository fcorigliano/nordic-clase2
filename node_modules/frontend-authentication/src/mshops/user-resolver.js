const { fetchSession } = require('../client/mshops-session');
const { getUser } = require('../client/user-client');
const { MSHOPS_SESSION_COOKIE } = require('../constants');

const SESSION_REGEX = /^scp-\d{6}-\w+-(\d+)-\d+-\d+$/;

/**
 * @param {string | undefined} session Mshops session
 * @returns {number}
 */
const getUserFromSession = (session) => {
  const userId = session?.match(SESSION_REGEX)?.[1];

  return userId ? Number.parseInt(userId, 10) : null;
};

/**
 * @param {import('express').Response} res
 */
const clearMshopsCookie = (res) => {
  res.clearCookie(MSHOPS_SESSION_COOKIE, {
    httpOnly: true, secure: true, sameSite: false,
  });
};

/** @type {import('../user-resolver').UserResolver} */
exports.mshopsUserResolver = async (req, res) => {
  /** @type {string | undefined} */
  const session = req.cookies[MSHOPS_SESSION_COOKIE];
  const userId = getUserFromSession(session);
  const { id: shopId, name: shopName } = req.platform.shop;
  /** @type {import('../../types').AuthInfo} */
  const authInfo = { method: 'MSHOPS', user: null, session: null };

  if (!(session && userId)) {
    return authInfo;
  }

  const [sessionResponse, userResponse] = await Promise.allSettled([
    fetchSession({ req, shopId, session }),
    getUser(userId, req),
  ]);

  if (sessionResponse.status === 'rejected') {
    /** @type {import('nordic-axios').AxiosError} */
    const error = sessionResponse.reason;
    authInfo.error = error;

    if (error.response?.status === 404) {
      clearMshopsCookie(res);
    }

    return authInfo;
  }

  if (userResponse.status === 'rejected') {
    authInfo.error = userResponse.reason;
    return authInfo;
  }

  const user = userResponse.value;

  if (!user.internal_tags.includes('mshops_buyer')
    || Number.parseInt(user.context.flow_id, 10) !== shopId) {
    clearMshopsCookie(res);
    return authInfo;
  }

  authInfo.session = sessionResponse.value;
  authInfo.user = {
    shopId,
    shopName,
    id: user.id,
    nickname: user.nickname,
    active: user.status.site_status === 'active',
    test: user.tags.includes('test_user'),
    raw: user,
  };

  return authInfo;
};
