const { STATUS_CODES } = require('http');
const defaults = require('../config/defaults');
const {
  isAdminRestricted,
  isAuthorized,
  handleUnauthenticatedReq,
  handleUnauthorizedReq,
  getJsonResponse,
} = require('./helpers');
const { failedAuthURL } = require('./urls');
const { logAuthorizationError } = require('./metrics');
const { resolveUser } = require('./user-resolver');

/**
 * Create an authorize middleware with the given options.
 * @param {Object} [options]
 * @param {string[] | false} [options.allowAdmins]
 * @param {boolean} [options.allowOperators]
 * @param {boolean} [options.navigateAsOperator]
 * @param {boolean} [options.allowWebviewAuthentication]
 * @param {boolean} [options.ignoreUserSiteStatus]
 * @param {boolean} [options.ignoreLoginRedirect]
 */
exports.authMiddleware = (options = {}) => {
  const opts = { ...defaults, ...options };

  // Sanitize allowAdmins option
  if (options.allowAdmins !== undefined) {
    if (options.allowAdmins === false) {
      opts.allowAdmins = [];
    } else if (!Array.isArray(options.allowAdmins)) {
      throw new Error('allowAdmins param must be false or an array with the http methods allowed to the admin. Refer to the documentation for more info: https://github.com/mercadolibre/fury_frontend-authentication');
    } else if (opts.allowAdmins.length > 0) {
      ['HEAD', 'OPTIONS'].forEach((method) => {
        if (!opts.allowAdmins.includes(method)) {
          opts.allowAdmins.push(method);
        }
      });
    }
  }

  if (options.requireReauthentication) {
    throw new Error('Reauthentication has been migrated to its own module. Please refer to this migration guide: https://github.com/mercadolibre/fury_frontend-reauthentication/blob/master/docs/MIGRATION-v1.md');
  }

  /**
   * Authorize the current request:
   * 1. Redirect to validateUser page if the logged user is not authorized.
   * 2. Redirect to login page if no authenticated user is presented.
   *
   * @type {import('express').RequestHandler}
   */
  return async function authorizationMiddleware(req, res, next) {
    const { user, error } = (await resolveUser(req, res, opts)) || {};

    // This is the exact place where we can put ACL functionality
    if (user) {
      if (isAdminRestricted(user.admin, opts.allowAdmins, req.method)) {
        res.status(403);

        if (req.xhr) {
          return res.json(getJsonResponse(403, { error: 'admin-is-restricted' }));
        }

        // Show 403 page to admins user.
        // TODO: The template should be dynamic by platform.
        return res.sendFile(`${__dirname}/templates/403.html`);
      }

      if (isAuthorized(user, opts)) {
        return next();
      }

      // Redirect to validateUser
      return handleUnauthorizedReq(req, res, next);
    }

    if (!error) {
      if (opts.ignoreLoginRedirect) {
        // In some cases it may be necessary to specify a different behaviour
        // instead of redirecting to login (default).
        // That implies that the application itself must define the expected redirect logic (next middleware).
        return next();
      }

      // Redirect to login or 401 if request is Ajax
      return handleUnauthenticatedReq(req, res, next);
    }

    let failedRequest;
    if (error.request) {
      const { path } = error.request;
      if (path.includes('access_token')) {
        failedRequest = 'token';
      } else if (path.includes('users/')) {
        failedRequest = 'users';
      } else if (path.includes('/mshops')) {
        failedRequest = 'mshops_session';
      } else {
        failedRequest = 'ssid';
      }
    }

    // Let users bypass redirect, even on 404 or API error to maintain previous behaviour
    // Analyze breaking change for next major version
    if (opts.ignoreLoginRedirect) {
      logAuthorizationError({ error, failedRequest, onError: 'IGNORE_REDIRECT' });
      return next();
    }

    const statusCode = error.response?.status || 500;
    if (statusCode >= 500) {
      const errorUrl = failedAuthURL(req);
      logAuthorizationError({ error, failedRequest, onError: req.xhr ? 'AJAX_RESPONSE' : 'REDIRECT_ERROR' });

      if (req.xhr) {
        return res.status(401).json({
          message: STATUS_CODES[401],
          url: errorUrl,
          code: 'EAUTHENTICATION',
        });
      }

      return res.redirect(errorUrl);
    }

    // Redirect to login or 401 if request is Ajax
    logAuthorizationError({ error, failedRequest, onError: req.xhr ? 'AJAX_RESPONSE' : 'REDIRECT_LOGIN' });
    return handleUnauthenticatedReq(req, res, next);
  };
};
