const { PRODUCTION, TEST } = require('frontend-env');
const { RestClient, buildContext } = require('frontend-restclient');
const { CLIENT_UA } = require('../constants');
const { getSessionFromHeadersSync } = require('../helpers');
const { createLoggerInterceptor, requestHook } = require('../metrics');

/** @type {import('frontend-restclient').RestClientConfig} */
const restClientConfig = {
  requestHook,
  timeout: PRODUCTION || TEST ? 300 : 10000,
  headers: { 'user-agent': CLIENT_UA },
};

const sessionClient = RestClient(restClientConfig);
sessionClient.client.interceptors.response.use(...createLoggerInterceptor({ operation: 'GET_SSID' }));

const accessTokenClient = RestClient(restClientConfig);

/**
 * Get the user session from API by using the session cookie
 *
 * @param {string} sessionCookie
 * @param {Express.Request} req
 * @returns {Promise.<object>}
 */
exports.getSessionFromCookie = (sessionCookie, req) => sessionClient
  .get('/auth/user_session', {
    context: buildContext(req),
    headers: { 'x-session-id': sessionCookie },
    params: {
      ...req.platform && {
        platform_id: req.platform.id,
        site_id: req.platform.siteId,
      },
    },
  })
  .then(res => res.data);

/**
 * Get the user session from API by using the access token
 *
 * @param {Object} obj
 * @param {string} obj.token
 * @param {string} obj.tokenSource
 * @param {Express.Request} obj.req
 * @returns {Promise.<object>}
 */
exports.getSessionFromToken = ({ req, token, tokenSource }) => {
  const interceptor = accessTokenClient.client.interceptors.response
    .use(...createLoggerInterceptor({ tokenSource, operation: 'GET_TOKEN' }));

  return accessTokenClient.get('/auth/access_token', {
    context: buildContext(req),
    headers: { 'X-Access-Token': token },
  })
    .then(res => res.data)
    .finally(() => {
      accessTokenClient.client.interceptors.response.eject(interceptor);
    });
};

/**
 * Get the user session from request headers
 *
 * @param req
 * @returns {Promise.<object>}
 */
exports.getSessionFromHeaders = function getSessionFromHeaders(req) {
  try {
    const session = getSessionFromHeadersSync(req.headers);
    return Promise.resolve(session);
  } catch (parseError) {
    return Promise.reject(parseError);
  }
};
