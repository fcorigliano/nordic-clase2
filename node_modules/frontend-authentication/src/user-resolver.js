const { PRODUCTION } = require('frontend-env');
const { getPlatform } = require('frontend-platform_detection');
const { getMeliUser } = require('./user-service');
const { mshopsUserResolver } = require('./mshops/user-resolver');
const { shouldResolveUserAgain, setAccessTokenCookieIfApplies } = require('./helpers');
const { logDeprecatedUserOrSessionAccessed } = require('./metrics');

/** @typedef {(
 *   req: import('express').Request,
 *   res: import('express').Response,
 *   opts: import('../types').AuthenticationOptions,
 * ) => Promise<import('../types').AuthInfo>} UserResolver */

/** @type {Record<import('../types').AuthMethod, UserResolver>} */
const userResolvers = {
  MELI_WEB: getMeliUser,
  MELI_WEBVIEW: getMeliUser,
  MSHOPS: mshopsUserResolver,
};

/**
 * Returns an array with valid auth methods
 *
 * @param {import('express').Request} req Request
 * @param {import('../types').AuthenticationOptions} opts
 * @returns {import('../types').AuthMethod[]} Valid Auth methods
 */
const determineAuthMethods = (req, opts) => {
  const { allowWebviewAuthentication } = opts;
  /** @type {import('../types').AuthMethod[]} */
  const availableAuthMethods = [];
  let platform = getPlatform(req.hostname);

  if (!platform && !PRODUCTION && req.query.domain_override) {
    platform = getPlatform(req.query.domain_override);
  }

  if (platform) {
    if (req.device?.webView) {
      if (allowWebviewAuthentication) {
        availableAuthMethods.push('MELI_WEBVIEW');
      }
    } else {
      availableAuthMethods.push('MELI_WEB');
    }
  }

  // Mshops Platform Detection must be activated to allow MShops Sessions
  // https://github.com/mercadolibre/fury_frontend-mshops-detection#reqplatformshop
  if (req.platform?.id === 'MS' && req.platform.shop) {
    availableAuthMethods.push('MSHOPS');
  }

  const forcedAuthMethod = req.query.fam?.toUpperCase();
  if (forcedAuthMethod && availableAuthMethods.includes(forcedAuthMethod)) {
    return [forcedAuthMethod];
  }

  return availableAuthMethods;
};

/**
 * @param {import('../types').AuthInfo} authInfo Authentication Info
 * @param {import('express').Request} req Express Request
 */
const setAuthReqProp = (authInfo, req) => {
  if (authInfo.user) {
    req.auth = authInfo;
  }

  if (authInfo.user && (authInfo.method === 'MELI_WEB' || authInfo.method === 'MELI_WEBVIEW')) {
    /** @type {(obj: 'user' | 'session') => ProxyHandler<import('../types/users').MeliUser>} */
    const generateProxyHandler = obj => ({
      get: (user, prop) => {
        if (!req.nordic.auth.loggedDeprecatedWarning) {
          req.nordic.auth.loggedDeprecatedWarning = true;
          logDeprecatedUserOrSessionAccessed(obj, prop, req.platform);
        }

        return user[prop];
      },
    });

    req.user = new Proxy(authInfo.user, generateProxyHandler('user'));
    req.userSession = new Proxy(authInfo.session, generateProxyHandler('session'));
  } else {
    // Wipe legacy props
    req.user = null;
    req.userSession = null;
  }
};

/**
 * Identify the user making this request
 * and set his info in the Request object
 *
 * @param {import('express').Request} req
 * @param {import('express').Response} res
 * @param {import('../types').AuthenticationOptions} opts
 *
 * @returns {Promise<import('../types').AuthInfo>}
 */
exports.resolveUser = async (req, res, opts) => {
  // Define Nordic object as non-writable if not already defined
  if (!req.nordic) {
    Object.defineProperty(req, 'nordic', { value: {} });
  }

  if (!req.nordic.auth) {
    Object.defineProperty(req.nordic, 'auth', { value: {} });
  }

  const authMethods = determineAuthMethods(req, opts);
  const alreadyResolvedUsers = authMethods
    .filter(method => req.nordic.auth[method])
    .map(method => Promise.resolve(req.nordic.auth[method]));

  const authPromises = alreadyResolvedUsers.length > 0 && !shouldResolveUserAgain(req, opts)
    ? alreadyResolvedUsers
    : authMethods.map(method => userResolvers[method](req, res, opts));

  const authInfo = (await Promise.allSettled(authPromises))
    .map((result) => {
      const { value: authData } = result;
      req.nordic.auth[authData.method] = authData;

      return authData;
    })
    .find(authData => authData.user || authData.error) || {};

  setAuthReqProp(authInfo, req);

  if (authInfo.method === 'MELI_WEBVIEW' && authInfo.user) {
    setAccessTokenCookieIfApplies(req, res);
  }

  return authInfo;
};
