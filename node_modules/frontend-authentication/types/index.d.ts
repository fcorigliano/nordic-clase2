import type { RequestHandler } from 'express';
import type {
  MeliAccessTokenSession, MeliWebSession, MShopsSession, RequestUserSession,
} from './sessions';
import type { MeliUser, MshopsUser } from './users';

declare global {
  namespace Express {
    // Express Request augmentation with custom props
    interface Request {
      /**
       * If user is logged-in, some of the user's info
       * will be stored here.
       *
       * @deprecated This property has been deprecated and will be deleted in a future version. Please use req.auth.user instead. See [this migration guide](https://nordic.adminml.com/docs/migration-guides/modules/auth/migration-req-auth).
       */
      user?: MeliUser | null;

      /**
       * If user is logged-in, the user's session info
       * will be stored here.
       *
       * @deprecated This property has been deprecated and will be deleted in a future version. Please use req.auth.session instead. See [this migration guide](https://nordic.adminml.com/docs/migration-guides/modules/auth/migration-req-auth).
       */
      userSession?: RequestUserSession | null;

      /**
       * If user is logged-in, the user's info and
       * his session info will be stored here,
       * as well as the auth method used.
       */
      auth?: RequestAuthInfo;
    }
  }
}

/**
 * Initialize an Express middleware that requires the user to be authenticated in the platform.
 *
 * @see https://github.com/mercadolibre/fury_frontend-authentication
 *
 * @param [options] Object with optional parameters to customize the type of user / authorization settings.
 */
export const authMiddleware: (options?: AuthenticationOptions) => RequestHandler;

/**
 * Express middleware to resolve user session seamlessly
 *
 * @see https://github.com/mercadolibre/fury_frontend-authentication
 */
export const authenticate: RequestHandler;

export interface AuthenticationOptions {
  /**
   * Allow operators (collaborators) to access this route.
   *
   * @default false
   */
  allowOperators?: boolean;

  /**
   * When navigating as an operator (collaborator), switch req.auth.user.id with req.auth.user.operatorId
   *
   * @since 2.12.0
   * @default false
   *
   * @deprecated This option has been deprecated and has no use in all applications that have already mitigated the Collaborators Session Vuln. More info [here](https://meli.workplace.com/notes/271968245036883)
   */
  navigateAsOperator?: boolean;

  /**
   * Ignore the site_status placed on the user and let them though either way.
   *
   * @default false
   */
  ignoreUserSiteStatus?: boolean;

  /**
   * Methods admins are allowed to use in this route via impersonalization.
   *
   * @since 3.0.0
   * @default ['GET', 'HEAD', 'OPTIONS']
   */
  allowAdmins?: string[];

  /**
   * WEBVIEWS ONLY
   *
   * Allow user to authenticate with an Access Token passed via Query Param, Cookie or Header
   *
   * @since 4.3.0
   * @default false
   */
  allowWebviewAuthentication?: boolean;

  /**
   * Set to true if you don't want the user to be redirected to login page
   * and handle the case yourself
   *
   * @default false
   */
  ignoreLoginRedirect?: boolean;
}

type AuthMethod = 'MELI_WEB' | 'MELI_WEBVIEW' | 'MSHOPS';
interface AuthData {
  method: AuthMethod;
}

export interface MeliWebAuthData extends AuthData {
  method: 'MELI_WEB';
  user: MeliUser;
  session: MeliWebSession;
}

export interface MeliWebviewAuthData extends AuthData {
  method: 'MELI_WEBVIEW';
  user: MeliUser;
  session: MeliAccessTokenSession;
}

export interface MshopsAuthData extends AuthData {
  method: 'MSHOPS';
  user: MshopsUser;
  session: MShopsSession;
}

export type RequestAuthInfo = MeliWebAuthData | MeliWebviewAuthData | MshopsAuthData;

type AuthInfo = RequestAuthInfo & {
  error?: Error;
};

// Expose types
export type {
  MeliAccessTokenSession, MeliWebSession, MShopsSession, RequestUserSession,
};
export type { MeliUser, MshopsUser };
