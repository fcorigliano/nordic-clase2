/* eslint-disable security/detect-object-injection */
/* eslint-disable no-undef */
/* eslint-disable no-param-reassign */

(function meliGA(win) {
  let settings = {
    customDimensions: {},
  };

  const TRANSLATIONS_GA_TO_BRIDGE = {
    page: 'path',
    eventCategory: 'category',
    eventAction: 'action',
    eventLabel: 'label',
    eventValue: 'value',
  };

  const addAttributeToHitIfApplies = (hit, key, value) => {
    if (value) {
      hit[key] = value;
    }
    return hit;
  };

  const renameObjectProperties = (oldProp, newProp, { [oldProp]: oldPropValue, ...others }) => {
    const propToUse = oldPropValue ? newProp : oldProp;
    return { [propToUse]: oldPropValue, ...others };
  };

  const normalizePropertyNames = (hit) => {
    Object.keys(TRANSLATIONS_GA_TO_BRIDGE).forEach((prop) => {
      hit = renameObjectProperties(prop, TRANSLATIONS_GA_TO_BRIDGE[prop], hit);
    });

    return hit;
  };

  const addCustomDimension = (key, value) => {
    const { customDimensions } = settings;
    customDimensions[key.replace('dimension', '')] = value;
    return { ...settings, customDimensions };
  };

  const injectCustomDimensionsToHitIfApplies = (hit) => {
    if (Object.keys(settings.customDimensions).length > 0) {
      hit = { ...hit, customDimensions: settings.customDimensions };
    }
    return hit;
  };

  const parsePageView = (hit, path) => {
    if (path) {
      hit.path = path;
    } else if (settings.page) {
      hit.path = settings.page;
    }
    return hit;
  };

  const processFieldObject = (hit, fieldsObject) => {
    if ('nonInteraction' in fieldsObject) {
      hit.nonInteraction = fieldsObject.nonInteraction;
    }
  };

  // eslint-disable-next-line no-unused-vars
  const parseEvent = (hit, [hitType, categoryOrFields, action, label, valueOrFieldsObject]) => {
    if (typeof categoryOrFields === 'object') {
      hit = { ...hit, ...categoryOrFields };
    } else {
      addAttributeToHitIfApplies(hit, 'category', categoryOrFields);
      addAttributeToHitIfApplies(hit, 'action', action);
      addAttributeToHitIfApplies(hit, 'label', label);

      if (valueOrFieldsObject) {
        if (typeof valueOrFieldsObject === 'object') {
          processFieldObject(hit, valueOrFieldsObject);
        } else {
          hit.value = valueOrFieldsObject;
        }
      }
    }
    return hit;
  };

  const parseHitByConfigObject = (hit, fields) => {
    fields.type = fields.hitType;
    delete fields.hitType;

    if (settings.page) {
      fields.path = settings.page;
    }

    hit = { ...hit, ...fields };

    return hit;
  };

  const parseHitByConfigParams = (hit, args) => {
    const type = args[0];
    hit.type = type;

    const allowedTypes = {
      pageview: () => parsePageView(hit, args[1]),
      event: () => parseEvent(hit, args),
    };

    hit = allowedTypes[type](hit, args);
    return hit;
  };

  const addTrackerKey = (track) => {
    if (settings.trackerKey) {
      track.trackerKey = settings.trackerKey.toUpperCase();
    }
  };

  const prepareHit = (args) => {
    let hit = {};

    if (typeof args[0] === 'object') {
      hit = parseHitByConfigObject(hit, args[0]);
    } else {
      hit = parseHitByConfigParams(hit, args);
    }
    hit = normalizePropertyNames(hit);
    hit = injectCustomDimensionsToHitIfApplies(hit);

    return hit;
  };

  const isGenericLandingTrack = () => (typeof window.AnalyticsCallback !== 'undefined'
                                      && !(window.AnalyticsCallback === undefined));

  const sendToGenericLanding = (track) => {
    addTrackerKey(track);
    window.AnalyticsCallback.sendTrackFromWebView(JSON.stringify(track));
  };

  const sendToWebkitLanding = (track) => {
    const mobileWebKit = window.MobileWebKit;

    if (typeof mobileWebKit !== 'undefined' && !(mobileWebKit === undefined)) {
      const trackFn = () => {
        mobileWebKit.executeNative({
          method: 'track_analytics',
          args: track,
        });
      };

      if (mobileWebKit.isConnected()) {
        trackFn();
      } else {
        const connectionHandler = () => {
          mobileWebKit.removeEventListener('connect', connectionHandler);
          trackFn();
        };

        mobileWebKit.addEventListener('connect', connectionHandler);
      }
    }
  };

  /**
   * Send an Analytics Hit to mobileWebKit
   * @param {Object} hit - The hit config object
   *
   * For pageview hits
   * @property {string} hit.type - The hit type -> 'pageview'
   * @property {string} [hit.path] - The hit path -> '/my_path'
   * @example
   *  send({ type: 'pageview', path: '/my_path'});
   *
   * For event hits
   * @property {string} hit.type - The hit type -> 'event'
   * @property {string} [hit.category] - The hit category -> 'CATEGORY'
   * @property {string} [hit.action] - The hit action -> 'ACTION'
   * @property {string} [hit.label] - The hit label -> 'LABEL'
   * @property {number} [hit.value] - The hit value -> 123
   *
   * @example
   *  send({ type: 'event', category: 'CATEGORY', action: 'ACTION'});
   */
  const send = (track) => {
    if (isGenericLandingTrack()) {
      sendToGenericLanding(track);
    } else {
      sendToWebkitLanding(track);
    }
  };

  /**
   * Adds a new property to the settings object. This will be sent on every hit.
   * If the key contains the string 'dimension', that will be procesed as a custom dimension
   *
   * @param {Array} [KEY, VALUE]
   */
  const set = ([key, value]) => {
    if (key.substring(0, 9) === 'dimension') {
      settings = addCustomDimension(key, value);
    } else {
      settings = { ...settings, [key]: value };
    }
  };

  /**
   * Entry point to the analytics library for webviews
   * Respects the same signature of the ga object.
   *
   * For pageview hits
   * @property {string} method - Type of action to execute ['send'|'set']
   * @property {string} [args] - Config parameters
   *
   * @example <caption>Setting a page path</caption>
   *  meli_ga('set', 'page', '/my_page');
   *
   * @example <caption>Setting a custom dimension</caption>
   *  meli_ga('set', 'dimension1', 'desktop');
   *
   * @example <caption>Sending a page</caption>
   *  meli_ga('send', 'pageview');
   *  meli_ga('send', { hitType: 'pageview' });
   *  meli_ga('send', 'pageview', '/my_path');
   *  meli_ga('send', { hitType: 'pageview', path: '/my_path' });
   *
   * @example <caption>Sending an event</caption>
   *  meli_ga('send', 'event', 'CATEGORY', 'ACTION');
   *  meli_ga('send', 'event', 'CATEGORY', 'ACTION', 'LABEL');
   *  meli_ga('send', 'event', 'CATEGORY', 'ACTION', 'LABEL', 123);
   *  meli_ga('send', 'event', 'CATEGORY', 'ACTION', 'LABEL', { useIntereaction: true });
   *  meli_ga('send', { hitType: 'event', category: 'CATEGORY', action: 'ACTION', label: 'LABEL', value: 123 });
   */
  function MeliGA(method, ...args) {
    const allowedMethods = {
      set,
      send: () => send(prepareHit(args)),
    };

    allowedMethods[method](args);
  }

  win.meli_ga = MeliGA;
}(window));
