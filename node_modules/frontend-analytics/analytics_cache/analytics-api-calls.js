const config = require('frontend-config');
const restclient = require('frontend-restclient');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');
const log = require('../src/utils/logger');

const { NODE_ENV } = process.env;
const ANALYTICS_URL = '/ga-catalog/dimensions-for-cache';
const request = restclient({
  timeout: 5000,
});

class AnalyticsApiCalls {
  constructor(allCustoms) {
    this.allCustoms = allCustoms;
  }

  doCall() {
    return NODE_ENV === 'production' ? this.doApiCall() : this.getFromConfig();
  }

  doApiCall() {
    const url = `${ANALYTICS_URL}`;
    return request
      .get(url, {
        context: buildFlowStarterContext(),
        headers: {
          'Content-Type': 'application/json',
        },
        retry: {
          delay: 100, // The number of milliseconds before starting the first retry.
          maxDelay: 5000, // The maximum number of milliseconds between two retries.
          factor: 2, // The exponential factor to use.
        },
        cache: {
          maxAge: 43200,
          staleWhileRevalidate: 43200,
        },
      })
      .then((response) => {
        if (response.status === 200 && response.data) {
          return response.data.dimensions_by_business;
        }
        log.error(`Cannot do the API call to ga-analytics. Request status: ${response.status}`);
        return null;
      })
      .catch((err) => {
        log.error(`Cannot do the API call to ga-analytics: ${err}`);
        throw err;
      });
  }

  getFromConfig() {
    const data = config.get('analytics.sdk.mock') || {};
    return Promise.resolve(data);
  }
}

module.exports = AnalyticsApiCalls;
