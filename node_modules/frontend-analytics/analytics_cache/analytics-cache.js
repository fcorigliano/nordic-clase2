const AnalyticsApiCalls = require('./analytics-api-calls');


class AnalyticsCache {
  constructor() {
    this.allCustoms = {};
    this.apiService = new AnalyticsApiCalls(this.allCustoms);
    this.isUpdateRunning = false;
    this.lastUpdate = new Date(0);
    this.refreshCache();
  }

  getCustoms(platformId, type, name) {
    const customs = this.getCustomsOfPlatform(platformId, type);
    if (!customs || !name) return '';
    // eslint-disable-next-line no-prototype-builtins
    return customs.hasOwnProperty(name.toLowerCase()) ? customs[name.toLowerCase()] : '';
  }

  getCustomsOfPlatform(platformId, type) {
    let platform = platformId;
    this.refreshCache();
    if (platform === undefined || platform === '') platform = 'ml';
    if (type !== 'dimensions') return {};
    if (!this.allCustoms) return {};
    // eslint-disable-next-line no-prototype-builtins
    return this.allCustoms.hasOwnProperty(platform) ? this.allCustoms[platform] : {};
  }

  refreshCache() {
    if (this.isUpdateRunning || Date.now() - this.lastUpdate < (5 * 60 * 1000)) {
      return;
    }
    this.isUpdateRunning = true;
    this.apiService.doCall()
      .then((data) => {
        if (data && typeof data === 'object') {
          this.allCustoms = data;
          this.lastUpdate = Date.now();
        }
        this.isUpdateRunning = false;
      }).catch(() => {
        this.isUpdateRunning = false;
      });
  }
}

module.exports = AnalyticsCache;
