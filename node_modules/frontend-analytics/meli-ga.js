/* eslint-disable security/detect-object-injection */
/* eslint-disable react/no-unused-prop-types */
/* eslint-disable react/forbid-prop-types */
const React = require('react');
const withSideEffect = require('react-side-effect');
const PropTypes = require('prop-types');

const { Component } = React;

class MeliGA extends Component {
  render() {
    // Allow the rendering of children elements
    const { children } = this.props;
    if (children) {
      return React.Children.only(children);
    }

    // Do not render the MeliGA itself in place where it was called
    // since the Analytics code should be always located in specific place of the header
    return null;
  }
}

MeliGA.propTypes = {
  section: PropTypes.string.isRequired,
  secure: PropTypes.bool,
  search: PropTypes.string,
  dimensions: PropTypes.object,
  metrics: PropTypes.object,
  pathFromRoot: PropTypes.array,
  business: PropTypes.string,
  pageVertical: PropTypes.string,
  pageLayout: PropTypes.string,
  pageCategoryL1: PropTypes.string,
  privatePage: PropTypes.string,
  isDeferred: PropTypes.bool,
  enableOptimize: PropTypes.bool,
  optimizeId: PropTypes.string,
  preventOptimizeFlickering: PropTypes.bool,
  children: PropTypes.any,
};

function reducePropsToState(propsList) {
  const props = {};

  propsList.forEach((currentProps) => {
    Object.keys(currentProps).forEach((p) => {
      if (typeof currentProps[p] === 'object' && !Array.isArray(currentProps[p])) {
        props[p] = { ...props[p], ...currentProps[p] };
      } else {
        // Do not concat the arrays since an order of keys is important
        props[p] = currentProps[p];
      }
    });
  });

  return props;
}

function handleStateChangeOnClient() {
  // Do nothing for now
  return null;
}

function mapStateOnServer(props) {
  return props;
}

module.exports = withSideEffect(reducePropsToState, handleStateChangeOnClient, mapStateOnServer)(MeliGA);
