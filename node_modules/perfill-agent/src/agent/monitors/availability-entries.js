const { appendMetric } = require('../collector');
const { supportsPerformanceApi } = require('../support');
const { AVAILABILITY_TRANSFER_SIZE } = require('../../constants/metrics');
const { thresholdEntries, fileSupport } = require('../../constants/availability');

const getExtension = (filename) => filename.substring(filename.lastIndexOf('.') + 1, filename.length);

const getFileType = (filename) => {
  const extension = getExtension(filename);
  return Object.keys(fileSupport).find((type) => fileSupport[type].some((el) => el === extension));
};

const getPerformanceResourceTimings = () => {
  if (!supportsPerformanceApi()) return [];
  const { performance } = window;
  const extensionsSupported = Object.keys(fileSupport)
    .reduce((list, type) => list.concat(fileSupport[type]), []);

  return performance.getEntries()
    .filter((entry) => extensionsSupported.some((el) => el === getExtension(entry.name)))
    .filter((entry, index, arr) => arr.findIndex(el => (el.name === entry.name)) === index)
    .map((entry) => {
      const value = entry.encodedBodySize && entry.encodedBodySize > 0 ? entry.encodedBodySize : entry.transferSize;
      return {
        name: entry.name,
        type: getFileType(entry.name),
        value,
      };
    });
};

const checkTransferSizeAvailability = (entry) => {
  const { type, value, name } = entry;
  const threshold = thresholdEntries[type] || 0;

  if (value > threshold) {
    appendMetric(AVAILABILITY_TRANSFER_SIZE, {
      filename: name,
      initiator: type,
      value,
    });
  }
};

const availabilityEntriesMonitor = () => {
  const entries = getPerformanceResourceTimings();
  entries.forEach(checkTransferSizeAvailability);
};

module.exports = availabilityEntriesMonitor;
