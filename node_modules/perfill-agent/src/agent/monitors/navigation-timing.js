const { trackMetric } = require('../collector');
const { supportsPerformanceApi } = require('../support');
const { toFixedNumber } = require('../utils/number');

const {
  REDIRECT_COUNT,
  DOM_COMPLETE,
  DOM_INTERACTIVE,
  DOM_CONTENT_LOADED_END,
  DOM_CONTENT_LOADED_START,
  DOM_CONTENT_LOADED,
  ONLOAD_END,
  ONLOAD_START,
  ONLOAD,
  REQUEST_START,
  RESPONSE_START,
  RESPONSE_END,
  RESPONSE_TIME,
  NAVIGATION_TYPE,
} = require('../../constants/metrics');

const navigationTimingMonitor = () => {
  if (!supportsPerformanceApi()) {
    return;
  }
  const [navigationTiming] = window.performance.getEntriesByType('navigation');
  if (navigationTiming) {
    const {
      domComplete,
      domContentLoadedEventEnd,
      domContentLoadedEventStart,
      domInteractive,
      loadEventEnd,
      loadEventStart,
      redirectCount,
      requestStart,
      responseStart,
      responseEnd,
      type: navigationType,
    } = navigationTiming;

    if (redirectCount) {
      trackMetric(REDIRECT_COUNT, redirectCount);
    }
    if (domComplete) {
      trackMetric(DOM_COMPLETE, toFixedNumber(domComplete));
    }
    if (domInteractive) {
      trackMetric(DOM_INTERACTIVE, toFixedNumber(domInteractive));
    }
    if (domContentLoadedEventEnd) {
      trackMetric(DOM_CONTENT_LOADED_END, toFixedNumber(domContentLoadedEventEnd));
    }
    if (domContentLoadedEventStart) {
      trackMetric(DOM_CONTENT_LOADED_START, toFixedNumber(domContentLoadedEventStart));
    }
    if (domContentLoadedEventStart && domContentLoadedEventEnd) {
      trackMetric(DOM_CONTENT_LOADED, toFixedNumber(domContentLoadedEventEnd - domContentLoadedEventStart));
    }
    if (loadEventEnd) {
      trackMetric(ONLOAD_END, toFixedNumber(loadEventEnd));
    }
    if (loadEventStart) {
      trackMetric(ONLOAD_START, toFixedNumber(loadEventStart));
    }
    if (loadEventStart && loadEventEnd) {
      trackMetric(ONLOAD, toFixedNumber(loadEventEnd - loadEventStart));
    }
    if (requestStart) {
      trackMetric(REQUEST_START, toFixedNumber(requestStart));
    }
    if (responseStart) {
      trackMetric(RESPONSE_START, toFixedNumber(responseStart));
    }
    if (responseEnd) {
      trackMetric(RESPONSE_END, toFixedNumber(responseEnd));
    }
    if (responseStart && responseEnd) {
      trackMetric(RESPONSE_TIME, toFixedNumber(responseEnd - responseStart));
    }
    if (navigationType) {
      trackMetric(NAVIGATION_TYPE, navigationType);
    }
  }
};

module.exports = navigationTimingMonitor;
