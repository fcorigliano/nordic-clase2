const pick = require('../utils/pick');
const { WEB_VITALS } = require('../../constants/initiatives');
const {
  FCP, LCP, FID, CLS, TBT,
  DNS_LOOKUP_TIME, DOWNLOAD_TIME, FETCH_TIME,
  HEADER_SIZE, TTFB, TOTAL_TIME,
  WORKER_TIME, REDIRECT_COUNT,
  DOM_COMPLETE, DOM_INTERACTIVE, DOM_CONTENT_LOADED_END, DOM_CONTENT_LOADED_START, DOM_CONTENT_LOADED,
  ONLOAD_END, ONLOAD_START, ONLOAD,
  REQUEST_START, RESPONSE_START, RESPONSE_END, RESPONSE_TIME,
  NAVIGATION_TYPE, INITIAL_CONTENT_SIZE, REDUCED_MOTION, REDUCED_COLOR,
} = require('../../constants/metrics');

const metrics = [
  FCP, LCP, FID, CLS, TBT,
  DNS_LOOKUP_TIME, DOWNLOAD_TIME, FETCH_TIME,
  HEADER_SIZE, TTFB, TOTAL_TIME,
  WORKER_TIME, REDIRECT_COUNT,
  DOM_COMPLETE, DOM_INTERACTIVE, DOM_CONTENT_LOADED_END, DOM_CONTENT_LOADED_START, DOM_CONTENT_LOADED,
  ONLOAD_END, ONLOAD_START, ONLOAD,
  REQUEST_START, RESPONSE_START, RESPONSE_END, RESPONSE_TIME,
  NAVIGATION_TYPE, INITIAL_CONTENT_SIZE, REDUCED_MOTION, REDUCED_COLOR,
];
const requiredMetrics = [FCP, LCP, CLS];

const preparePayload = (_, data) => {
  const webVitalsMetrics = pick(data, metrics);

  if (!Object.keys(webVitalsMetrics).length) {
    throw new Error('Metrics not found');
  }

  const webVitalsMetricsKeys = Object.keys(webVitalsMetrics);
  if (!requiredMetrics.every(metric => webVitalsMetricsKeys.indexOf(metric) !== -1)) {
    throw new Error('Metrics missing');
  }

  return {
    name: WEB_VITALS,
    data: webVitalsMetrics,
  };
};

module.exports = preparePayload;
