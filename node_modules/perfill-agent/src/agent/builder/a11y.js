const pick = require('../utils/pick');
const { A11Y } = require('../../constants/initiatives');
const { WINDOW_DOM, WINDOW_WIDTH, WINDOW_HEIGHT } = require('../../constants/metrics');
const { deviceInfoMetrics, connectionInfoMetrics, browserInfoMetrics } = require('../../constants/a11y');
const { prepareEventTags, prepareClientInfo } = require('./commons');
const { arrayOperator, objectOperator } = require('../utils/spread');

const metrics = [WINDOW_DOM, WINDOW_WIDTH, WINDOW_HEIGHT];

const preparePayload = (settings, data) => {
  const { name, version } = prepareClientInfo()['client-info'];
  const { tags } = prepareEventTags(data, settings, A11Y);

  const metricsCollected = pick(data, arrayOperator([deviceInfoMetrics, connectionInfoMetrics, browserInfoMetrics, metrics]));

  if (!Object.keys(metricsCollected).length) {
    throw new Error('Metrics not found');
  }

  const a11yMetrics = objectOperator({ metricsCollected, tags, client_name: name, client_version: version });
  const formData = [];

  Object.keys(a11yMetrics).forEach((metric) => {
    if (metric === 'window-dom') {
      const blob = new Blob([a11yMetrics['window-dom']], { type: 'text/html' });
      formData.push(['file', blob, 'dom.html']);
      return;
    }

    formData.push([metric.replace('-', '_'), a11yMetrics[metric]]);
  });

  return {
    name: A11Y,
    data: formData,
  };
};

module.exports = preparePayload;
