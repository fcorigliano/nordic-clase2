const webVitals = require('./web-vitals');
const pageRender = require('./page-render');
const a11y = require('./a11y');
const availability = require('./availability');
const cdnHealth = require('./cdn-health');
const { WEB_VITALS, PAGE_RENDER, A11Y, AVAILABILITY, CDN_HEALTH } = require('../../constants/initiatives');
const { objectOperator } = require('../utils/spread');
const {
  prepareEventTags,
  prepareDeviceInfo,
  prepareConnectionInfo,
  prepareClientInfo,
  prepareBrowserInfo,
} = require('./commons');

const initiativesEnabled = {
  [WEB_VITALS]: {
    builder: webVitals,
  },
  [PAGE_RENDER]: {
    builder: pageRender,
  },
  [A11Y]: {
    builder: a11y,
  },
  [AVAILABILITY]: {
    builder: availability,
  },
  [CDN_HEALTH]: {
    builder: cdnHealth,
  },
};

const getInitiative = (initiative) => {
  if (initiative.id in initiativesEnabled) {
    return initiativesEnabled[initiative.id];
  }
  throw new Error('Initiative not found');
};

const prepareInitiativePayload = (initiative, settings, data) => {
  const { builder } = getInitiative(initiative);
  return builder(settings, data);
};

const prepareEventInfo = (initiative, settings, data) => {
  try {
    const initiativePayload = prepareInitiativePayload(initiative, settings, data);
    const tags = prepareEventTags(data, settings);
    return { 'event-info': objectOperator({ initiativePayload, tags }) };
  } catch (e) {
    return null;
  }
};

const preparePayload = (initiative, settings, data) => {
  const eventInfo = prepareEventInfo(initiative, settings, data);
  if (!eventInfo) {
    return null;
  }

  const clientInfo = prepareClientInfo();
  const deviceInfo = prepareDeviceInfo(data);
  const connectionInfo = prepareConnectionInfo(data);
  const browserInfo = prepareBrowserInfo(data);

  return objectOperator({ clientInfo, eventInfo, deviceInfo, connectionInfo, browserInfo });
};

const prepareFormData = (initiative, settings, data) => {
  try {
    const { data: initiativePayload } = prepareInitiativePayload(initiative, settings, data);

    const formData = new FormData();
    initiativePayload.forEach((field) => {
      const [name, value, filename] = field;
      if (filename) {
        formData.append(name, value, filename);
      } else {
        formData.append(name, value);
      }
    });

    return formData;
  } catch (e) {
    return null;
  }
};

module.exports = { preparePayload, prepareFormData };
