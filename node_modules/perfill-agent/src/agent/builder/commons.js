const pick = require('../utils/pick');
const strReplaceAll = require('../utils/replace-all');
const { objectOperator } = require('../utils/spread');
const { getConfiguration } = require('../config');

const COMMONS = 'commons';

const nativeApp = /^([a-zA-Z]+)-(iOS|Android|AndroidNoPS|SmartPOS)?(?:\/|%2F)((?:\d+\.){2}\d+)/;
const androidAlt = [
  { original: 'SmartPOS', translated: 'Android' },
  { original: 'AndroidNoPS', translated: 'Android' },
];

// eslint-disable-next-line no-undef
const prepareClientInfo = () => ({ 'client-info': { name: 'perfill-agent', version: '__perfillAgentVersion__' } });

const prepareTags = (settings, initiative = COMMONS) => ({
  tags: pick(settings, getConfiguration('tags', initiative, [])),
});

const prepareDeviceType = (data, settings) => {
  const deviceData = pick(settings, ['device', 'webview']);
  const isWebview = (deviceData.webview && deviceData.device === 'mobile') || false;
  const ua = data['user-agent'] || '';
  const deviceParsed = nativeApp.exec(ua);
  const deviceNative = deviceParsed ? strReplaceAll(androidAlt, deviceParsed[2]).toLowerCase() : null;

  if (deviceData.webview && !deviceNative) {
    throw new Error('Unknown device native type');
  }

  const devicePlatform = isWebview ? 'webview' : 'web';
  const deviceType = isWebview ? deviceNative : deviceData.device;

  return `${devicePlatform}/${deviceType}`;
};

const prepareEventTags = (data, settings, initiative = COMMONS) => {
  const { tags } = prepareTags(settings, initiative);

  return { tags: objectOperator({ tags, device: prepareDeviceType(data, settings) }) };
};

const prepareDeviceInfo = (data, initiative = COMMONS) => ({
  'device-info': pick(data, getConfiguration('deviceInfoMetrics', initiative, [])),
});

const prepareConnectionInfo = (data, initiative = COMMONS) => ({
  'connection-info': pick(data, getConfiguration('connectionInfoMetrics', initiative, [])),
});

const prepareBrowserInfo = (data, initiative = COMMONS) => ({
  'browser-info': pick(data, getConfiguration('browserInfoMetrics', initiative, [])),
});

module.exports = {
  prepareTags,
  prepareEventTags,
  prepareDeviceInfo,
  prepareClientInfo,
  prepareConnectionInfo,
  prepareBrowserInfo,
};
