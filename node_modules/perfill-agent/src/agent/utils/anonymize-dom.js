const { arrayOperator } = require('./spread');
const strReplaceAll = require('./replace-all');

// eslint-disable-next-line max-len
const characters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
const ignoredTags = {
  STYLE: true,
  IFRAME: true,
  SCRIPT: true,
  svg: true,
  path: true,
};
const suppressByClassNames = {
  'data-hj-suppress': true,
  'data-hj-suppressed': true,
  'data-hj-masked': true,
  'data-pii-mask': true,
  'nav-header-username': true,
};
const suppressFields = {
  address: true,
  address1: true,
  address2: true,
  addressline1: true,
  addressline2: true,
  cell: true,
  cellphone: true,
  dateofbirth: true,
  dob: true,
  email: true,
  familyname: true,
  firstname: true,
  fullname: true,
  lastname: true,
  firstName: true,
  fullName: true,
  lastName: true,
  phone: true,
  postalcode: true,
  postcode: true,
  surname: true,
  tel: true,
  telephone: true,
  username: true,
  zip: true,
  zipcode: true,
  nationalinsurancenumber: true,
  nin: true,
  ppsn: true,
  security: true,
  securitynum: true,
  socialsec: true,
  socialsecuritynumber: true,
  socsec: true,
  ssn: true,
  authpw: true,
  contrasena: true,
  contrasenya: true,
  pass: true,
  passord: true,
  password: true,
  passwort: true,
  pw: true,
  pwd: true,
  pword: true,
  pwrd: true,
  sapwd: true,
  senha: true,
  userpw: true,
  userpwd: true,
  cc: true,
  cccsc: true,
  cccvc: true,
  cccvv: true,
  ccexp: true,
  ccexpiry: true,
  ccexpmonth: true,
  ccexpyear: true,
  ccname: true,
  ccnum: true,
  ccnumber: true,
  cctype: true,
  creditcard: true,
  csc: true,
  cvc: true,
  cvv: true,
  exp: true,
  accountnum: true,
  accountnumber: true,
  bic: true,
  iban: true,
  ibanaccountnum: true,
  ibanaccountnumber: true,
  pin: true,
  pinnum: true,
  secq: true,
  secret: true,
  secretq: true,
  secretquestion: true,
  securityq: true,
  securityquestion: true,
  sortcode: true,
  swift: true,
  buyerEmail: true,
  nickname: true,
  buyerFullName: true,
  buyerPhone: true,
  buyerId: true,
  sellerId: true,
  first_name: true,
  last_name: true,
  secure_email: true,
  issuerName: true,
  expirationMonth: true,
  expirationYear: true,
  lastFourDigits: true,
};

const tagAttributes = {
  A: ['href'],
  INPUT: ['value', 'placeholder'],
  TEXTAREA: ['value', 'placeholder'],
  OPTION: ['label', 'value'],
  PROGRESS: ['value'],
  OPTGROUP: ['label'],
  IMG: ['alt'],
  DIV: ['title'],
  DEFAULT: ['textContent'],
};

const escapeRegExpFind = /[.*+?^${}()|[\]\\]/g;
const escapeRegExpReplace = '\\$&';
const escapeRegExp = (string) => string.replace(escapeRegExpFind, escapeRegExpReplace);

const generateRandomText = (size) => {
  const result = [];

  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < size; i++) {
    result.push(characters[Math.floor(Math.random() * characters.length)]);
  }

  return result.join('');
};

const hasSuppressClassName = (el) => arrayOperator([el.classList || []]).some((className) => suppressByClassNames[className]);

const hasSuppressedNameOrIdRegEx = new RegExp('[\\s_-]+', 'g');
const hasSuppressedNameOrId = (el) => [el.name, el.id]
  .map((value) => (value ? value.replace(hasSuppressedNameOrIdRegEx, '').toLowerCase() : value))
  .some((field) => suppressFields[field]);

const hasCCNumOrSSNRegEx = /([+(]{0,2}\d[-_ ()/]{0,4}){9,}/;
const hasCCNumOrSSN = (elValue) => hasCCNumOrSSNRegEx.test(elValue);

const hasDigitSequenceRegEx = /\d+/;
const hasDigitSequence = (elValue) => hasDigitSequenceRegEx.test(elValue);

const hasEmailRegEx = /[^@\s]+@[^@\s]+\.[^@\s]+/;
const hasEmail = (elValue) => elValue.indexOf('@') > -1 && hasEmailRegEx.test(elValue);

const hasIPAddressRegExA = /(?:\d{1,3}\.){3}\d{1,3}/;
const hasIPAddressRegExB = /(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}/;
const hasIPAddress = (elValue) => hasIPAddressRegExA.test(elValue) || hasIPAddressRegExB.test(elValue);

const shouldSuppressData = (el, elValue = '') => hasSuppressClassName(el)
  || hasSuppressedNameOrId(el)
  || hasDigitSequence(elValue)
  || hasCCNumOrSSN(elValue)
  || hasEmail(elValue)
  || hasIPAddress(elValue);

const extractMessages = (nodeList) => {
  const messages = [];
  arrayOperator([nodeList]).forEach((el) => {
    if (ignoredTags[el.tagName]) return;
    if ((el.children || []).length > 0) return;

    const attrs = arrayOperator([tagAttributes.DEFAULT, (tagAttributes[el.tagName] || [])]);
    const elementAttributes = attrs.reduce((list, attr) => {
      const elAttr = el[attr];
      const shouldSuppress = shouldSuppressData(el, elAttr);

      if (elAttr && shouldSuppress) {
        list.push(elAttr);
      }

      return list;
    }, []);

    if (elementAttributes.length) {
      messages.push({
        el: el.outerHTML,
        attrs: elementAttributes,
      });
    }
  });

  return messages;
};

const translationRegEx = new RegExp(/[a-zA-Z0-9äÄëËïÏöÖüÜáéíóúáéíóúÁÉÍÓÚÂÊÎÔÛâêîôûàèìòùÀÈÌÒÙ.]/, 'i');
const getTranslation = (message) => (message.startsWith('http') ? '#' : message
  .split(' ')
  .map((chunk) => (
    translationRegEx.test(chunk)
      ? generateRandomText(chunk.length)
      : chunk))
  .join(' '));

const generateTranslations = (messages) => {
  const translations = [
    { original: '<iframe.*?>.*<\\/iframe>', translated: '' },
    { original: '<noscript.*?>.*<\\/noscript>', translated: '' },
    { original: '"(addresses)":+\\s*[[][\\s\\S]*?[]],*', translated: '' }, // Remove array elements
    { original: '"(phone|address|address|alternative_phone|identification)":+\\s*[{][\\s\\S]*?[}],*', translated: '' }, // Remove string elements
    { original: '(user)+\\s*:\\s*[{]+[\\s\\S]*?[}]+?', translated: '$1: {}' }, // Replace JS elements
    { original: '[a-z0-9.+-]+@+[a-z0-9.+-]+', translated: 'removed@domain.now' }, // Replace email elements
    { original: `"(${Object.keys(suppressFields).join('|')})"+\\s*:\\s*"+[a-z0-9.+-\\s]+"+?`, translated: '"$1":"abc123"' }, // Replace string elements
    { original: `"(${Object.keys(suppressFields).join('|')})"+\\s*:\\s*[^"][0-9]+`, translated: '"$1":123987546' }, // Replace numeric elements
  ];
  return messages.reduce((translationList, message) => {
    const original = message.el;
    message.attrs.forEach(attr => {
      message.el = message.el.replace(attr, getTranslation(attr));
    });
    translationList.push({ original: escapeRegExp(original), translated: escapeRegExp(message.el) });
    return translationList;
  }, translations);
};

const getElements = (selectors = '*') => document.body.querySelectorAll(selectors);

const anonymizeDOM = (dom) => {
  const messages = extractMessages(getElements());
  const translations = generateTranslations(messages);

  return strReplaceAll(translations, dom);
};

module.exports = {
  anonymizeDOM,
  generateRandomText,
  shouldSuppressData,
  extractMessages,
  generateTranslations,
};
