const { CDN_HEALTH } = require('../../constants/initiatives');
const { AVAILABILITY_FAILURE } = require('../../constants/metrics');
const { appendMetric, sendMetrics, getMetricsCollected } = require('../collector');
const { subscribe } = require('../subscriptions');

const getRequestIdleCallback = window.requestIdleCallback || (callback => setTimeout(callback, 200));

const eventName = 'cdnHealthEvent';
let subscribedToPageUnload = false;
const subscribeToPageUnload = (settings) => {
  const cdnHealthEventHandler = () => {
    if (window.document.visibilityState === 'hidden') {
      sendMetrics({ id: CDN_HEALTH }, settings, getMetricsCollected());

      window.document.removeEventListener(eventName, cdnHealthEventHandler);
      subscribedToPageUnload = false;
    }
  };

  if (!subscribedToPageUnload) {
    // TODO - listen to pagehide on safari? https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event
    window.document.addEventListener(eventName, cdnHealthEventHandler);
    subscribedToPageUnload = true;
  }

  const visibilityChangeHandler = () => {
    const event = new window.Event(eventName);
    window.document.dispatchEvent(event);
  };
  window.document.addEventListener('visibilitychange', visibilityChangeHandler);
};

const setCDNHealthHandler = (settings) => {
  subscribeToPageUnload(settings);
};

const monitor = (settings) => {
  subscribe(AVAILABILITY_FAILURE, (commandData) => {
    if (commandData) {
      appendMetric(AVAILABILITY_FAILURE, commandData);
    }
  });

  getRequestIdleCallback(() => setCDNHealthHandler(settings));
};

module.exports = monitor;
