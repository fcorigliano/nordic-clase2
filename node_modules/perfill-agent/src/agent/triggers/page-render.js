const { PAGE_RENDER } = require('../../constants/initiatives');
const { trackMetric, sendMetrics, getMetricsCollected } = require('../collector');
const { subscribe } = require('../subscriptions');

const getRequestIdleCallback = window.requestIdleCallback || (callback => setTimeout(callback, 200));

const eventName = 'pageRenderEvent';
let subscribedToPageUnload = false;
const subscribeToPageUnload = (settings) => {
  const pageRenderEventHandler = () => {
    if (window.document.visibilityState === 'hidden') {
      sendMetrics({ id: PAGE_RENDER }, settings, getMetricsCollected());

      window.document.removeEventListener(eventName, pageRenderEventHandler);
      subscribedToPageUnload = false;
    }
  };

  if (!subscribedToPageUnload) {
    // TODO - listen to pagehide on safari? https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event
    window.document.addEventListener(eventName, pageRenderEventHandler);
    subscribedToPageUnload = true;
  }

  const visibilityChangeHandler = () => {
    const event = new window.Event(eventName);
    window.document.dispatchEvent(event);
  };
  window.document.addEventListener('visibilitychange', visibilityChangeHandler);
};

const setPageRenderHandler = (commandData, settings) => {
  commandData.forEach((data) => {
    trackMetric(data.metric, data.value);
  });
  subscribeToPageUnload(settings);
};

const monitor = (settings) => {
  subscribe(PAGE_RENDER, (commandData) => {
    if (commandData) {
      getRequestIdleCallback(() => setPageRenderHandler(commandData, settings));
    }
  });
};

module.exports = monitor;
