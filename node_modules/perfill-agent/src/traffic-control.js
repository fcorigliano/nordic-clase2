const config = require('frontend-config');

const { APPLICATION, SCOPE } = process.env;

const calculatePercent = function calculatePercent(req) {
  // eslint-disable-next-line no-underscore-dangle
  const d2Id = ((req.headers || {})['x-d2id'] || (req.cookies || {})._d2id || '').replace(/-n$/, '');

  if (!d2Id) {
    return null;
  }

  // eslint-disable-next-line no-return-assign,no-param-reassign
  const value = d2Id.split('').reduce((acc, ch, idx) => (acc += parseFloat((ch.charCodeAt(0) / (idx + 1)).toString(10))), 33) % 100;

  return parseFloat(value.toFixed(3));
};

const trafficControl = function trafficControl(req, frontendConfigEnvironment) {
  try {
    if (!req.platform || !req.device || !req.cookies) return null;

    const { id, siteId } = req.platform;
    const perfillConfig = config.get('perfill', id, siteId, frontendConfigEnvironment);

    if (!perfillConfig) return null;

    const { clientVersion, initiatives, blacklist } = perfillConfig;

    if (blacklist.includes(APPLICATION)) return null;
    if (!initiatives.length) return null;

    const exposition = calculatePercent(req);
    if (exposition === null) {
      return null;
    }

    const initiativesPercentage = 100 / initiatives.length;
    const initiativesToExecute = initiatives.reduce((temporalInitiativesToExecute, initiative, index) => {
      // we don't want to use the same percentage for every initiative because that would end up
      // rendering all the initiatives for users with in lower values and none of them on higher ones. So this creates
      // a user percentage shift for each initiative, trying to descrease initiatives overlap
      const userPercentage = (exposition + initiativesPercentage * index) % 100;

      if (userPercentage < (initiative.percent || 0)) {
        temporalInitiativesToExecute.push({
          id: initiative.id,
          data: initiative.data,
        });
      }
      return temporalInitiativesToExecute;
    }, []);

    if (initiativesToExecute.length) {
      return {
        clientVersion,
        siteId,
        initiatives: initiativesToExecute,
        appName: APPLICATION,
        scope: SCOPE,
        platformId: id,
        deviceType: req.device.type,
        webView: req.device.webView,
      };
    }

    return null;
  } catch (e) {
    return null;
  }
};

module.exports = {
  trafficControl,
  calculatePercent,
};
