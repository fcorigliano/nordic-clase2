const React = require('react');
const withSideEffect = require('react-side-effect');
const PropTypes = require('prop-types');

const createSet = typeof Set === 'function'
  ? () => new Set()
  : () => {
    const cache = {};
    return {
      has: (key) => cache[key],
      add: (key) => {
        cache[key] = true;
      },
    };
  };

let renderedChildren = createSet();

const Style = (props) => {
  const {
    children,
    media,
    renderChildrenInPlace,
    critical,
    firstRequestInlineStyles,
  } = props;

  if (!renderChildrenInPlace
    || critical
    || firstRequestInlineStyles
    || typeof children !== 'string'
    || renderedChildren.has(children)) {
    return null;
  }

  renderedChildren.add(children);

  const elementProps = {
    dangerouslySetInnerHTML: {
      __html: children,
    },
  };

  if (media) {
    elementProps.media = media;
  }

  return React.createElement('style', elementProps);
};


// return propsList
const identity = (propsList) => propsList;

// Do nothing
const handleStateChangeOnClient = () => {};

const StyleWithSideEffect = withSideEffect(identity, handleStateChangeOnClient, identity)(Style);

StyleWithSideEffect.propTypes = {
  href: PropTypes.string,
  media: PropTypes.string,
  preload: PropTypes.bool,
  inline: PropTypes.bool,
  critical: PropTypes.bool,
  children: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element,
  ]),
  renderChildrenInPlace: PropTypes.bool,
  firstRequestInlineStyles: PropTypes.shape({
    key: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
  }),
};

StyleWithSideEffect.defaultProps = {
  href: null,
  preload: false,
  inline: false,
  critical: false,
  media: null,
  children: null,
  renderChildrenInPlace: true,
  firstRequestInlineStyles: null,
};

const originalRewind = StyleWithSideEffect.rewind;

StyleWithSideEffect.rewind = function StyleWithSideEffectRewind() {
  renderedChildren = createSet();
  return originalRewind.call(this);
};

module.exports = StyleWithSideEffect;
