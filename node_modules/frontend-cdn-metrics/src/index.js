const config = require('frontend-config');

const appName = process.env.APPLICATION;
const cdnCookieName = 'cdnx';

const getQualifiedUser = function getQualifiedUser(cookies) {
  const { _d2id } = cookies;

  if (!_d2id) {
    return 0;
  }

  // eslint-disable-next-line no-return-assign,no-param-reassign
  return _d2id.split('').reduce((acc, ch) => (acc += parseInt(ch.charCodeAt(0).toString(10), 10)), 0) % 100;
};

const getMetricsRun = function getMetricsRun(cookies, limitExecution = 0) {
  const cdnMetricsRun = cookies[cdnCookieName];

  return cdnMetricsRun && !Number.isNaN(+cdnMetricsRun) ? +cdnMetricsRun : limitExecution;
};

const updateRemainRunCookie = function updateRunCookie(req, res, currentExecution, maxAge = 3600) {
  const cookieValue = (currentExecution === -1) ? -1 : Math.max(0, currentExecution - 1);

  const sameSiteOptions = (req.browser && req.browser.support && req.browser.support.sameSite)
    ? { sameSite: 'none', secure: true } : {};

  const options = { maxAge: maxAge * 1000, httpOnly: true };

  res.cookie(cdnCookieName, cookieValue, { ...options, ...sameSiteOptions });

  return cookieValue;
};

const cdnMetricsFn = function cdnMetricsFn(req, res) {
  const { id, siteId } = req.platform;
  const cdn = config.get('cdnMetrics', id, siteId);

  if (!cdn) return null;

  const currentExecution = getMetricsRun(req.cookies, cdn.limitExecution);

  if (Array.isArray(cdn.apps)
    && cdn.apps.includes(appName)
    && !!currentExecution
    && getQualifiedUser(req.cookies) <= cdn.score
  ) {
    updateRemainRunCookie(req, res, currentExecution, cdn.maxAge);

    return `https://http2.mlstatic.com/frontend-assets/frontend-cdn-metrics/${cdn.clientVersion}/client.js`;
  }

  return null;
};

const cdnMetricsMiddleware = function cdnMetricsMiddleware(req, res, next) {
  const cdnMetrics = cdnMetricsFn(req, res);

  if (cdnMetrics) {
    req.cdnMetrics = cdnMetrics;
  }

  next();
};

module.exports = {
  cdnMetricsMiddleware,
  cdnMetricsFn,
  getQualifiedUser,
  getMetricsRun,
  updateRemainRunCookie,
};
