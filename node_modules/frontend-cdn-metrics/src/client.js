/* global window, document */

const client = (win) => {
  const {
    performance, melidata, fetch, navigator,
  } = win;

  const assetsDomain = {
    akamai: 'http2.mlstatic.com',
    google: 'assets.mlstatic.com',
  };

  const getUrl = (cdn, filename) => `https://${assetsDomain[cdn]}/frontend-assets/frontend-cdn-metrics/assets/${filename}`;

  const files = [
    {
      cdn: 'akamai',
      type: 'css',
      url: getUrl('akamai', 'home.desktop.css'),
      headers: {
        Pragma: 'akamai-x-cache-on',
      },
    },
    {
      cdn: 'akamai',
      type: 'js',
      url: getUrl('akamai', 'vendor.js'),
      headers: {
        Pragma: 'akamai-x-cache-on',
      },
    },
    {
      cdn: 'google',
      type: 'css',
      url: getUrl('google', 'home.desktop.css'),
      headers: {},
    },
    {
      cdn: 'google',
      type: 'js',
      url: getUrl('google', 'vendor.js'),
      headers: {},
    },
  ];

  function prepareCacheResponseValue(cdn, entries) {
    if (cdn === 'google' && entries.age) {
      // eslint-disable-next-line no-param-reassign
      return 'HIT';
    }

    if (cdn === 'akamai' && entries['x-cache']) {
      // eslint-disable-next-line no-param-reassign
      const cacheStatusRaw = entries['x-cache'].split(' ').shift();

      if (cacheStatusRaw) {
        return /HIT/.test(cacheStatusRaw) ? 'HIT' : 'MISS';
      }
    }

    return 'MISS';
  }

  function prepareContentLengthValue(entries) {
    return entries['content-length'] || 0;
  }

  function prepareEventData(url, contentLength, timeDiff, cdn, cacheResponse) {
    const eventData = {
      fileName: url,
      size: +contentLength,
      duration: timeDiff,
      cdnProvider: cdn,
      cacheStatus: cacheResponse,
    };

    if (navigator && navigator.connection && navigator.connection.effectiveType) {
      eventData.connection = navigator.connection.effectiveType;
    }

    return {
      path: '/cdn/profiler',
      category: 'frontend-core',
      event_data: eventData,
    };
  }

  function run(data) {
    const timeStart = performance.now();

    fetch(data.url, {
      method: 'GET',
      mode: 'cors',
      headers: data.headers,
    }).then((response) => {
      const timeDiff = performance.now() - timeStart;

      const entries = [...response.headers.entries()].reduce((r, [key, value]) => {
        // eslint-disable-next-line no-param-reassign
        r[key] = value;
        return r;
      }, {});

      const cacheResponse = prepareCacheResponseValue(data.cdn, entries);
      const contentLength = prepareContentLengthValue(entries);

      const eventData = prepareEventData(
        response.url, contentLength, timeDiff, data.cdn, cacheResponse,
      );

      melidata('cleanAndSend', 'event', eventData);
    }).catch((error) => {
      // eslint-disable-next-line no-console
      console.log(error);
    });
  }

  if (fetch && melidata && performance && navigator) {
    files.forEach((f) => {
      run(f);
    });
  }
};

const init = () => {
  // eslint-disable-next-line no-unused-expressions
  window.requestIdleCallback
    ? window.requestIdleCallback(() => { client(window); }, { timeout: 2000 })
    : setTimeout(() => { client(window); }, 500);
};

if (document.readyState === 'complete') {
  init();
} else {
  window.addEventListener('load', init);
}
