const createEscaper = () => {
  const escapedChars = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    "'": '&#39;',
    '"': '&quot;',
  };

  const escapeRegex = /[&<>'"]/g;
  const escape = (text) => text.replace(
    escapeRegex,
    (match) => escapedChars[match],
  );

  return { escape };
};

const { escape } = createEscaper();

const decodeHTML = (text) => {
  const el = document.createElement('textarea');
  el.insertAdjacentHTML('afterbegin', escape(text));

  return el.value;
};

const userLinks = (shortcuts) => `
  <div class="user-menu__shortcuts">
    ${shortcuts
    .map(({ id, label, target }) => (id !== 'points'
      ? `<a href="${target}#menu-user" data-id="${id}" rel="nofollow">${label}</a>`
      : null))
    .join('')}
  </div>
`;


const userIcon = '<span data-js="user-menu:avatar-icon"><svg class="user-menu__user-icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 68 68"><defs><circle id="user-menu__avatar-circle" cx="22.706" cy="22.706" r="22.706"/></defs><g fill="none" fill-rule="evenodd"><circle cx="34" cy="34" r="34" fill="#EEE"/><g transform="translate(11 9)"><mask id="user-menu__avatar-mask" fill="#fff"><use xlink:href="#user-menu__avatar-circle"/></mask><path fill="#BBB" fill-rule="nonzero" d="M23.011 62.588c-8.466 0-15.329-6.863-15.329-15.329 0-8.466 6.863-15.33 15.33-15.33 8.465 0 15.328 6.864 15.328 15.33 0 8.466-6.863 15.33-15.329 15.33zm0-1.419c7.682 0 13.91-6.228 13.91-13.91s-6.228-13.91-13.91-13.91-13.91 6.228-13.91 13.91 6.228 13.91 13.91 13.91z" mask="url(#user-menu__avatar-mask)"/></g><path fill="#BBB" fill-rule="nonzero" d="M34.062 33.311a6.971 6.971 0 0 0 0-13.942v1.419a5.552 5.552 0 1 1 0 11.104v1.42z"/><path fill="#BBB" fill-rule="nonzero" d="M34.009 37.233c-6.046 0-10.947-4.9-10.947-10.946 0-6.046 4.901-10.947 10.947-10.947 6.045 0 10.946 4.901 10.946 10.947 0 6.045-4.9 10.946-10.946 10.946zm0-1.419a9.527 9.527 0 1 0 0-19.055 9.527 9.527 0 0 0 0 19.055z"/><path fill="#EEE" d="M41.056 15.442l2.817 2.816-3.755 3.755-2.816-2.816z"/></g></svg></span>';

const userImage = (picture) => {
  const imgAttributes = picture
    ? `src="${picture}" srcset="${picture.replace('-S', '-G')} 2x"`
    : 'hidden';

  return `
    ${!picture && userIcon}
    <img data-js="user-menu:avatar-picture" ${imgAttributes} class="user-menu__avatar-picture" />`;
};

const userInfoContainer = (primaryAction, email, picture, title) => {
  const mailBadge = `<p class="user-menu__user-badge-email">${email}</p>`;
  return `
    <div class="user-menu__user-info-outer-container">
      <div class="user-menu__user-info-inner-container">
        <div class="user-menu__user-badge">
          <div class="user-menu__user-badge-image">
            ${userImage(picture)}
          </div>
          <p class="user-menu__user-badge-title">${title}</p>
          ${mailBadge}
        </div>
    </div>
    <a href="${primaryAction.target}#menu-user"
      class="andes-button andes-button--filled user-menu__primary-action"
      data-id="${primaryAction.id}" rel="nofollow">
      <span class="andes-button__content">${primaryAction.label}</span>
    </a>
  </div>
  `;
};

const userMenuTemplate = ({
  primaryAction,
  email,
  picture,
  shortcuts,
  title,
}) => `
    <div class="user-menu__main">
      ${userInfoContainer(
    primaryAction,
    decodeHTML(email || ''),
    picture,
    decodeHTML(title || ''),
  )}
      ${userLinks(shortcuts)}
    </div>
    <span class="user-menu__chevron"></span>
  `;

class UserMenuWidget {
  constructor(options = {}) {
    if (!options.mainDomain) {
      throw new Error('UserMenuWidget: missing main domain.');
    }
    if (!options.menuData) {
      throw new Error('UserMenuWidget: missing menu data.');
    }
    if (!options.userId) {
      throw new Error('UserMenuWidget: missing user id.');
    }
    if (!options.siteId) {
      throw new Error('UserMenuWidget: missing site id.');
    }
    if (!options.platformId) {
      throw new Error('UserMenuWidget: missing platform id.');
    }
    this.menuData = options.menuData;
    this.mymlUrl = options.myaccountUrl || `https://www.${options.mainDomain}/miportal/miportal.aspx`;
    // eslint-disable-next-line max-len
    this.endpoint = `//www.${options.mainDomain}/pi/home/api/menu?siteId=${options.siteId}&userId=${options.userId}&platformId=${options.platformId}`;
    this.triggerElement = options.triggerElement || document.querySelector('header .nav-header-user');
    this.targetElement = options.targetElement || document.querySelector('header .nav-header-user-layer');
    this.referenceElements = {
      chevron: options.chevronReferenceElement || document.querySelector('header .nav-header-username-chevron'),
      rightLimit: options.rightLimitReferenceElement
        || document.querySelector('header .nav-icon-cart')
        || document.querySelector('header .option-help')
        || document.querySelector('header .nav-icon-notifications'),
    };
    this.bus = options.bus || window.freya;

    if (!this.bus) {
      throw new Error('UserMenuWidget: missing bus.');
    }

    if (this.targetElement && this.triggerElement) {
      // Render with default menu accesses
      this.render();
      this.widgetShouldShow();
      this.fetchData();
    } else {
      throw new Error(`UserMenuWidget: Did not find or get target,
      trigger or avatarHeader DOM elements for UserMenuWidget`);
    }

    // Bind handleOutsideClick to add and remove later on show and hide.
    this.handleOutsideClick = this.handleOutsideClick.bind(this);

    // State
    this.shown = false;
    this.shouldBeClosed = true;
    this.timeouts = {
      show: null,
      hide: null,
    };
  }

  fetchData() {
    const xhr = new XMLHttpRequest();

    xhr.onload = () => {
      if (xhr.status === 200) {
        const response = xhr.response || xhr.responseText;
        const model = JSON.parse(response) || {};
        this.menuData = { ...this.menuData, ...model };
        // Render with fetched menu accesses
        this.render();
        this.widgetShouldShow();
      }
    };

    xhr.onerror = () => {
      throw new Error('UserMenuWidget: failed fetching user menu.');
    };

    xhr.open('GET', this.endpoint, true);
    xhr.withCredentials = true;
    xhr.send();
  }

  widgetShouldShow() {
    const triggerElOpacityVal = window.getComputedStyle(this.triggerElement, ':before').getPropertyValue('opacity');
    const shouldShowNow = parseInt(triggerElOpacityVal, 10);
    if (shouldShowNow) {
      this.show();
    }
  }

  render() {
    this.targetElement.classList.add('user-menu--hidden');
    this.targetElement.classList.add('user-menu');
    this.targetElement.innerHTML = userMenuTemplate(this.menuData);

    this.addMyAccountLink();
    this.bindEvents();
  }

  addMyAccountLink() {
    const usernameContainer = document.querySelector('label[for="nav-header-user-switch"]');
    const mymlAnchor = document.createElement('a');
    mymlAnchor.href = this.mymlUrl;
    mymlAnchor.className = 'nav-header-user-myml';
    mymlAnchor.addEventListener('click', (ev) => { ev.preventDefault(); });

    if (usernameContainer) {
      while (usernameContainer.childNodes.length > 0) {
        mymlAnchor.appendChild(usernameContainer.childNodes[0]);
      }
      usernameContainer.appendChild(mymlAnchor);
      usernameContainer.addEventListener('click', (ev) => {
        if (!this.shown) {
          ev.preventDefault();
        }
      });
    }
  }

  bindEvents() {
    this.bus.on('user-menu:show', this.show.bind(this));
    this.bus.on('user-menu:hide', this.hide.bind(this));

    // Keep interactions inside the component to avoid to click document and close
    this.targetElement.addEventListener('click', ev => ev.stopPropagation());

    // Add interaction to the trigger. Toggle view.
    this.triggerElement.addEventListener('mouseenter', (ev) => {
      ev.stopPropagation();
      ev.preventDefault();

      if (!this.shown) {
        this.showTimer();
      }
    });

    [this.triggerElement, this.targetElement].forEach((el) => {
      el.addEventListener('mouseenter', this.hideTimerCleaner.bind(this));
    });

    [this.triggerElement].forEach((el) => {
      el.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
    });
  }

  show() {
    if (this.shown) {
      return;
    }
    this.bus.emit('user-menu:show:before');
    this.updateMenuPosition();
    this.targetElement.classList.remove('user-menu--hidden');
    this.shown = true;
    this.bus.emit('user-menu:show:after');
    document.addEventListener('click', this.handleOutsideClick);
  }

  hide() {
    if (!this.shown) {
      return;
    }
    this.bus.emit('user-menu:hide:before');
    this.targetElement.classList.add('user-menu--hidden');
    this.shown = false;
    this.bus.emit('user-menu:hide:after');
    document.removeEventListener('click', this.handleOutsideClick);
  }

  /**
   * Handle click outside the widget to close the popover.
   */
  handleOutsideClick(ev) {
    if (!this.triggerElement.contains(ev.target)) {
      this.shouldBeClosed = true;
      this.hide();
    }
  }

  /**
   * Handler for mouse leave
   */
  handleMouseLeave() {
    this.showTimerCleaner();
    this.hideTimer();
  }

  /**
   * Delay hiding the popup
   */
  hideTimer() {
    this.timeouts.hide = window.setTimeout(() => {
      if (this.shouldBeClosed) {
        this.hide();
      }
    }, 250);
  }

  /**
   * Clear hiding delay timer
   */
  hideTimerCleaner() {
    window.clearTimeout(this.timeouts.hide);
  }

  /**
   * Delay showing the popup
   */
  showTimer() {
    this.timeouts.show = window.setTimeout(() => {
      this.show();
    }, 250);
  }

  /**
   * Clear showing delay timer
   */
  showTimerCleaner() {
    window.clearTimeout(this.timeouts.show);
  }

  /**
   * Position the menu respect to other elemnts
   */
  updateMenuPosition() {
    const rightLimitEl = this.referenceElements.rightLimit;
    const rightElPadding = parseInt(window.getComputedStyle(rightLimitEl).getPropertyValue('padding-right'), 10);
    // eslint-disable-next-line no-restricted-globals
    const hasPadding = !isNaN(rightElPadding) && isFinite(rightElPadding);
    const rightLimit = rightLimitEl.getBoundingClientRect().right - (hasPadding ? rightElPadding : 0);

    const containerRect = this.triggerElement.getBoundingClientRect();
    const targetElementOffset = containerRect.right - rightLimit;
    this.targetElement.style.right = `${targetElementOffset}px`;

    setTimeout(() => this.updateChevronPosition(), 0); // wait after all the rendering is done
  }

  /**
   * Position the menu chevron just below the user chevron
   */
  updateChevronPosition() {
    const userChevronRect = this.referenceElements.chevron.getBoundingClientRect();
    const userChevronCenterPosition = [userChevronRect.left + userChevronRect.right] / 2;
    const containerRect = this.triggerElement.getBoundingClientRect();
    const userChevronCenterPositionFromContainer = containerRect.right - userChevronCenterPosition;
    const chevronMinusLayout = (userChevronCenterPositionFromContainer - parseInt(this.targetElement.style.right, 10));
    const chevron = document.querySelector('.user-menu__chevron');
    chevron.style.right = `${(chevronMinusLayout - (chevron.getBoundingClientRect().width / 2)).toFixed()}px`;
  }
}

(function startUserMenu(win) {
  win.UserMenuWidget = UserMenuWidget;
}(window));
