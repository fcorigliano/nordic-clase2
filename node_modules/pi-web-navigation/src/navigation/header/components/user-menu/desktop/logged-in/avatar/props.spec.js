const baseProps = {
  user: {
    nickname: 'some-nickname',
  },
  navigationPIIData: {
    preferredName: 'some-preferred-name',
  },
  urls: {
    myAccount: {
      link: 'account-link',
    },
  },
  device: {
    desktop: true,
  },
};

const mockUserPictures = () => {
  const result = {
    someProp: 'someValue',
    someOtherProp: 'someOtherValue',
  };
  const getUserPictures = jest.fn().mockReturnValue(result);
  jest.doMock('@frontend-navigations/commons/user-pictures', () => ({ getUserPictures }));

  const assert = (props) => expect(getUserPictures).toHaveBeenCalledWith(props);

  return {
    assert,
    result,
  };
};

describe('Portal Inmobiliario Navigation', () => {
  beforeEach(() => jest.resetModules());

  describe('Footer UserMenu desktop logged in avatar props', () => {
    it('returns props needed for desktop and PII data', () => {
      const {
        assert: assertUserPictures,
        result: resultUserPictures,
      } = mockUserPictures();

      const props = require('./props');

      const result = props(baseProps);

      expect(result).toEqual({
        lazyLoad: 'off',
        alt: baseProps.navigationPIIData.preferredName,
        ...resultUserPictures,
      });

      assertUserPictures(baseProps);
    });

    it('returns props needed for non desktop and no PII data', () => {
      const {
        assert: assertUserPictures,
        result: resultUserPictures,
      } = mockUserPictures();

      const props = require('./props');

      const testProps = {
        ...baseProps,
        device: {
          ...baseProps.device,
          desktop: false,
        },
        navigationPIIData: {},
      };
      const result = props(testProps);

      expect(result).toEqual({
        lazyLoad: 'on',
        alt: testProps.user.nickname,
        ...resultUserPictures,
      });

      assertUserPictures(testProps);
    });
  });
});
