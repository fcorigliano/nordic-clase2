/* eslint-disable no-undef */
/* eslint-disable no-console */
/**
 * Checks whether the element was visible or not in order to log the result
 * and print that information to the user, since webdriver does not log these things :(
 * @param {string} element - element selector
 * @param {bool} isVisible - resulting visibility
 * @param {bool} expectedVisibility - expected visibility
 */
const checkVisibleAndLog = (element, isVisible, expectedVisibility = true) => {
  if (isVisible === expectedVisibility) {
    console.info(`element ${element} was `, '\x1b[32m', `${expectedVisibility ? 'visible' : 'not visible'}`, '\x1b[0m');
  } else {
    console.info(
      `element ${element} was expected ${expectedVisibility ? 'visible' : 'not visible'} `,
      '\x1b[41m',
      `but it is ${isVisible ? 'visible' : 'not visible'}`,
      '\x1b[0m',
    );
  }

  expect(isVisible).to.equal(expectedVisibility);
};

/**
 * Checks if the element obtained through the passed in `element` has the expected visibility
 * passed in the `visible` param
 * @param {string} element - selector for the element
 * @param {bool} visible - expected visibility
 */
const checkVisibility = (element, visible = true) => {
  const isVisible = browser.isVisible(element);
  // If there are more than 1 result for the selector, browser.isVisible returns an array
  // of booleans. We need to iterate it to check each result
  if (Array.isArray(isVisible)) {
    isVisible.forEach(isEachElementVisible => checkVisibleAndLog(element, isEachElementVisible, visible));
  } else {
    checkVisibleAndLog(element, isVisible, visible);
  }
};

/**
 * Checks if the elements obtained through the passed in `elements` have the expected visibility
 * passed in the `visible` param
 * @param {array} elements - list of selectors ex: `['.class-1', '.class-2']`
 * @param {bool} visible - expected visibility
 */
const checkVisibilityForElements = (elements, visible) => {
  elements.forEach(element => checkVisibility(element, visible));
};

/**
 * Checks if the element obtained through the passed in `element` exists on the page or not, depending on the
 * value passed in through the `existance` parameter. If `existance = true` then this checks that the element
 * exists on the page. Exists = is present in the HTML, but it can be visible or not.
 * @param {string} element - selector for the element
 * @param {bool} existance - expected visibility
 */
const checkExistance = (element, existance = true) => {
  const isExisting = browser.isExisting(element);
  // If there are more than 1 result for the selector, browser.isExisting returns an array
  // of booleans. We need to iterate it to check each result
  if (Array.isArray(isExisting)) {
    isExisting.forEach(isEachElementExisting => expect(isEachElementExisting).to.equal(existance));
  } else {
    expect(isExisting).to.equal(existance);
  }
};

/**
 * Checks if the elements obtained through the passed in `elements` exist on the page or not, depending on the
 * value passed in through the `existance` parameter. If `existance = true` then this checks that the elements
 * exists on the page. Exists = is present in the HTML, but it can be visible or not.
 * @param {array} elements - list of selectors ex: `['.class-1', '.class-2']`
 * @param {bool} existance - expected visibility
 */
const checkExistanceForElements = (elements, existance) => {
  elements.forEach(element => checkExistance(element, existance));
};

/**
 * Checks that a specific `element` has a specific `value`
 * @param {string} element - selector for the element to check
 * @param {string} value - expected value
 */
const checkValue = (element, value) => expect(browser.$(element).getValue()).to.equal(value);

module.exports = {
  checkVisibility,
  checkVisibilityForElements,
  checkExistanceForElements,
  checkExistance,
  checkVisibleAndLog,
  checkValue,
};
