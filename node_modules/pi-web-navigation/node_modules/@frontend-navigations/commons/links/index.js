/* eslint-disable security/detect-non-literal-fs-filename */
/* eslint-disable security/detect-object-injection */
/**
 * Returns a url with a hash added at the end
 * @param {string} url - URL to concat the hash - example: https://wwww.mercadolibre.com.ar
 * @param {string} hash - hash to be added - example: menu-user
 * @returns {string} url with hash - example: https://wwww.mercadolibre.com.ar#menu-user
 */
const setHashLink = (url, hash) => {
  const urlHash = hash ? `#${hash}` : '';

  return `${url}${urlHash}`;
};

/**
 * Removes the last slash from a specific URL
 * @param {string} url - URL to remove the slash - example: https://wwww.mercadolibre.com.ar/
 * @returns {string} url without last slash - example: https://wwww.mercadolibre.com.ar
 */
const removeLastSlash = url => url.replace(/\/$/, '');

/**
 * Returns true if the currentURL is the same to url after removing the last slashes and removing
 * the home subdomain
 * @param {string} currentURL - Current URL for the application - example: https://www.mercadolibre.com.ar/moda
 * @param {string} url - Specific Link to be displayed - example: https://www.mercadolibre.com.ar/ofertas
 * @returns {bool}
 * returns true in the following scenarios:
 *  - currentURL = 'https://www.mercadolibre.com.ar/moda' && url = 'https://www.mercadolibre.com.ar/moda/'
 *  - currentURL = 'https://home.mercadolibre.com.ar/' && url = 'https://www.mercadolibre.com.ar/'
 */
const isLinkSameAsCurrentURL = (currentURL, url) => {
  const urlModified = removeLastSlash(url.replace('https://home', 'https://www'));
  const currentURLModified = removeLastSlash(currentURL);
  return currentURLModified === urlModified;
};

/**
 * Returns true if the url exists and has a link
 * @param {object} url - URL object - example: { link: 'https://wwww.mercadolibre.com.ar' }
 * @returns {bool} returns true if url exists and has a link
 */
const isUrlValid = url => !!(url && url.link);

/**
 * Generate a link
 * @param {object} options Options object
 * @param {array} options.links - array that represent what links we want to use
 * example: ['home', 'downloadApp']
 * @param {object} options.url - object with id, link and name
 * example: { link: '...', name: '...', id: '...' }
 * @param {string} options.currentUrl - actual URL of the browser
 * @param {object} options.originalProps - object with the props for the enchancement
 * @param {object} options.enhancement - component that if came will replace the link
 * @param {string} options.hash - hash for the URL href
 * @param {string} options.className - classname for the link
 * @param {string} options.linkConfig - link configuration
 * @returns {string} link tranformed with icon, selected, id, href with hash, className or link with enhancement
 */
const generateLink = ({ url, linkConfig, link, currentUrl, originalProps, enhancement, hash, className, icons, addLinkIdAttribute, ariaLabel }) => {
  let newUrl = Object.assign({}, url, {
    icon: icons && icons[link],
    id: link,
    selected: isLinkSameAsCurrentURL(currentUrl, url.link),
    link: {
      href: setHashLink(url.link, hash),
      className: typeof className === 'function' ? className(link) : className,
      'aria-label': ariaLabel ? url.name : null,
    },
  });

  if (enhancement) {
    newUrl = enhancement.enhance(newUrl, originalProps, linkConfig);
  }

  if (addLinkIdAttribute) {
    newUrl.link['data-link-id'] = link;
  }

  return newUrl;
};

/**
 * Creates an array of arrays that represents each section in the guest user menu, with each link formatted
 * @param {object} options Options object
 * @param {array} options.links - array that represent what links we want to use
 * example: ['home', 'downloadApp']
 * @param {object} options.urls - object with the id for the url as key and the information for that url as value
 * example: { home: { link: '...', name: '...' }}
 * @param {object} options.enhancements Links enhancements
 * @param {array} options.linkConfigs Links configurations
 * @returns {bool} returns true if url exists and has a link
 * TODO: it would be nice to validate links and urls structure in the future and log in case we have any error.
 */
const mapLinksToUrls = ({ links, urls, enhancements, linkConfigs = [], addLinkIdAttribute = false, ...props }) => {
  const onlyValidLinks = [];
  links.forEach((link, index) => {
    const isLinkConfig = Object.prototype.hasOwnProperty.call(link, 'link');
    const linkId = isLinkConfig ? link.link : link;
    const url = urls[linkId];

    if (isUrlValid(url)) {
      const newUrl = generateLink({
        url,
        link: linkId,
        linkConfig: isLinkConfig ? link : linkConfigs[index],
        enhancement: enhancements ? enhancements[linkId] : null,
        addLinkIdAttribute,
        ariaLabel: Object.prototype.hasOwnProperty.call(link, 'ariaLabel') ? link.ariaLabel : null,
        ...props,
      });

      onlyValidLinks.push(newUrl);
    }
  });

  return onlyValidLinks;
};

module.exports = {
  setHashLink,
  removeLastSlash,
  mapLinksToUrls,
  isLinkSameAsCurrentURL,
  isUrlValid,
  generateLink,
};
