/* eslint-disable class-methods-use-this */
const ua = require('universal-analytics');
const CUSTOM_DIMENSIONS = require('./custom-dimensions');
const NoUniversalAnalyticsManager = require('./no-universal-analytics-manager');
const logger = require('../logger');

class UniversalAnalyticsManager {
  constructor({ envRaw = {} } = {}) {
    const env = this.parseEnv(envRaw);

    if (!env.appName) {
      return new NoUniversalAnalyticsManager();
    }

    const sessionId = this.createSessionId(env.appName);
    try {
      this.visitor = ua('UA-74595852-38', sessionId, { strictCidFormat: false });
    } catch (e) {
      return new NoUniversalAnalyticsManager();
    }

    this.setCustomDimensions(env);
  }

  createSessionId(appName) {
    const today = new Date(Date.now()).toLocaleString().split(' ')[0].replace(/\//g, '');
    return `${appName}${today}`;
  }

  parseEnv(envRaw) {
    const appName = envRaw.npm_package_name ? envRaw.npm_package_name.toUpperCase() : '';
    const nodeVersion = envRaw.npm_config_node_version ? envRaw.npm_config_node_version : '';
    const npmRegexMatches = envRaw.npm_config_user_agent ? /npm\/([0-9]+\.[0-9]+\.[0-9]+)/.exec(envRaw.npm_config_user_agent) : null;
    const npmVersion = npmRegexMatches && npmRegexMatches.length > 1 ? npmRegexMatches[1] : '';
    const nodeEnv = envRaw.NODE_ENV ? envRaw.NODE_ENV.toUpperCase() : '';

    return {
      appName, nodeVersion, npmVersion, nodeEnv,
    };
  }

  setCustomDimensions(env) {
    this.visitor.set(CUSTOM_DIMENSIONS.AppName, env.appName);
    this.visitor.set(CUSTOM_DIMENSIONS.NodeVersion, env.nodeVersion);
    this.visitor.set(CUSTOM_DIMENSIONS.NPMVersion, env.npmVersion);
    this.visitor.set(CUSTOM_DIMENSIONS.NodeEnv, env.nodeEnv);
  }

  trackEvent(category, action, label = '', value = 0) {
    if (!this.validateEventData(category, action, label, value)) {
      return false;
    }

    const stringParams = [category, action, label].map((val) => val.toUpperCase());

    this.visitor.event(...stringParams, value).send();
    return true;
  }

  validateEventData(category, action, label, value) {
    const isStringValue = (val) => typeof val === 'string';
    const isNumberValue = (val) => typeof val === 'number';

    if (!category || !action) {
      logger.warn('TrackEvent requires at least category and action parameters');
      return false;
    }

    if (!isStringValue(category) || !isStringValue(action) || !isStringValue(label)
    ) {
      logger.warn('TrackEvent category, action and label parameters supports only string type values');
      return false;
    }

    if (!isNumberValue(value)) {
      logger.warn('TrackEvent value parameters supports only string type values');
      return false;
    }

    return true;
  }
}

module.exports = UniversalAnalyticsManager;
