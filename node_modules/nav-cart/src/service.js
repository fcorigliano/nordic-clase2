/* eslint-disable no-confusing-arrow */
const CartClient = require('./client');

const EMPTY_CART = { data: { badge_icon: { quantity: 0, label: '' } } };
const NO_CART = { data: {} };
const ENABLED_SITES = ['MLA', 'MLB', 'MLM'];
const ENABLE_SITE_CONFIG = {
  enabled_site: true,
  enabled_not_logged_user: true,
};

function CartService({ user, siteId, context }) {
  const userEnabled = user
    && user.raw
    && user.raw.status
    && user.raw.status.shopping_cart
    && user.raw.status.shopping_cart.buy === 'allowed';
  const configBySite = (config) => config && config.sites
    ? config.sites.find((site) => site.id === siteId)
    : null;
  const isSiteEnabled = ENABLED_SITES.includes(siteId);
  const getConfigBySite = () => {
    if (isSiteEnabled) {
      return Promise.resolve(ENABLE_SITE_CONFIG);
    }

    return CartClient.getConfig(context)
      .then((response) => configBySite(response.data))
      .catch(() => null);
  };

  return {
    /*
     * Obtener la informacion de carrito.
     * Si no hay configuracion para el siteId, no hay carrtito
     * Si el usurio esta deslogueado y la configuracion lo permite, habilitar carrito vacio
     * Si es usuario habilitado y hay config para el siteId, habilitar carrito con datos
     */
    getInfo: () => getConfigBySite().then((config) => {
      if (!config) {
        return Promise.resolve(NO_CART);
      }
      if (!user && config.enabled_not_logged_user) {
        return Promise.resolve(EMPTY_CART);
      }

      return config && userEnabled
        ? CartClient.getInfo(user.id, siteId, context)
        : Promise.resolve(NO_CART);
    }),

    /*
     * Agregar al carrito
     */
    add: (item) => CartClient.add(siteId, user.id, item, context),
  };
}

module.exports = CartService;
