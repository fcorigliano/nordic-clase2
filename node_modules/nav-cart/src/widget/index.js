/* eslint-disable no-new */
/**
 * Styles
 */
require('./styles/widget.scss');

/**
  * Dependencies
  */
const classList = require('tiny.js/lib/classList');
const ajax = require('tiny.js/lib/ajax');

const Layer = require('./helpers/Layer');
const template = require('./templates/addcart.template');
const translations = require('./translations');

const HIDE_DELAY_DEFAULT = 7000;
/**
  * Notification
  */
class CartWidget {
  /**
    * Instances the CartWidget
    * @constructor
    * @param {JSON} [options]
    * @returns {instance}
    */

  constructor(options = {}) {
    this.hideDelay = options.hideDelay || HIDE_DELAY_DEFAULT;
    const locale = options.locale || 'es';

    this.tr = {};
    [translations[locale], options.tr].forEach((source) => {
      // `options.tr` could be `undefined` so we need to check its value before iterate.
      if (source) {
        Object.keys(source).forEach((key) => {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            this.tr[key] = source[key];
          }
        });
      }
    });

    this.bus = options.bus;
    this.link = options.link;
    this.endpoints = options.endpoints;
    this.isMobile = options.isMobile;
    this.ui = {
      icon: options.element,
      number: options.element.querySelector('.nav-icon-cart-quantity'),
    };

    this.validateOptions();

    this.bindEvents();
  }

  validateOptions() {
    if (!this.ui.icon) {
      throw new Error('Cart: element is required.');
    }

    if (!this.endpoints || typeof this.endpoints !== 'object') {
      throw new Error('Cart: endpoints are required.');
    }

    if (!this.endpoints.get || this.endpoints.get === '') {
      throw new Error('Cart: endpoints.get is required.');
    }

    if (!this.endpoints.post || this.endpoints.post === '') {
      throw new Error('Cart: endpoints.post is required.');
    }
  }

  bindEvents() {
    this.bus.on('cart:refresh', this.refresh.bind(this));
    this.bus.on('notifications:cart-icon', this.refresh.bind(this));
    this.bus.on('cart:add', this.add.bind(this));
  }

  refresh() {
    ajax(this.endpoints.get, {
      method: 'GET',
      credentials: 'include',
      xhrFields: {
        withCredentials: true,
      },
      success: this.handleRefresh.bind(this),
      error: this.handleError.bind(this),
    });
  }

  add(data) {
    ajax(this.endpoints.post, {
      method: 'POST',
      data,
      xhrFields: {
        withCredentials: true,
      },
      dataType: 'json',
      contentType: 'application/json',
      headers: {
        Accept: 'application/json',
      },
      success: this.handleAdd.bind(this, data),
      error: this.handleError.bind(this),
    });
  }

  handleRefresh(response) {
    const { badge_icon, target } = response;
    const { quantity, label } = badge_icon;
    this.ui.number.innerHTML = label;

    if (quantity === 0) {
      classList.removeClass(this.ui.icon, 'nav-cart-full');
      classList.addClass(this.ui.icon, 'nav-cart-empty');
    } else {
      classList.addClass(this.ui.icon, 'nav-cart-full');
      classList.removeClass(this.ui.icon, 'nav-cart-empty');
    }

    const anchorEl = document.getElementById('nav-cart');
    if (anchorEl && anchorEl.href) {
      if (target && target.flow_type) {
        const hasFlowType = anchorEl.href.includes('flow_type');
        const hasQueryParams = anchorEl.href.includes('?');

        if (!hasFlowType) {
          const flowType = `flow_type=${target.flow_type}`;

          if (hasQueryParams) {
            anchorEl.href += `&${flowType}`;
          } else {
            anchorEl.href += `?${flowType}`;
          }
        }
      } else {
        anchorEl.href = this.link;
      }
    }

    this.bus.emit('cart:refresh-exclusive', response);
  }

  handleError(response) {
    const message = response.responseJSON ? response.responseJSON.message : this.tr.error;

    this.bus.emit('snackbar:show', {
      message,
      type: 'error',
      delay: this.hideDelay,
    });

    this.bus.emit('cart:error', response);
  }

  handleAdd(item) {
    this.showFeedback(item);
    this.refresh();
    this.bus.emit('cart:added', item);
  }

  showFeedback(item) {
    if (this.isMobile) {
      this.showSnackbar();
    } else {
      this.showLayer(item);
    }
  }

  showSnackbar() {
    this.bus.emit('snackbar:show', {
      message: this.tr.success,
      type: 'success',
      action: {
        title: this.tr.action,
        link: this.link,
      },
      delay: this.hideDelay,
    });
  }

  showLayer(item) {
    new Layer({
      element: this.ui.icon,
      template: template({
        item,
        link: this.link,
        legend: this.tr.legend,
      }),
      hideDelay: this.hideDelay,
    });
  }
}

module.exports = CartWidget;
