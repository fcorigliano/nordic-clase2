import scss from 'rollup-plugin-scss';
import { version } from './package.json';
import {
  join,
  resolve,
} from 'path';
import postcss from 'postcss';
import autoprefixer from 'autoprefixer';
import url from 'postcss-url';
import postCssBanner from 'postcss-banner';
import normalizeCharset from 'postcss-normalize-charset';
import {
  writeFileSync,
  readdirSync,
} from 'fs';
import copy from 'rollup-plugin-copy';
import { sites } from 'frontend-config/config/platforms';

const isDevelopment = process.env.NODE_ENV === 'development';

const businessUnit = 'mercadolibre';
const outputFolder = join(resolve('.'), `object-storage-assets/ui-navigation/${version}/${businessUnit}`);

const cdnBase = isDevelopment
  ? `http://localhost:8081`
  : `https://http2.mlstatic.com`;
const urlBase = `${cdnBase}/frontend-assets/first-party-web-navigation/ui-navigation/${version}`;

const businessUnitPath = 'business-unit-path/';
const defaultEntryPoints = 'default';
const entryPointsRelativeFolder = './src/css/entry-points';
const entryPointsAbsoluteFolder = join(resolve('.'), entryPointsRelativeFolder);

const bannerContent = `Navigation
@platform "${businessUnit}"
@version ${version}
@author MercadoLibre.com`;

const getFileConfig = ({
  name,
  siteId,
  entryPointsFolder,
  copyImageFiles,
}) => {
  const jsFileName = `${name}.js`;
  const jsAbsoluteFileName = join(entryPointsRelativeFolder, entryPointsFolder, jsFileName);

  writeFileSync(join(entryPointsAbsoluteFolder, entryPointsFolder, jsFileName), `import './${name}.scss';`);

  return {
    input: jsAbsoluteFileName,
    output: {
      file: join(outputFolder, `${name}${siteId ? `-${siteId}` : ''}.js`),
      format: 'esm',
    },
    plugins: [
      scss({
        processor: () => postcss([
          autoprefixer({
            overrideBrowserslist: [
              'chrome >= 22',
              'firefox >= 24',
              'android >= 4.4',
              'safari >= 7',
              'ie 11',
              'not dead',
            ],
            flexbox: 'no-2009',
          }),
          url([{
            filter: `${businessUnitPath}*`,
            url: asset => `${urlBase}/${businessUnit}/first-party/${asset.url.slice(businessUnitPath.length)}`,
          }]),
          postCssBanner({
            banner: bannerContent,
          }),
          normalizeCharset(true),
        ]),
        outputStyle: 'compressed',
      }),
    ].concat(copyImageFiles
      ? copy({
        targets: [
          {
            src: 'src/images/*',
            dest: join(outputFolder, 'first-party'),
          },
        ]
      })
      : []
    ),
  };
};

const fileExtension = '.scss';
const defaultFileNames = readdirSync(join(entryPointsAbsoluteFolder, defaultEntryPoints), { withFileTypes: true })
  .filter((entry) => !entry.isDirectory() && entry.name.endsWith(fileExtension))
  .map(({ name }) => name.slice(0, - fileExtension.length));

const siteSpecificFileNames = readdirSync(entryPointsAbsoluteFolder, { withFileTypes: true })
  .filter((entry) => entry.isDirectory() && entry.name !== defaultEntryPoints)
  .map(({ name }) => name)
  .reduce((tempHash, siteId) => ({
    ...tempHash,
    [siteId]: readdirSync(join(entryPointsAbsoluteFolder, siteId), { withFileTypes: true })
      .filter((entry) => !entry.isDirectory() && entry.name.endsWith(fileExtension))
      .map(({ name }) => name.slice(0, - fileExtension.length)),
  }), {});


const entryPoints = [null] // files without site suffix
  .concat(sites.ML)
  .reduce((tempEntryPoints, siteId) => {
    const fileNames = !siteId
      ? defaultFileNames
      : (siteSpecificFileNames[siteId] || defaultFileNames);

    return tempEntryPoints
      .concat(fileNames.map(name => ({
        name,
        siteId,
        entryPointsFolder: siteSpecificFileNames[siteId]
          ? siteId
          : defaultEntryPoints,
      })));
  }, [])
  .map((fileData, index) => getFileConfig({
    name: fileData.name,
    siteId: fileData.siteId,
    entryPointsFolder: fileData.entryPointsFolder,
    copyImageFiles: !index,
  }));

if (!entryPoints.length) {
  throw new Error('No scss files where found');
}

export default entryPoints;