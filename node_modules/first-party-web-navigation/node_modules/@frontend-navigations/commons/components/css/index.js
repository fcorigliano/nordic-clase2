const React = require('react');
const propTypes = require('prop-types');
const Style = require('frontend-style');
const config = require('frontend-config');
const {
  getHref,
  getPlatformName,
} = require('../../services/ui-navigation');
const logger = require('../../logger');
const { getFileContent } = require('./files-cache');

const Css = (props) => {
  const {
    navigationType,
    files,
    platformId,
    siteId,
    feConfigEnvironment,
    embedCss,
    cdn,
    configGetter,
    configEnvironment,
    addConfigUpdateHandler,
    configKey,
    appName,
  } = props;

  if (navigationType === 'hidden' || !files.length) {
    return null;
  }

  const platformName = getPlatformName(platformId);
  if (!platformName) {
    logger.error(`Navigation CSS component - Unknown platform ${platformId}`);
    return null;
  }

  const uiNavigationVersionKey = configKey || 'uiNavigationVersion';
  const uiNavigationVersion = configGetter
    ? configGetter({
      key: uiNavigationVersionKey,
      platform: {
        id: platformId,
        siteId,
      },
    })
    : config.get(uiNavigationVersionKey, platformId, siteId, feConfigEnvironment);
  if (!uiNavigationVersion) {
    // eslint-disable-next-line max-len
    logger.error(`Navigation CSS component - no ${uiNavigationVersionKey} configuration for platform "${platformId}" and site "${siteId}"`);
    return null;
  }

  const siteSpecificCSS = configGetter
    ? configGetter({
      key: 'siteSpecificCSS',
      platform: {
        id: platformId,
        siteId,
      },
    })
    : config.get('siteSpecificCSS', platformId, siteId, feConfigEnvironment);

  const siteSuffix = siteSpecificCSS
    ? `-${siteId}`
    : '';

  return files.map((file) => {
    const styleProps = {
      media: file.media,
    };

    const fileName = `${file.name}${siteSuffix}.css`;

    if (embedCss) {
      // Try to embed CSS

      const environment = configEnvironment || feConfigEnvironment;

      const content = getFileContent({
        fileName,
        platformId,
        siteId,
        environment,
        uiNavigationVersion,
        platformName,
        configGetter,
        addConfigUpdateHandler,
      });

      if (content) {
        styleProps.renderChildrenInPlace = false;
        styleProps.children = content;
      } else {
        // this is a fallback just in case the file is not present
        styleProps.href = getHref(cdn, fileName, uiNavigationVersion, platformName, appName);
      }
    } else {
      styleProps.href = getHref(cdn, fileName, uiNavigationVersion, platformName, appName);

      if (file.firstRequestInlineStyles) {
        styleProps.firstRequestInlineStyles = {
          key: 'ui-navigation',
          value: uiNavigationVersion,
        };

        const content = getFileContent({
          fileName,
          platformId,
          siteId,
          feConfigEnvironment,
          uiNavigationVersion,
          platformName,
        });

        if (content) {
          styleProps.children = content;
          styleProps.renderChildrenInPlace = false;
        }
      }
    }

    return (
      <Style {...styleProps} />
    );
  });
};

Css.propTypes = {
  navigationType: propTypes.string,
  platformId: propTypes.string,
  siteId: propTypes.string,
  feConfigEnvironment: propTypes.string,
  embedCss: propTypes.bool,
  files: propTypes.arrayOf(propTypes.shape({
    name: propTypes.string,
    media: propTypes.string,
    firstRequestInlineStyles: propTypes.bool,
  })),
  cdn: propTypes.shape({
    link: propTypes.string,
  }),
  configGetter: propTypes.func,
  configEnvironment: propTypes.string,
  addConfigUpdateHandler: propTypes.func,
  configKey: propTypes.string,
};

Css.defaultProps = {
  navigationType: 'full',
  platformId: 'ML',
  siteId: 'MLA',
  embedCss: false,
  feConfigEnvironment: null,
  files: [],
  cdn: null,
  configGetter: null,
  configEnvironment: null,
  addConfigUpdateHandler: null,
  configKey: null,
};

module.exports = Css;
