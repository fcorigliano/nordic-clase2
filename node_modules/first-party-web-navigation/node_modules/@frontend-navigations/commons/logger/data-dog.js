const statsdInternal = require('frontend-statsd/internal');
const { getPathName } = require('./utils');
const {
  STAT_INTERNAL_ERROR,
  STAT_PREFIX,
} = require('./constants.js');

/**
 * Logs an error stat
 * @param {object} options Log options
 * @param {object} options.req Express request
 * @param {Error} options.error Error to log
 * @param {string} options.errorType Error type used to define stat path. Eg.: 'headerless_rendering'
 * @param {object} [options.tags={}] Optional tags
 * @param {boolean} [isInternal=false] Defines if is an internal error. If it's not an internal error
 * it will try to log the logging error on datadog using this method with this value on true
 * @returns {undefined}
 */
const send = (options, isInternal = false) => {
  try {
    // Stat name
    const stat = [
      STAT_PREFIX,
      options.name,
    ]
      .concat(options.errorType ? getPathName(options.errorType) : [])
      .join('.');

    // Tags
    const tags = Object.assign({}, options.tags);

    if (options.req && options.req.platform) {
      tags.platformId = options.req.platform.id;
    }

    statsdInternal.histogram(stat, 1, tags);
  } catch (internalError) {
    // There was an error sending the stat
    if (!isInternal) {
      // If the error was caused by an external error, we will try to log the internal error on datadog.
      // This check prevents infinite looping when there are any error logging an internal error

      send({
        errorType: STAT_INTERNAL_ERROR,
        tags: {
          originalErrorType: options.errorType,
        },
      }, true);
    }
  }
};

module.exports = {
  send,
};
