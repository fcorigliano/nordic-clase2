const getService = () => require('../../../../prepare-to-render/services/cookie-disclaimer')

describe('Commons', () => {
  beforeEach(() => jest.resetModules());

  describe('Prepare to render cookie disclaimer service', () => {
    it('should track hideCookieDisclaimerBanner if true', (done) => {
      const histogram = jest.fn();
      jest.doMock('frontend-statsd/internal', () => ({ histogram }));

      const applicationId = 'some-app-id';
      jest.doMock('frontend-env', () => ({
        PRODUCTION: true,
        FURY: true,
        APPLICATION: applicationId,
        TEST: true,
      }));

      const service = getService();
      service.execute({}, {}, {
        hideCookieDisclaimerBanner: true,
      }).then(() => {
        expect(histogram).toHaveBeenCalledWith('navigation.hide_cookie_disclaimer_banner', 1, {});
        done();
      });
    });

    it('should not track hideCookieDisclaimerBanner if false', (done) => {
      const histogram = jest.fn();
      jest.doMock('frontend-statsd/internal', () => ({ histogram }))

      const applicationId = 'some-app-id';
      jest.doMock('frontend-env', () => ({
        PRODUCTION: true,
        FURY: true,
        APPLICATION: applicationId,
        TEST: true,
      }));

      const service = getService();
      service.execute({}, {}, {
        hideCookieDisclaimerBanner: false,
      }).then(() => {
        expect(histogram).not.toHaveBeenCalledWith('navigation.hide_cookie_disclaimer_banner', 1, {});
        done();
      });
    });
  });
});
