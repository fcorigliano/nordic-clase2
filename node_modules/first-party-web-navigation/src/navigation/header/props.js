
const feConfig = require('frontend-config');
const { getValue } = require('first-party-navigation-config');
const isUserLoggedIn = require('@frontend-navigations/commons/is-user-logged-in');
const logoProps = require('./logo/props');
const meliLabProps = require('./meli-lab/props');

const linkTransformations = {
  login: (linkData, options) => ({
    link: `${linkData.link}?go=${encodeURIComponent(options.currentLocation)}`,
  }),
};

const getLinks = (headerLinks, feConfigUrls, fpConfigUrls, options) => headerLinks.map(link => {
  const linkConfig = fpConfigUrls[link] || feConfigUrls[link];
  return {
    ...linkConfig, // eslint-disable-line security/detect-object-injection
      ...(linkTransformations[link] && linkTransformations[link](linkConfig, options)), // eslint-disable-line
    id: link,
  };
});

const headerProps = (props) => {
  const {
    platform,
    actualLocation: currentLocation,
    feConfigEnvironment,
    user,
    type,
    navigationPIIData,
    req,
  } = props;
  const isDesktop = props.device.desktop || false;
  const firstPartyConfig = getValue({
    key: 'firstParty',
    platform,
    req,
  });
  const fpConfigUrls = getValue({
    key: 'url',
    platform,
    req,
  });
  const feConfigUrls = feConfig.get('url', platform.id, platform.siteId, feConfigEnvironment);

  const logo = {
    ...logoProps(props),
    url: (fpConfigUrls.firstPartyHome) ? fpConfigUrls.firstPartyHome.link : feConfigUrls.home.link,
  };

  const melilab = meliLabProps(props);

  const isLoggedIn = isUserLoggedIn(props);

  const myAccountText = feConfigUrls.myAccount.name;

  if (!firstPartyConfig) {
    return {
      siteId: platform.siteId,
      isDesktop,
      logo,
      melilab,
      user,
      isLoggedIn,
      myAccountText,
      headerLinks: null,
      loggedOutLinks: null,
      loggedInLinks: null,
      logoAsideText: null,
      type,
      navigationPIIData,
    };
  }

  const {
    desktopHeaderLinks,
    desktopLoggedInHeaderMenuLinks,
    desktopLoggedOutHeaderMenuLinks,
    logoAsideText,
  } = firstPartyConfig;

  const getLinksOptions = {
    currentLocation,
  };
  const headerLinks = getLinks(desktopHeaderLinks, feConfigUrls, fpConfigUrls, getLinksOptions);
  const loggedInLinks = getLinks(desktopLoggedInHeaderMenuLinks, feConfigUrls, fpConfigUrls, getLinksOptions);
  const loggedOutLinks = getLinks(desktopLoggedOutHeaderMenuLinks, feConfigUrls, fpConfigUrls, getLinksOptions);

  return {
    siteId: platform.siteId,
    isDesktop,
    logo,
    melilab,
    user,
    isLoggedIn,
    headerLinks,
    loggedOutLinks,
    loggedInLinks,
    myAccountText,
    logoAsideText,
    type,
    navigationPIIData,
  };
};

module.exports = headerProps;
