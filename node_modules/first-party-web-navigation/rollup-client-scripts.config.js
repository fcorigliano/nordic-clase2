import {
  join,
  resolve,
} from 'path';
import { readdirSync } from 'fs';
import { terser } from 'rollup-plugin-terser';
import { getBabelOutputPlugin } from '@rollup/plugin-babel';

const outputFolder = join(resolve('.'), 'lib/client');

const entryPointsRelativeFolder = './src/navigation/client';
const entryPointsAbsoluteFolder = join(resolve('.'), entryPointsRelativeFolder);

const isDevelopment = process.env.NODE_ENV === 'development';

const getFileConfig = (name) => {
  const jsFileName = `${entryPointsRelativeFolder}/${name}.js`;

  return {
    input: jsFileName,
    output: {
      file: join(outputFolder, `${name}.js`),
      format: 'cjs',
      sourcemap: isDevelopment ? 'inline' : false
    },
    plugins: [
      getBabelOutputPlugin({
        presets: ['@babel/preset-env']
      })
    ].concat(isDevelopment
        ? []
        : terser()),
  };
};

const fileExtension = '.js';
const specFileExtension = '.spec.js';
const entryPoints = readdirSync(entryPointsAbsoluteFolder, { withFileTypes: true })
  .filter((entry) => !entry.isDirectory() && entry.name.endsWith(fileExtension) && !entry.name.endsWith(specFileExtension))
  .map(({ name }) => getFileConfig(name.slice(0, - fileExtension.length)));

if (!entryPoints.length) {
  throw new Error('No files where found');
}

export default entryPoints;