/**
 * Module dependencies
 */
const {
  createConfig,
  setOutput,
  setStats,
  addPlugins,
  customConfig,
  sourceMaps,
  env,
  entryPoint,
} = require('frontend-building_blocks');
const babel = require('frontend-building_blocks/babel');
const nodeExternals = require('webpack-node-externals');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const path = require('path');

const nodeEnv = process.env.NODE_ENV || 'development';

const buildPath = './lib/client';

const babelConfig = {
  presets: [
    '@babel/preset-react',
    ['@babel/preset-env', {
      targets: {
        browsers: [
          'last 2 versions',
          '> 1%', 'android >= 2.1',
          'chrome >= 18',
          'firefox >= 4',
          'safari >= 9',
          'ios >= 7',
        ],
      },
    }],
  ],
  plugins: ['@babel/plugin-proposal-object-rest-spread'].concat(nodeEnv === 'production' ? [
    '@babel/plugin-transform-react-constant-elements',
    '@babel/plugin-transform-react-inline-elements',
    'babel-plugin-transform-react-remove-prop-types',
  ] : []),
};

module.exports = createConfig([
  entryPoint({
    'cookie-consent-banner': './src/client/cookie-consent-banner.js',
  }),
  babel(babelConfig),
  setStats('adaptive'),
  customConfig({
    externals: [
      nodeExternals({
        whitelist: ['@frontend-cookies-manager/common/src/services/client/send-event'],
      }),
    ],
  }),
  setOutput({
    path: path.join(path.resolve('.'), './build/client'),
    filename: '[name].js',
    libraryTarget: 'var',
    library: 'ccb',
  }),
  addPlugins([
    new CleanWebpackPlugin({
      cleanOnceBeforeBuildPatterns: [`${path.resolve(buildPath)}/**/*`],
      cleanStaleWebpackAssets: true,
      verbose: true,
      dry: false,
      dangerouslyAllowCleanPatternsOutsideProject: true,
    }),
  ]),
  env('development', [
    sourceMaps(),
  ]),
  env('production', [
    customConfig({
      optimization: {
        minimize: true,
        minimizer: [
          new TerserPlugin({
            sourceMap: true,
            parallel: true,
            terserOptions: {
              ecma: undefined,
              warnings: false,
            },
          }),
        ],
      },
    }),
  ]),
]);
