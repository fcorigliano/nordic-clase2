const {
  createConfig,
  entryPoint,
  setOutput,
  fileType,
} = require('frontend-building_blocks');
const path = require('path');
const extractText = require('frontend-building_blocks/extract-text');
const sass = require('frontend-building_blocks/sass');
const autoprefixer = require('autoprefixer');
const cssnano = require('cssnano');
const postcss = require('frontend-building_blocks/postcss');
const { getData } = require('./src/components/commons/entries-data');
const { getData: disclaimerBannerGetData } = require('./src/components/cookie-disclaimer/css/entries-data');

const postCssPlugins = [
  autoprefixer({
    overrideBrowserslist: [
      'chrome >= 22',
      'firefox >= 24',
      'android >= 4.4',
      'safari >= 7',
      'ie 11',
      'not dead',
    ],
    flexbox: 'no-2009',
  }),
].concat(process.env.NODE_ENV === 'production' ? [cssnano({
  preset: ['default', { normalizeUrl: false }], // @see https://cssnano.co/guides/presets
})] : []);

const componentsFolder = './packages/cookies-consent-banner/src/components';

const consentBannerOptOutEntryPoints = getData('cookie-consent-banner-opt-out')
  .reduce((tempEntryPoints, { fileName, withoutExtension }) => ({
    ...tempEntryPoints,
    [`cookie-consent-banner-opt-out-${withoutExtension}`]:
      `${componentsFolder}/cookie-consent-banner-opt-out/css/entries/${fileName}`,
  }), {});

const entryPoints = disclaimerBannerGetData()
  .reduce((tempEntryPoints, { fileName, withoutExtension }) => ({
    ...tempEntryPoints,
    [`disclaimer-banner-${withoutExtension}`]: `${componentsFolder}/cookie-disclaimer/css/entries/${fileName}`,
  }), consentBannerOptOutEntryPoints);

const config = createConfig([
  entryPoint(entryPoints),
  setOutput({
    path: path.join(path.resolve('.'), './packages/cookies-consent-banner/lib-css'),
  }),
  postcss(fileType('text/css'), postCssPlugins),
  postcss(fileType('text/x-sass'), postCssPlugins),
  sass(),
  extractText('[name].css', ['text/x-sass', 'text/css']),
]);

/**
 * Expose config
 */
module.exports = config;
