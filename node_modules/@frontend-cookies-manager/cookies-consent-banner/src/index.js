const React = require('react');
const dpConfig = require('data-privacy-config');
const ReactDOMServer = require('react-dom/server');
const { getDomain } = require('@frontend-cookies-manager/common/src/services/domains');
const { getDpEnvironment } = require('@frontend-cookies-manager/common/src/services/get-dp-environment');
const { consentBanner } = require('@frontend-cookies-manager/common/src/constants/configurations');
const { BOTTOM } = require('./constants/positions');
const {
  unknownError,
  noConsentBannerConfig,
} = require('./constants/statsd');
const {
  Style,
  Script,
} = require('../lib/components'); // eslint-disable-line
const logger = require('./services/logger');
const { send } = require('./services/statsd');
const { getComponentByExperimentVariant } = require('./services/experiments');
const { shouldShowBanner } = require('./services/filtering');

// Rename "children" prop to "code"
const renameChildren = (propsArray = []) => propsArray.map(({ children: code, ...otherProps }) => ({
  ...otherProps,
  code,
}));

const getDynamicContent = ({
  userId,
  platform = {},
  userPreferences,
  dynamicContentOptions = {},
  applicationId,
  scopeId,
  device,
  browser,
  headers,
  originalUrl,
  cookies,
  feConfigEnvironment,
  envVariables,
  isFallback,
  req,
}) => {
  try {
    const platformId = platform.id;
    const { siteId } = platform;
    const platformDomain = platform.domain;

    if (!platformId || !siteId || !platformDomain
      || !device || device.webView
      || dynamicContentOptions.disableCookiesConsentBanner
    ) {
      return null;
    }

    const dpConfigEnvironment = getDpEnvironment({
      headers,
      cookies,
      req,
    });

    const consentBannerConfiguration = dpConfig.getValue({
      key: consentBanner,
      platform,
      environment: dpConfigEnvironment,
      req,
    });
    if (!consentBannerConfiguration) {
      send(noConsentBannerConfig, {
        platformId,
        siteId,
        originalApplicationId: applicationId,
      });

      logger.error('There is no cookiesConsentBanner configuration on data-privacy-config', {
        platformId,
        siteId,
        originalApplicationId: applicationId,
        extraTags: {
          feConfigEnvironment,
        },
      });

      return null;
    }

    if (isFallback && !consentBannerConfiguration.renderFallback) {
      return null;
    }

    if (!shouldShowBanner({
      config: consentBannerConfiguration,
      applicationId,
      scopeId,
      path: originalUrl,
      envVariables,
    })) {
      return null;
    }

    const {
      component,
      mapProps,
    } = getComponentByExperimentVariant({
      platform,
      headers,
      cookies,
      req,
    });

    const domain = getDomain(platformId, siteId, platformDomain, feConfigEnvironment);

    const props = mapProps({
      platformId,
      siteId,
      domain,
      userId,
      browser,
      device,
      userPreferences,
      feConfigEnvironment,
      headers,
      cookies,
      req,
    });

    const element = React.createElement(component, props, null);

    const markup = ReactDOMServer.renderToStaticMarkup(element);

    const styles = renameChildren(Style.rewind());
    const scripts = renameChildren(Script.rewind());

    if (!markup && !styles.length && !scripts.length) {
      return null;
    }

    return {
      markup,
      styles,
      scripts,
      cookies: [],
      position: BOTTOM,
    };
  } catch (error) {
    Style.rewind();
    Script.rewind();

    const platformWithDefault = platform || {};
    const platformId = platformWithDefault.id || null;
    const siteId = platformWithDefault.siteId || null;
    const domain = platformWithDefault.domain || null;

    send(unknownError, {
      message: (error || {}).message || null,
      originalApplicationId: applicationId,
      platformId,
      siteId,
      domain,
    });

    logger.error('Unknown error', {
      error,
      platformId,
      originalApplicationId: applicationId,
      siteId,
      domain,
    });

    return null;
  }
};

module.exports = {
  getDynamicContent,
};
