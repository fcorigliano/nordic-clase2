/*! a11y-dialog 7.3.0 */
!(function (t, e) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = e() : typeof define === 'function' && define.amd ? define(e) : (t = typeof globalThis !== 'undefined' ? globalThis : t || self).A11yDialog = e(); }(this, (() => {
  const t = ['a[href]:not([tabindex^="-"])', 'area[href]:not([tabindex^="-"])', 'input:not([type="hidden"]):not([type="radio"]):not([disabled]):not([tabindex^="-"])', 'input[type="radio"]:not([disabled]):not([tabindex^="-"])', 'select:not([disabled]):not([tabindex^="-"])', 'textarea:not([disabled]):not([tabindex^="-"])', 'button:not([disabled]):not([tabindex^="-"])', 'iframe:not([tabindex^="-"])', 'audio[controls]:not([tabindex^="-"])', 'video[controls]:not([tabindex^="-"])', '[contenteditable]:not([tabindex^="-"])', '[tabindex]:not([tabindex^="-"])']; function e(t) { this._show = this.show.bind(this), this._hide = this.hide.bind(this), this._maintainFocus = this._maintainFocus.bind(this), this._bindKeypress = this._bindKeypress.bind(this), this.$el = t, this.shown = !1, this._id = this.$el.getAttribute('data-a11y-dialog') || this.$el.id, this._previouslyFocused = null, this._listeners = {}, this.create(); } function i(t, e) { return i = (e || document).querySelectorAll(t), Array.prototype.slice.call(i); let i; } function n(t) { (t.querySelector('[autofocus]') || t).focus(); } function s() { i('[data-a11y-dialog]').forEach(((t) => { new e(t); })); } return e.prototype.create = function () { return this.$el.setAttribute('aria-hidden', !0), this.$el.setAttribute('aria-modal', !0), this.$el.setAttribute('tabindex', -1), this.$el.hasAttribute('role') || this.$el.setAttribute('role', 'dialog'), this._openers = i(`[data-a11y-dialog-show="${this._id}"]`), this._openers.forEach((t) => { t.addEventListener('click', this._show); }), this._closers = i('[data-a11y-dialog-hide]', this.$el).concat(i(`[data-a11y-dialog-hide="${this._id}"]`)), this._closers.forEach((t) => { t.addEventListener('click', this._hide); }), this._fire('create'), this; }, e.prototype.show = function (t) { return this.shown || (this._previouslyFocused = document.activeElement, this.$el.removeAttribute('aria-hidden'), this.shown = !0, n(this.$el), document.body.addEventListener('focus', this._maintainFocus, !0), document.addEventListener('keydown', this._bindKeypress), this._fire('show', t)), this; }, e.prototype.hide = function (t) { return this.shown ? (this.shown = !1, this.$el.setAttribute('aria-hidden', 'true'), this._previouslyFocused && this._previouslyFocused.focus && this._previouslyFocused.focus(), document.body.removeEventListener('focus', this._maintainFocus, !0), document.removeEventListener('keydown', this._bindKeypress), this._fire('hide', t), this) : this; }, e.prototype.destroy = function () { return this.hide(), this._openers.forEach((t) => { t.removeEventListener('click', this._show); }), this._closers.forEach((t) => { t.removeEventListener('click', this._hide); }), this._fire('destroy'), this._listeners = {}, this; }, e.prototype.on = function (t, e) { return void 0 === this._listeners[t] && (this._listeners[t] = []), this._listeners[t].push(e), this; }, e.prototype.off = function (t, e) { const i = (this._listeners[t] || []).indexOf(e); return i > -1 && this._listeners[t].splice(i, 1), this; }, e.prototype._fire = function (t, e) { const i = this._listeners[t] || []; const n = new CustomEvent(t, { detail: e }); this.$el.dispatchEvent(n), i.forEach((t) => { t(this.$el, e); }); }, e.prototype._bindKeypress = function (e) { this.$el.contains(document.activeElement) && (this.shown && e.which === 27 && this.$el.getAttribute('role') !== 'alertdialog' && (e.preventDefault(), this.hide(e)), this.shown && e.which === 9 && (function (e, n) { const s = (function (e) { return i(t.join(','), e).filter(((t) => !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length))); }(e)); const o = s.indexOf(document.activeElement); n.shiftKey && o === 0 ? (s[s.length - 1].focus(), n.preventDefault()) : n.shiftKey || o !== s.length - 1 || (s[0].focus(), n.preventDefault()); }(this.$el, e))); }, e.prototype._maintainFocus = function (t) { !this.shown || t.target.closest('[aria-modal="true"]') || t.target.closest('[data-a11y-dialog-ignore-focus-trap]') || n(this.$el); }, typeof document !== 'undefined' && (document.readyState === 'loading' ? document.addEventListener('DOMContentLoaded', s) : window.requestAnimationFrame ? window.requestAnimationFrame(s) : window.setTimeout(s, 16)), e;
})));
