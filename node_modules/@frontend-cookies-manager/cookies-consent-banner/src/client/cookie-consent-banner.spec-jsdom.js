const { embedModeEvents, embedModeStatus, getModalConfig } = require('../utils/modal');

const defaultPreferences = {
  advertising: true,
  tracking: true,
};

const defaultApiData = {
  url: 'some-url',
  payload: {
    somePayloadKey: 'somePayloadValue',
  },
};

const defaultCookieData = {
  cookieName: 'some-cookie-name',
  maxAge: 1234,
  path: '/',
  domain: 'some-domain',
  secure: true,
  sameSite: 'none',
  userId: 4321,
};

const defaultCookieDataList = [defaultCookieData];

const defaultConsentType = 'optOutBottom';
const defaultNamespace = 'cookie-consent-banner-opt-out';

const defaultTypeOptions = {
  closeElements: [],
};

/* eslint-disable max-len */
const feedbackHTML = `
<div class="cookie-consent-snackbar cookie-consent-snackbar--hidden cookie-consent-snackbar--collapsed cookie-consent-snackbar--success" role="region">
  <div class="cookie-consent-snackbar__content">
    <div class="cookie-consent-snackbar__message">
      ¡Listo! Guardamos tus preferencias en los navegadores donde inicies sesión.
    </div>
    <button class="cookie-consent-snackbar__close">
      Cerrar
    </button>
  </div>
</div>
<div class="cookie-consent-snackbar cookie-consent-snackbar--hidden cookie-consent-snackbar--collapsed cookie-consent-snackbar--error" role="region">
  <div class="cookie-consent-snackbar__content">
    <div class="cookie-consent-snackbar__message">
      Algo salió mal. Por favor, vuelve a intentarlo.
    </div>
    <button class="cookie-consent-snackbar__close">
      Cerrar
    </button>
  </div>
</div>
`;

const getDocument = () => {
  const newDocument = {
    getElementById: document.getElementById.bind(document),
    getElementsByClassName: document.getElementsByClassName.bind(document),
    querySelector: document.querySelector.bind(document),
    body: document.body,
    documentElement: document.documentElement,
  };
  const setDocumentCookie = jest.fn();
  Object.defineProperty(newDocument, 'cookie', {
    set: setDocumentCookie,
  });

  const assertCookieCalled = (cookieData) => {
    const {
      cookieName,
      maxAge,
      path,
      domain,
      secure,
      sameSite,
      userId,
    } = {
      ...defaultCookieData,
      ...cookieData,
    };

    const cookieValue = {
      categories: defaultPreferences,
    };

    if (userId) {
      cookieValue.userId = userId;
    }

    const cookieString = [
      `${cookieName}=${encodeURIComponent(JSON.stringify(cookieValue))}`,
      `domain=${domain}`,
      `path=${path}`,
    ]
      .concat(maxAge ? `max-age=${maxAge}` : [])
      .concat(sameSite ? `samesite=${sameSite}` : [])
      .concat(secure ? 'secure' : [])
      .join('; ');

    expect(setDocumentCookie).toBeCalledWith(cookieString);
  };

  const assertCookiesCalled = (cookieDataList = defaultCookieDataList) => {
    cookieDataList.forEach(cookieData => {
      assertCookieCalled(cookieData);
    });
  };

  const assertCookieNotCalled = () => expect(setDocumentCookie).not.toHaveBeenCalled();

  return {
    mockedDocument: newDocument,
    assertCookiesCalled,
    assertCookieNotCalled,
  };
};

const mockXMLHttpRequest = () => {
  const xhrMockObj = {
    open: jest.fn(),
    send: jest.fn(),
    setRequestHeader: jest.fn(),
    readyState: 4,
    status: 200,
    responseText: JSON.stringify({
      cookies_preferences: {
        advertising: true,
      },
    }),
  };

  xhrMockObj.send = jest.fn().mockImplementation(() => xhrMockObj.onreadystatechange());

  const XMLHttpRequestMock = jest.fn().mockReturnValue(xhrMockObj);

  window.XMLHttpRequest = XMLHttpRequestMock;

  const assertCalled = () => {
    expect(XMLHttpRequestMock).toHaveBeenCalledWith();
    // eslint-disable-next-line security/detect-non-literal-fs-filename
    expect(xhrMockObj.open).toHaveBeenCalledWith('PUT', defaultApiData.url, true);
    expect(xhrMockObj.setRequestHeader).toHaveBeenCalledWith('Content-type', 'application/json;charset=UTF-8');
    expect(xhrMockObj.send).toHaveBeenCalledWith(JSON.stringify({
      ...defaultApiData.payload,
      cookies_preferences: defaultPreferences,
    }));
  };

  const assertNotCalled = () => {
    expect(XMLHttpRequestMock).not.toHaveBeenCalled();
  };

  return {
    assertCalled,
    assertNotCalled,
  };
};

describe('Component client code', () => {
  beforeEach(() => {
    jest.resetAllMocks();
  });

  it('should remove component when accepted skipping XMLHttpRequest and set cookie', () => {
    const { assertNotCalled: assertNotCalledXMLHttpRequest } = mockXMLHttpRequest();
    const {
      mockedDocument,
      assertCookieNotCalled,
    } = getDocument();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;

    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const container = mockedDocument.querySelector(`.${defaultNamespace}`);

    expect(container).toBe(null);
    assertNotCalledXMLHttpRequest();
    assertCookieNotCalled();
  });

  it('should remove component when accepted, send XMLHttpRequest and set cookie for logged user', () => {
    const { assertCalled: assertCalledXMLHttpRequest } = mockXMLHttpRequest();
    const {
      mockedDocument,
      assertCookiesCalled,
    } = getDocument();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;
    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, defaultApiData, defaultCookieDataList, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const container = mockedDocument.querySelector(`.${defaultNamespace}`);

    expect(container).toBe(null);
    assertCalledXMLHttpRequest();
    assertCookiesCalled();
  });

  it('should remove component when accepted, send XMLHttpRequest and set cookie for not logged user', () => {
    const { assertCalled: assertCalledXMLHttpRequest } = mockXMLHttpRequest();
    const {
      mockedDocument,
      assertCookiesCalled,
    } = getDocument();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;
    const execute = require('./cookie-consent-banner');

    const cookieDataList = [{
      ...defaultCookieData,
      userId: null,
    }];
    execute(mockedDocument, defaultPreferences, defaultApiData, cookieDataList, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const container = mockedDocument.querySelector(`.${defaultNamespace}`);

    expect(container).toBe(null);
    assertCalledXMLHttpRequest();
    assertCookiesCalled(cookieDataList);
  });

  it('should remove component when accepted, set cookie and skip XMLHttpRequest', () => {
    const {
      mockedDocument,
      assertCookiesCalled,
    } = getDocument();
    const { assertNotCalled: assertNotCalledXMLHttpRequest } = mockXMLHttpRequest();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;
    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, null, defaultCookieDataList, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const container = mockedDocument.querySelector(`.${defaultNamespace}`);

    expect(container).toBe(null);
    assertNotCalledXMLHttpRequest();
    assertCookiesCalled();
  });

  it('should remove component when accepted, send XMLHttpRequest and skip set cookie', () => {
    const {
      mockedDocument,
      assertCookieNotCalled,
    } = getDocument();
    const { assertCalled: assertCalledXMLHttpRequest } = mockXMLHttpRequest();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;
    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, defaultApiData, null, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const container = mockedDocument.querySelector(`.${defaultNamespace}`);

    expect(container).toBe(null);
    assertCalledXMLHttpRequest();
    assertCookieNotCalled();
  });

  describe('should throw error if action buttons are not present', () => {
    it('accept button', () => {
      const { mockedDocument } = getDocument();

      mockedDocument.body.innerHTML = `
    <div class="${defaultNamespace}">
      <div class="cookies-banner-top-content"></div>
      <a class="${defaultNamespace}__action--key-customize">Personalizar</a>
    </div>
    `;

      const execute = require('./cookie-consent-banner');
      expect(() => execute(mockedDocument, defaultPreferences, defaultApiData, defaultCookieDataList, defaultConsentType, defaultTypeOptions)).toThrowError(`No element with class ${defaultNamespace}__action--key-accept is present`);
    });

    it('customize button', () => {
      const { mockedDocument } = getDocument();

      mockedDocument.body.innerHTML = `
    <div class="${defaultNamespace}">
      <div class="cookies-banner-top-content"></div>
      <a class="${defaultNamespace}__action--key-accept">Aceptar</a>
    </div>
    `;

      const execute = require('./cookie-consent-banner');
      expect(() => execute(mockedDocument, defaultPreferences, defaultApiData, defaultCookieDataList, defaultConsentType, defaultTypeOptions)).toThrowError(`No element with class ${defaultNamespace}__action--key-customize is present`);
    });

    it('both buttons', () => {
      const { mockedDocument } = getDocument();

      mockedDocument.body.innerHTML = `
    <div class="${defaultNamespace}">
      <div class="cookies-banner-top-content"></div>
    </div>
    `;

      const execute = require('./cookie-consent-banner');
      expect(() => execute(mockedDocument, defaultPreferences, defaultApiData, defaultCookieDataList, defaultConsentType, defaultTypeOptions)).toThrowError(`No element with class ${defaultNamespace}__action--key-accept is present`);
    });
  });

  it('should throw error if there are more than one accept button', () => {
    const { mockedDocument } = getDocument();

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
  </div>
  <div class="${defaultNamespace}__action--key-accept">
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
`;

    const execute = require('./cookie-consent-banner');
    expect(() => execute(mockedDocument, defaultPreferences, defaultApiData, defaultCookieDataList, defaultConsentType, defaultTypeOptions)).toThrowError(`More than one element with class ${defaultNamespace}__action--key-accept is present`);
  });

  it('should send melidata track when accepting all cookies', () => {
    const {
      mockedDocument,
    } = getDocument();

    const melidataSpy = jest.fn();
    global.window.melidata = melidataSpy;

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;

    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    expect(melidataSpy).toBeCalledTimes(2);
    expect(melidataSpy).toHaveBeenNthCalledWith(2, 'cleanAndSend', 'event', { event_data: { consent_type: defaultConsentType }, path: '/navigation/cookies_consent/accept_all' });
  });

  it('should send melidata track and close when clicking on close button inner element', () => {
    const {
      mockedDocument,
    } = getDocument();

    const melidataSpy = jest.fn();
    global.window.melidata = melidataSpy;

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__close">
    <div class="${defaultNamespace}__close-inner-element">
      Cerrar
    </div>
  </div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;

    const execute = require('./cookie-consent-banner');
    const typeOptions = {
      ...defaultTypeOptions,
      closeElements: [{
        className: `${defaultNamespace}__close-inner-element`,
        handleChildren: true,
      }],
    };
    execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, typeOptions);

    const closeButton = mockedDocument.querySelector(`.${defaultNamespace}__close-inner-element`);
    closeButton.click();

    expect(melidataSpy).toBeCalledTimes(2);
    expect(melidataSpy).toHaveBeenNthCalledWith(2, 'cleanAndSend', 'event', { event_data: { consent_type: defaultConsentType }, path: '/navigation/cookies_consent/close' });

    [
      defaultNamespace,
      'cookie-consent-snackbar',
    ].forEach((className) => expect(mockedDocument.querySelector(`.${className}`)).toBe(null));
  });

  it('should not close when clicking on close button inner element if handleChildren is false', () => {
    const {
      mockedDocument,
    } = getDocument();

    const melidataSpy = jest.fn();
    global.window.melidata = melidataSpy;

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__close">
    <div class="${defaultNamespace}__close-inner-element">
      Cerrar
    </div>
  </div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;

    const execute = require('./cookie-consent-banner');
    const typeOptions = {
      ...defaultTypeOptions,
      closeElements: [{
        className: `${defaultNamespace}__close`,
        handleChildren: false,
      }],
    };
    execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, typeOptions);

    const closeButton = mockedDocument.querySelector(`.${defaultNamespace}__close-inner-element`);
    closeButton.click();

    expect(melidataSpy).toBeCalledTimes(1);

    [
      defaultNamespace,
      'cookie-consent-snackbar',
    ].forEach((className) => expect(mockedDocument.querySelector(`.${className}`)).not.toBe(null));
  });

  it('should call onCookieConsentBannerClosed when accepting all cookies', () => {
    jest.useFakeTimers();

    const {
      mockedDocument,
    } = getDocument();

    const melidataSpy = jest.fn();
    global.window.melidata = melidataSpy;

    const onCookieConsentBannerClosed = jest.fn();
    global.window.onCookieConsentBannerClosed = onCookieConsentBannerClosed;

    mockedDocument.body.innerHTML = `
<div class="${defaultNamespace}">
  <div class="cookies-banner-top-content"></div>
  <div class="${defaultNamespace}__action--key-accept">
    Aceptar
  </div>
  <a class="${defaultNamespace}__action--key-customize">
    Personalizar
  </a>
</div>
${feedbackHTML}
`;

    const execute = require('./cookie-consent-banner');
    execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions);

    const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
    acceptButton.click();

    const closeSnackBarButton = mockedDocument.querySelector('.cookie-consent-snackbar__close');
    closeSnackBarButton.click();

    jest.runAllTimers();

    expect(onCookieConsentBannerClosed).toHaveBeenCalledWith();
  });

  describe('when iframe modal', () => {
    const namespace = 'cookie-consent-banner-opt-out';
    const modalConfig = getModalConfig(namespace);
    const htmlWithModal = `
      <div class="${namespace}">
        <div class="${namespace}__message-container"></div>
        <div class="${namespace}__action--key-accept">
          Entendido
        </div>
        <button class="${namespace}__action--key-customize">
          Configurar cookies
        </button>
      </div>
      <div
        id="${modalConfig.id}"
        class="${modalConfig.className}"
        aria-label="Preferencias de cookies"
        aria-hidden="true"
      >
        <div class="${modalConfig.overlayClassName}" data-a11y-dialog-hide="${modalConfig.id}"></div>
        <div class="${modalConfig.wrapperClassName}"></div>
      </div>
      ${feedbackHTML}
    `;

    it('should click in customize button and open modal', () => {
      jest.useFakeTimers();

      const {
        mockedDocument,
      } = getDocument();

      const melidataSpy = jest.fn();
      global.window.melidata = melidataSpy;

      mockedDocument.body.innerHTML = htmlWithModal;

      const modalParams = {
        id: modalConfig.id,
        wrapperClassName: modalConfig.wrapperClassName,
        openButton: `${namespace}__action--key-customize`,
        iframeUrl: 'https://mercadolibre.com.ar/privacy-preferences/cookies',
        saveText: 'guardar',
        i18n: {
          close: 'Cerrar',
        },
      };

      const execute = require('./cookie-consent-banner');
      execute(
        mockedDocument,
        defaultPreferences,
        null,
        null,
        defaultConsentType,
        defaultTypeOptions,
        namespace,
        modalParams,
      );

      const customizeButton = mockedDocument.querySelector(`.${namespace}__action--key-customize`);
      customizeButton.click();

      const bannerWrapper = mockedDocument.querySelector(`.${namespace}`);
      expect(bannerWrapper).toBeNull();

      const modal = mockedDocument.getElementById(modalConfig.id);

      const iframe = modal.querySelector('iframe');
      expect(iframe.src).toBe(`${modalParams.iframeUrl}?mode=embed`);

      const closeButton = modal.querySelector(`button[data-a11y-dialog-hide="${modalConfig.id}"][aria-label="${modalParams.i18n.close}"`);
      expect(closeButton).not.toBeNull();

      const saveButton = modal.querySelector(`.${namespace}__action--key-save`);
      expect(saveButton.textContent.trim()).toBe(modalParams.saveText);

      jest.runAllTimers();
    });

    it('should show success snackbar when receive event with status success', () => {
      jest.useFakeTimers();

      const {
        mockedDocument,
      } = getDocument();

      const melidataSpy = jest.fn();
      global.window.melidata = melidataSpy;

      window.addEventListener = jest.fn((_, callback) => {
        callback({
          data: {
            eventName: embedModeEvents.SAVE_COOKIES_PREFERENCES,
            status: embedModeStatus.SUCCESS,
            payload: {
              path: '/privacy_preferences/cookies/save',
              event_data: {
                advertising: true,
              },
            },
          },
        });

        const modal = mockedDocument.getElementById(modalConfig.id);
        expect(modal).toBeNull();

        const snackBar = mockedDocument.querySelector('.cookie-consent-snackbar');
        expect(snackBar.textContent).toMatch(/¡Listo! Guardamos tus preferencias en los navegadores donde inicies sesión./);
      });

      mockedDocument.body.innerHTML = htmlWithModal;

      const modalParams = {
        id: modalConfig.id,
        wrapperClassName: modalConfig.wrapperClassName,
        openButton: `${namespace}__action--key-customize`,
        iframeUrl: 'https://mercadolibre.com.ar/privacy-preferences/cookies',
        saveText: 'guardar',
      };

      const execute = require('./cookie-consent-banner');
      execute(
        mockedDocument,
        defaultPreferences,
        null,
        null,
        defaultConsentType,
        defaultTypeOptions,
        namespace,
        modalParams,
      );

      const customizeButton = mockedDocument.querySelector(`.${namespace}__action--key-customize`);
      customizeButton.click();
    });

    it('should show failure snackbar when receive event with status failure', () => {
      jest.useFakeTimers();

      const {
        mockedDocument,
      } = getDocument();

      const melidataSpy = jest.fn();
      global.window.melidata = melidataSpy;

      window.addEventListener = jest.fn((_, callback) => {
        callback({
          data: {
            eventName: embedModeEvents.SAVE_COOKIES_PREFERENCES,
            status: embedModeStatus.FAILURE,
          },
        });

        const modal = mockedDocument.getElementById(modalConfig.id);
        expect(modal).toBeNull();

        const snackBar = mockedDocument.querySelector('.cookie-consent-snackbar');
        expect(snackBar.textContent).toMatch(/Algo salió mal. Por favor, vuelve a intentarlo./);
      });

      mockedDocument.body.innerHTML = htmlWithModal;

      const modalParams = {
        id: modalConfig.id,
        wrapperClassName: modalConfig.wrapperClassName,
        openButton: `${namespace}__action--key-customize`,
        iframeUrl: 'https://mercadolibre.com.ar/privacy-preferences/cookies',
        saveText: 'guardar',
      };

      const execute = require('./cookie-consent-banner');
      execute(
        mockedDocument,
        defaultPreferences,
        null,
        null,
        defaultConsentType,
        defaultTypeOptions,
        namespace,
        modalParams,
      );

      const customizeButton = mockedDocument.querySelector(`.${namespace}__action--key-customize`);
      customizeButton.click();
    });
  });

  describe('when snackbar feedback is disabled', () => {
    const snackbarConfig = {
      successSnackbar: {
        canShow: false,
      },
      errorSnackbar: {
        canShow: false,
      },
    };

    it('should call onCookieConsentBannerClosed when accepting all cookies', () => {
      const { mockedDocument } = getDocument();

      const onCookieConsentBannerClosed = jest.fn();
      global.window.onCookieConsentBannerClosed = onCookieConsentBannerClosed;

      mockedDocument.body.innerHTML = `
        <div class="${defaultNamespace}">
          <div class="cookies-banner-top-content"></div>
          <div class="${defaultNamespace}__action--key-accept">
            Aceptar
          </div>
          <a class="${defaultNamespace}__action--key-customize">
            Personalizar
          </a>
        </div>
        ${feedbackHTML}
      `;

      const execute = require('./cookie-consent-banner');
      execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions, defaultNamespace, null, snackbarConfig);

      const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
      acceptButton.click();

      expect(onCookieConsentBannerClosed).toHaveBeenCalledWith();
    });

    it('should send melidata track when accepting all cookies', () => {
      const { mockedDocument } = getDocument();

      const melidataSpy = jest.fn();
      global.window.melidata = melidataSpy;

      mockedDocument.body.innerHTML = `
        <div class="${defaultNamespace}">
          <div class="cookies-banner-top-content"></div>
          <div class="${defaultNamespace}__action--key-accept">
            Aceptar
          </div>
          <a class="${defaultNamespace}__action--key-customize">
            Personalizar
          </a>
        </div>
        ${feedbackHTML}
      `;

      const execute = require('./cookie-consent-banner');
      execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions, defaultNamespace, null, snackbarConfig);

      const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
      acceptButton.click();

      expect(melidataSpy).toBeCalledTimes(2);
      expect(melidataSpy).toHaveBeenNthCalledWith(2, 'cleanAndSend', 'event', { event_data: { consent_type: defaultConsentType }, path: '/navigation/cookies_consent/accept_all' });
    });

    it('should NOT show feedback snackbar when success on accepting all cookies', () => {
      const { mockedDocument } = getDocument();

      mockedDocument.body.innerHTML = `
        <div class="${defaultNamespace}">
          <div class="cookies-banner-top-content"></div>
          <div class="${defaultNamespace}__action--key-accept">
            Aceptar
          </div>
          <a class="${defaultNamespace}__action--key-customize">
            Personalizar
          </a>
        </div>
        ${feedbackHTML}
      `;

      const execute = require('./cookie-consent-banner');
      execute(mockedDocument, defaultPreferences, null, null, defaultConsentType, defaultTypeOptions, defaultNamespace, null, snackbarConfig);

      const acceptButton = mockedDocument.querySelector(`.${defaultNamespace}__action--key-accept`);
      acceptButton.click();

      const snackBar = mockedDocument.querySelector('.cookie-consent-snackbar');
      expect(snackBar).toBeNull();
    });

    describe('when iframe modal', () => {
      const bannerOptOutNamespace = 'cookie-consent-banner-opt-out';
      const modalConfig = getModalConfig(bannerOptOutNamespace);
      const htmlWithModal = `
        <div class="${bannerOptOutNamespace}">
          <div class="${bannerOptOutNamespace}__message-container"></div>
          <div class="${bannerOptOutNamespace}__action--key-accept">
            Entendido
          </div>
          <button class="${bannerOptOutNamespace}__action--key-customize">
            Configurar cookies
          </button>
        </div>
        <div
          id="${modalConfig.id}"
          class="${modalConfig.className}"
          aria-label="Preferencias de cookies"
          aria-hidden="true"
        >
          <div class="${modalConfig.overlayClassName}" data-a11y-dialog-hide="${modalConfig.id}"></div>
          <div class="${modalConfig.wrapperClassName}"></div>
        </div>
        ${feedbackHTML}
      `;

      it('should NOT show feedback snackbar when receive event with status success from iframe modal', () => {
        jest.useFakeTimers();

        const { mockedDocument } = getDocument();

        window.addEventListener = jest.fn((_, callback) => {
          callback({
            data: {
              eventName: embedModeEvents.SAVE_COOKIES_PREFERENCES,
              status: embedModeStatus.SUCCESS,
              payload: {
                path: '/privacy_preferences/cookies/save',
                event_data: {
                  advertising: true,
                },
              },
            },
          });

          const modal = mockedDocument.getElementById(modalConfig.id);
          expect(modal).toBeNull();

          const snackBar = mockedDocument.querySelector('.cookie-consent-snackbar');
          expect(snackBar).toBeNull();
        });

        mockedDocument.body.innerHTML = htmlWithModal;

        const modalParams = {
          id: modalConfig.id,
          wrapperClassName: modalConfig.wrapperClassName,
          openButton: `${bannerOptOutNamespace}__action--key-customize`,
          iframeUrl: 'https://mercadolibre.com.ar/privacy-preferences/cookies',
          saveText: 'guardar',
        };

        const execute = require('./cookie-consent-banner');
        execute(
          mockedDocument,
          defaultPreferences,
          null,
          null,
          defaultConsentType,
          defaultTypeOptions,
          bannerOptOutNamespace,
          modalParams,
          snackbarConfig,
        );

        const customizeButton = mockedDocument.querySelector(`.${bannerOptOutNamespace}__action--key-customize`);
        customizeButton.click();
      });

      it('should NOT show feedback snackbar when receive event with status failure from iframe modal', () => {
        jest.useFakeTimers();

        const { mockedDocument } = getDocument();

        window.addEventListener = jest.fn((_, callback) => {
          callback({
            data: {
              eventName: embedModeEvents.SAVE_COOKIES_PREFERENCES,
              status: embedModeStatus.FAILURE,
            },
          });

          const modal = mockedDocument.getElementById(modalConfig.id);
          expect(modal).toBeNull();

          const snackBar = mockedDocument.querySelector('.cookie-consent-snackbar');
          expect(snackBar).toBeNull();
        });

        mockedDocument.body.innerHTML = htmlWithModal;

        const modalParams = {
          id: modalConfig.id,
          wrapperClassName: modalConfig.wrapperClassName,
          openButton: `${bannerOptOutNamespace}__action--key-customize`,
          iframeUrl: 'https://mercadolibre.com.ar/privacy-preferences/cookies',
          saveText: 'guardar',
        };

        const execute = require('./cookie-consent-banner');
        execute(
          mockedDocument,
          defaultPreferences,
          null,
          null,
          defaultConsentType,
          defaultTypeOptions,
          bannerOptOutNamespace,
          modalParams,
          snackbarConfig,
        );

        const customizeButton = mockedDocument.querySelector(`.${bannerOptOutNamespace}__action--key-customize`);
        customizeButton.click();
      });
    });
  });
});
