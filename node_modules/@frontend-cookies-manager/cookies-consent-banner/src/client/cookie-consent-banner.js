/* global melidata:readonly */
const sendEvent = require('@frontend-cookies-manager/common/src/services/client/send-event');
const { bannerOptOutModalEvents } = require('../components/cookie-consent-banner-opt-out/events');

const execute = (
  doc,
  preferences,
  apiData,
  cookieDataList,
  consentType,
  typeOptions,
  namespace = 'cookie-consent-banner-opt-out',
  modalParams,
  snackbarConfig,
) => {
  const containerClassName = namespace;
  const successSnackbarClassName = 'cookie-consent-snackbar--success';
  const errorSnackbarClassName = 'cookie-consent-snackbar--error';
  const topContentContainerClassName = 'cookies-banner-top-content';

  const getOne = (className, element) => {
    const elements = (element || doc).getElementsByClassName(className);
    if (elements.length === 0) {
      throw new Error(`No element with class ${className} is present`);
    }
    if (elements.length !== 1) {
      throw new Error(`More than one element with class ${className} is present`);
    }
    return elements[0];
  };

  const removeElement = (element) => element.parentNode.removeChild(element);

  const getTopContainer = () => {
    try {
      return getOne(topContentContainerClassName, getOne(containerClassName));
    } catch (e) {
      return null;
    }
  };

  const handleOnCookieConsentBannerClosed = () => window.onCookieConsentBannerClosed
    && window.onCookieConsentBannerClosed();

  const hideMessage = (snackbar) => {
    snackbar.classList.add('cookie-consent-snackbar--collapsed');

    setTimeout(() => {
      removeElement(snackbar);
      handleOnCookieConsentBannerClosed();
    }, 400);
  };

  const removeFeedbackSnackbar = () => {
    const successSnackbar = getOne(successSnackbarClassName);
    const errorSnackbar = getOne(errorSnackbarClassName);

    removeElement(successSnackbar);
    removeElement(errorSnackbar);
  };

  const showMessage = ({ toShow, toHide, topContentContainer, hideTimeoutInMs }) => {
    const snackbarToRemove = getOne(toHide);
    removeElement(snackbarToRemove);

    const snackbarToShow = getOne(toShow);

    if (topContentContainer) {
      snackbarToShow.appendChild(topContentContainer);
    }

    // show snackback
    snackbarToShow.classList.remove('cookie-consent-snackbar--hidden');
    setTimeout(() => snackbarToShow.classList.remove('cookie-consent-snackbar--collapsed'));

    // set timeout to automatically close the snackbar
    let timeoutAutoCloseSnackbar = null;
    if (hideTimeoutInMs > 0) {
      timeoutAutoCloseSnackbar = setTimeout(() => {
        hideMessage(snackbarToShow);
      }, hideTimeoutInMs);
    }

    // attach close button handler
    const closeButton = getOne('cookie-consent-snackbar__close', snackbarToShow);
    closeButton.addEventListener('click', () => {
      clearTimeout(timeoutAutoCloseSnackbar);
      hideMessage(snackbarToShow);
    });
  };

  const showSuccessMessage = (topContentContainer) => {
    const { successSnackbar } = snackbarConfig || {};
    const { canShow, hideTimeoutInMs = 0 } = successSnackbar || {};

    if (canShow === false) {
      removeFeedbackSnackbar();
      handleOnCookieConsentBannerClosed();

      return;
    }

    showMessage({
      toShow: successSnackbarClassName,
      toHide: errorSnackbarClassName,
      topContentContainer,
      hideTimeoutInMs,
    });
  };

  const showErrorMessage = (topContentContainer) => {
    const { errorSnackbar } = snackbarConfig || {};
    const { canShow, hideTimeoutInMs = 0 } = errorSnackbar || {};

    if (canShow === false) {
      removeFeedbackSnackbar();
      handleOnCookieConsentBannerClosed();

      return;
    }

    showMessage({
      toShow: errorSnackbarClassName,
      toHide: successSnackbarClassName,
      topContentContainer,
      hideTimeoutInMs,
    });
  };

  const setupCookie = ({ cookieData, responsePreferences }) => {
    const cookieValue = {
      categories: {
        ...preferences,
        ...responsePreferences,
      },
    };

    if (cookieData.userId) {
      cookieValue.userId = cookieData.userId;
    }

    const {
      cookieName,
      maxAge,
      path,
      domain,
      secure,
      sameSite,
    } = cookieData;

    const cookieString = [
      `${cookieName}=${encodeURIComponent(JSON.stringify(cookieValue))}`,
      `domain=${domain}`,
      `path=${path}`,
    ]
      .concat(maxAge ? `max-age=${maxAge}` : [])
      .concat(sameSite ? `samesite=${sameSite}` : [])
      .concat(secure ? 'secure' : [])
      .join('; ');

    doc.cookie = cookieString;
  };

  const setupCookieList = ({ responsePreferences, topContainer }) => {
    try {
      if (cookieDataList && cookieDataList.length > 0) {
        cookieDataList.forEach(cookieData => cookieData && setupCookie({ cookieData, responsePreferences }));
      }
    } catch (e) {
      showErrorMessage(topContainer);
    }

    showSuccessMessage(topContainer);
  };

  const sendData = (topContainer) => {
    if (!apiData) {
      setupCookieList({ responsePreferences: null, topContainer });
      sendEvent(preferences);
      return;
    }

    try {
      const http = new window.XMLHttpRequest();
      http.open('PUT', apiData.url, true);
      http.setRequestHeader('Content-type', 'application/json;charset=UTF-8');
      http.withCredentials = true;

      http.onreadystatechange = function onreadystatechange() {
        if (http.readyState === 4) {
          if (http.status === 200) {
            let responsePreferences;
            try {
              responsePreferences = JSON.parse(http.responseText).cookies_preferences;
            } catch (e) {
              responsePreferences = null;
            }
            setupCookieList({ responsePreferences, topContainer });
            sendEvent({
              ...preferences,
              ...responsePreferences,
            });
          } else {
            showErrorMessage(topContainer);
          }
        }
      };

      http.send(JSON.stringify({
        ...apiData.payload,
        cookies_preferences: preferences,
      }));
    } catch (e) {
      showErrorMessage(topContainer);
    }
  };

  const acceptButton = getOne(`${containerClassName}__action--key-accept`);
  const customizeLink = getOne(`${containerClassName}__action--key-customize`);

  const sendMelidataTrack = (trackType, trackData) => {
    if (typeof melidata !== 'undefined') {
      melidata('cleanAndSend', trackType, trackData);
    }
  };

  acceptButton.addEventListener('click', () => {
    const topContainer = getTopContainer();
    try {
      sendData(topContainer);
      sendMelidataTrack('event', {
        path: '/navigation/cookies_consent/accept_all',
        event_data: {
          consent_type: consentType,
        },
      });
      removeElement(getOne(containerClassName));
    } catch (e) {
      showErrorMessage(topContainer);
    }
  });

  customizeLink.addEventListener('click', () => {
    sendMelidataTrack('event', {
      path: '/navigation/cookies_consent/personalize',
      event_data: {
        consent_type: consentType,
      },
    });
  });

  typeOptions.closeElements.forEach((closeElement) => {
    getOne(closeElement.className).addEventListener('click', (event) => {
      if (closeElement.handleChildren || event.currentTarget === event.target) {
        sendMelidataTrack('event', {
          path: '/navigation/cookies_consent/close',
          event_data: {
            consent_type: consentType,
          },
        });
        removeElement(getOne(containerClassName));
        removeElement(getOne(successSnackbarClassName));
        removeElement(getOne(errorSnackbarClassName));
      }
    });
  });

  bannerOptOutModalEvents({
    containerClassName,
    modalParams,
    namespace,
    getOne,
    getTopContainer,
    removeElement,
    sendMelidataTrack,
    showErrorMessage,
    showSuccessMessage,
  });

  sendMelidataTrack('event', {
    path: '/navigation/cookies_consent/show',
    event_data: {
      consent_type: consentType,
    },
  });
};

module.exports = execute;
