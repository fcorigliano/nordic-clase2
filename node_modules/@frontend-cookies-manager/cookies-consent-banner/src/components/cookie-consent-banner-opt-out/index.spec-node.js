/* eslint-disable max-len */
const React = require('react');
const renderer = require('react-test-renderer');

const namespace = 'cookie-consent-banner-opt-out';
const dataTestIds = {
  headerText: 'text:header-text',
  mainText: 'text:main-text',
  moreInfo: 'link:more-info',
  understoodButton: 'action:understood-button',
  understoodButtonLowEnd: 'action:understood-submit-button',
  customizeButton: 'action:customize-button',
  customizeLinkLowEnd: 'action:customize-link',
  modal: 'component:modal',
  modalOverflow: 'component:modal-overflow',
};

const findAllByTestId = (testInstance, testId) => testInstance.findAllByProps({ 'data-testid': testId });
const findAllByClassName = (testInstance, className) => testInstance.findAllByProps({ className });

const mockProps = (config = {}, override = {}) => ({
  show: true,
  ...config.show === false && {
    show: false,
  },
  i18n: {
    success: '¡Listo! Guardamos tus preferencias en los navegadores donde inicies sesión.',
    error: 'Algo salió mal. Por favor, vuelve a intentarlo.',
    close: 'Cerrar',
    ...config.i18n,
    bannerOptOut: {
      header: 'Este sitio usa cookies',
      main: 'Al navegar en nuestro sitio aceptas que usemos cookies para {0}personalizar tu experiencia{1} según la Declaración de Privacidad.',
      understood: 'Entendido',
      customize: 'Configurar cookies',
      ...(config.i18n ? config.i18n.bannerOptOut || {} : {}),
    },
  },
  ...config.i18n === null && {
    i18n: null,
  },
  ...config.i18n && !Object.keys(config.i18n).length && {
    i18n: {},
  },
  href: {
    apiLowEnd: 'https://www.mercadolibre.com.ar/privacy-preferences/api/cookies-preferences/low-end/external',
    moreInfo: 'https://www.mercadolibre.com.ar/privacidad#tech-and-cookies',
    customize: 'https://www.mercadolibre.com.ar/privacy-preferences',
    ...config.href,
  },
  ...config.href === null && {
    href: null,
  },
  cssContent: 'some-css-content',
  apiData: {
    value: 'some-api-data',
  },
  cookieDataList: [{
    value: 'some-cookie-data',
  }],
  preferences: {
    value: 'some-preferences',
  },
  isLiteVersion: false,
  snackbarConfig: {
    successSnackbar: {},
    errorSnackbar: {},
  },
  ...override,
});

describe('Cookie Consent Banner Opt Out', () => {
  beforeEach(() => jest.resetModules());

  it('should match default snapshot', () => {
    const componentProps = mockProps();

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalContainer = testInstance.findAllByProps({ className: namespace }).length;
    expect(totalContainer).toBe(1);

    const totalHeader = findAllByTestId(testInstance, dataTestIds.headerText).length;
    expect(totalHeader).toBe(1);

    const mainText = findAllByTestId(testInstance, dataTestIds.mainText);
    expect(mainText.length).toBe(1);

    const mainTextProps = mainText[0].props;
    expect(JSON.stringify(mainTextProps)).toContain(dataTestIds.moreInfo);

    const totalUnderstoodButton = findAllByTestId(testInstance, dataTestIds.understoodButton).length;
    expect(totalUnderstoodButton).toBe(1);

    const totalCustomizeButton = findAllByTestId(testInstance, dataTestIds.customizeButton).length;
    expect(totalCustomizeButton).toBe(1);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should match low-end snapshot', () => {
    const componentProps = mockProps({}, { isLiteVersion: true });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalContainer = testInstance.findAllByProps({ className: namespace }).length;
    expect(totalContainer).toBe(1);

    const totalHeader = findAllByTestId(testInstance, dataTestIds.headerText).length;
    expect(totalHeader).toBe(1);

    const mainText = findAllByTestId(testInstance, dataTestIds.mainText);
    expect(mainText.length).toBe(1);

    const mainTextProps = mainText[0].props;
    expect(JSON.stringify(mainTextProps)).toContain(dataTestIds.moreInfo);

    const totalUnderstoodButtonLowEnd = findAllByTestId(testInstance, dataTestIds.understoodButtonLowEnd).length;
    expect(totalUnderstoodButtonLowEnd).toBe(1);

    const totalCustomizeLinkLowEnd = findAllByTestId(testInstance, dataTestIds.customizeLinkLowEnd).length;
    expect(totalCustomizeLinkLowEnd).toBe(1);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should render null if show prop is false', () => {
    const componentProps = mockProps({
      show: false,
    });

    const CookieConsentBannerOptOut = require('./index');

    const tree = renderer
      .create(<CookieConsentBannerOptOut {...componentProps} />)
      .toJSON();

    expect(tree).toMatchSnapshot();
  });

  it('should render null if there is an empty i18n configuration', () => {
    const componentProps = mockProps({
      i18n: {},
    });

    const CookieConsentBannerOptOut = require('./index');

    const tree = renderer
      .create(<CookieConsentBannerOptOut {...componentProps} />)
      .toJSON();

    expect(tree).toMatchSnapshot();
  });

  it('should skip header rendering', () => {
    const componentProps = mockProps({
      i18n: {
        bannerOptOut: {
          header: null,
        },
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalHeader = findAllByTestId(testInstance, dataTestIds.headerText).length;
    expect(totalHeader).toBe(0);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should skip main message rendering', () => {
    const componentProps = mockProps({
      i18n: {
        bannerOptOut: {
          main: null,
        },
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalMainText = findAllByTestId(testInstance, dataTestIds.mainText).length;
    expect(totalMainText).toBe(0);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should skip more info message rendering if there is no href configuration for it', () => {
    const componentProps = mockProps({
      href: {
        moreInfo: null,
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const mainText = findAllByTestId(testInstance, dataTestIds.mainText);
    expect(mainText.length).toBe(1);

    const mainTextProps = mainText[0].props;
    expect(JSON.stringify(mainTextProps)).not.toContain(dataTestIds.moreInfo);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should skip understood button rendering if there is no i18n configuration for it', () => {
    const componentProps = mockProps({
      i18n: {
        bannerOptOut: {
          understood: null,
        },
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalUnderstoodButton = findAllByTestId(testInstance, dataTestIds.understoodButton).length;
    expect(totalUnderstoodButton).toBe(0);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should skip customize button rendering if there is no i18n configuration for it', () => {
    const componentProps = mockProps({
      i18n: {
        bannerOptOut: {
          customize: null,
        },
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalCustomizeButton = findAllByTestId(testInstance, dataTestIds.customizeButton).length;
    expect(totalCustomizeButton).toBe(0);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should skip customize button rendering if there is no href configuration for it', () => {
    const componentProps = mockProps({
      href: {
        customize: null,
      },
    });

    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const totalCustomizeButton = findAllByTestId(testInstance, dataTestIds.customizeButton).length;
    expect(totalCustomizeButton).toBe(0);

    expect(testRenderer.toJSON()).toMatchSnapshot();
  });

  it('should have modal wrapper in component', () => {
    const componentProps = mockProps();
    const CookieConsentBannerOptOut = require('./index');

    const testRenderer = renderer.create(<CookieConsentBannerOptOut {...componentProps} />);
    const testInstance = testRenderer.root;

    const modalComponent = findAllByClassName(testInstance, `${namespace}__modal`);
    expect(modalComponent.length).toBe(1);
  });
});
