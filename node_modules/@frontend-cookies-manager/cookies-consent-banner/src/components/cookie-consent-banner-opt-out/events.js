const { embedModeEvents, embedModeStatus } = require('../../utils/modal');
const { disableBodyScroll, enableBodyScroll } = require('../../external-libs/body-scroll-lock.min');
const A11yDialog = require('../../external-libs/a11y-dialog.min');

const bannerOptOutNamespace = 'cookie-consent-banner-opt-out';

const bannerOptOutModalEvents = ({
  containerClassName,
  modalParams,
  namespace,
  getOne,
  getTopContainer,
  removeElement,
  sendMelidataTrack,
  showErrorMessage,
  showSuccessMessage,
}) => {
  if (namespace !== bannerOptOutNamespace || !modalParams) {
    return;
  }

  let shouldTrackCloseEvent = true;
  const dialogContainer = document.getElementById(modalParams.id);
  const dialog = new A11yDialog(dialogContainer);

  const sendEventToIframe = () => {
    const iframe = getOne(`${namespace}__modal-iframe`);

    iframe.contentWindow.postMessage({
      eventName: embedModeEvents.SAVE_COOKIES_PREFERENCES,
    }, '*');
  };

  const waitModalElementRender = ({ className, event, eventCallback, modalWrapper }) => {
    const observer = new MutationObserver(() => {
      const element = document.querySelector(className);
      if (modalWrapper.contains(element)) {
        element.addEventListener(event, eventCallback);
        observer.disconnect();
      }
    });

    observer.observe(document, { attributes: false, childList: true, characterData: false, subtree: true });
  };

  const onShowModal = () => {
    disableBodyScroll(document.documentElement);

    window.addEventListener('message', (e) => {
      const { eventName, status, payload } = (e && e.data) || {};

      if (eventName !== embedModeEvents.SAVE_COOKIES_PREFERENCES) {
        return;
      }

      const topContainer = getTopContainer();

      if (status === embedModeStatus.SUCCESS) {
        if (payload) {
          sendMelidataTrack('event', payload);
        }

        showSuccessMessage(topContainer);
      } else {
        showErrorMessage(topContainer);
      }

      shouldTrackCloseEvent = false;
      dialog.hide();
    });
  };

  const onHideModal = () => {
    dialog.destroy();

    if (!shouldTrackCloseEvent) return;


    sendMelidataTrack('event', {
      path: '/privacy_preferences/cookies/close',
    });
  };

  const onDestroyModal = () => {
    enableBodyScroll(document.documentElement);
    removeElement(dialogContainer);
  };

  dialog.on('show', onShowModal);
  dialog.on('hide', onHideModal);
  dialog.on('destroy', onDestroyModal);

  getOne(modalParams.openButton).addEventListener('click', () => {
    const i18n = modalParams.i18n || {};
    const closeButtonAriaLabel = i18n.close ? `aria-label="${i18n.close}"` : '';

    const html = `
      <button
        type="button"
        data-a11y-dialog-hide="${modalParams.id}"
        class="${namespace}__modal-closeButton"
        ${closeButtonAriaLabel}
      >
        <svg width="20" height="20" viewBox="0 0 20 20" fill="white">
          <path
            fill="white"
            d="M4.35156 5.19496L9.15406 9.99746L4.35156 14.8L5.20009 15.6485L10.0026 10.846L14.7963 15.6397L15.6449 
            14.7912L10.8511 9.99746L15.6449 5.20371L14.7963 4.35518L10.0026 9.14894L5.20009 4.34644L4.35156 5.19496Z"
          ></path>
        </svg>
      </button>
      <div class="${namespace}__modal-content">
        <iframe
          title="Cookies Preferences"
          class="${namespace}__modal-iframe"
          src="${modalParams.iframeUrl}?mode=embed"
        ></iframe>
      </div>
      <div class="${namespace}__modal-action">
        <button
          type="button"
          class="${namespace}__action
          ${namespace}__action--primary
          ${namespace}__action--key-save"
        >
          ${modalParams.saveText}
        </button>
      </div>
    `;

    const modalWrapper = getOne(modalParams.wrapperClassName);
    modalWrapper.innerHTML = html;

    waitModalElementRender({
      modalWrapper,
      className: `.${namespace}__action--key-save`,
      event: 'click',
      eventCallback: sendEventToIframe,
    });

    waitModalElementRender({
      modalWrapper,
      className: `.${namespace}__modal-closeButton`,
      event: 'click',
      eventCallback: () => dialog.hide(),
    });

    removeElement(getOne(containerClassName));

    dialog.show();
  });
};

module.exports = {
  bannerOptOutModalEvents,
};
