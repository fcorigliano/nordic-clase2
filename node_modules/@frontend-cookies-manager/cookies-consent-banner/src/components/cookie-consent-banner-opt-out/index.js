/* eslint-disable max-len */
const React = require('react');
const PropTypes = require('prop-types');
const classnames = require('classnames');
const { readFileSync } = require('fs');
const { join } = require('path');
const { TEST, APPLICATION } = require('frontend-env');
const { applicationName } = require('@frontend-cookies-manager/common/src/constants/repository');
const { getModalConfig } = require('../../utils/modal');
const Style = require('../style');
const Script = require('../script');
const Feedback = require('../feedback');

// test runs on this file instead of built one (lib folder)
const basePath = TEST && APPLICATION === applicationName ? join(__dirname, '../../..') : join(__dirname, '..');

const clientCodePath = join(basePath, 'build/client/cookie-consent-banner.js');
const clientCodeFile = readFileSync(clientCodePath).toString();

const namespace = 'cookie-consent-banner-opt-out';
const consentType = 'bottomOptOut';

const typeOptions = {
  closeElements: [],
};

const renderUnderstoodAction = ({ understoodText, isLiteVersion, href }) => {
  if (!understoodText) return null;

  if (isLiteVersion && href.apiLowEnd) {
    return (
      <form
        method="post"
        action={href.apiLowEnd}
        className={`${namespace}__form`}
      >
        <button
          type="submit"
          data-testid="action:understood-submit-button"
          className={classnames(
            `${namespace}__action`,
            `${namespace}__action--primary`,
            `${namespace}__action--key-accept`,
          )}
        >
          {understoodText}
        </button>
      </form>
    );
  }

  return (
    <button
      type="button"
      data-testid="action:understood-button"
      className={classnames(
        `${namespace}__action`,
        `${namespace}__action--primary`,
        `${namespace}__action--key-accept`,
      )}
    >
      {understoodText}
    </button>
  );
};

const renderCustomizeAction = ({ hasCustomize, customizeText, isLiteVersion, href }) => {
  if (!hasCustomize || !customizeText) return null;

  if (isLiteVersion && href.customize) {
    return (
      <a
        href={href.customize}
        rel="noopener noreferrer nofollow"
        data-testid="action:customize-link"
        className={classnames(
          `${namespace}__action`,
          `${namespace}__action--key-customize`,
        )}
      >
        {customizeText}
      </a>
    );
  }

  return (
    <button
      type="button"
      data-testid="action:customize-button"
      className={classnames(
        `${namespace}__action`,
        `${namespace}__action--key-customize`,
      )}
    >
      {customizeText}
    </button>
  );
};

const CookieConsentBannerOptOut = ({
  show,
  i18n,
  href,
  apiData,
  cookieDataList,
  preferences,
  cssContent,
  isLiteVersion,
  snackbarConfig,
}) => {
  if (!show) {
    return null;
  }

  const {
    header: headerText,
    main: mainText,
    customize: customizeText,
    understood: understoodText,
    save: saveText,
    modal: i18nModal = {},
  } = i18n.bannerOptOut || {};

  const modalConfig = getModalConfig(namespace);

  const modalParams = {
    id: modalConfig.id,
    wrapperClassName: modalConfig.wrapperClassName,
    openButton: `${namespace}__action--key-customize`,
    iframeUrl: href.customize,
    saveText,
    i18n: i18nModal,
  };

  const hasMessage = headerText || mainText;
  const hasCustomize = href.customize && customizeText;
  const hasActions = understoodText || hasCustomize;

  if (!hasMessage && !hasActions) {
    return null;
  }

  const parameters = [
    preferences,
    apiData,
    cookieDataList,
    consentType,
    typeOptions,
    namespace,
    modalParams,
    snackbarConfig,
  ].map(parameter => JSON.stringify(parameter))
    .join(',');
  const clientCode = `(function(){${clientCodeFile}\nccb(document,${parameters});})()`;

  let mainTextReplaced = mainText;

  if (mainTextReplaced && href.moreInfo) {
    const i18nReplacements = {
      '{0}': `<a rel="noopener noreferrer nofollow" target="_blank" data-testid="link:more-info" href="${href.moreInfo}" class="${namespace}__more-info">`,
      '{1}': '</a>',
    };

    mainTextReplaced = Object.entries(i18nReplacements).reduce(
      (acc, replacement) => acc.replace(replacement[0], replacement[1]),
      mainTextReplaced,
    );
  }

  return (
    <>
      <div
        role="region"
        className={namespace}
      >
        {hasMessage && (
          <div className={`${namespace}__message-container`}>
            {headerText && (
              <h2
                data-testid="text:header-text"
                className={`${namespace}__header`}
              >
                {headerText}
              </h2>
            )}

            {mainTextReplaced && (
              <p
                data-testid="text:main-text"
                className={`${namespace}__message`}
                // eslint-disable-next-line react/no-danger
                dangerouslySetInnerHTML={{ __html: mainTextReplaced }}
              />
            )}
          </div>
        )}

        {hasActions && (
          <div className={`${namespace}__actions`}>
            {renderUnderstoodAction({ understoodText, isLiteVersion, href })}
            {renderCustomizeAction({ hasCustomize, customizeText, isLiteVersion, href })}
          </div>
        )}
      </div>

      <div
        id={modalConfig.id}
        className={modalConfig.className}
        aria-label={i18nModal.title}
        aria-hidden="true"
      >
        <div className={modalConfig.overlayClassName} data-a11y-dialog-hide={modalConfig.id} />
        <div className={modalConfig.wrapperClassName} />
      </div>

      <Feedback
        i18n={{
          success: i18n.success,
          error: i18n.error,
          close: i18n.close,
        }}
      />

      <Style renderChildrenInPlace={false}>
        {cssContent}
      </Style>
      <Script>{clientCode}</Script>
    </>
  );
};

CookieConsentBannerOptOut.propTypes = {
  show: PropTypes.bool.isRequired,
  i18n: PropTypes.shape({
    bannerOptOut: PropTypes.shape({
      header: PropTypes.string,
      main: PropTypes.string,
      understood: PropTypes.string,
      customize: PropTypes.string,
      save: PropTypes.string,
      modal: PropTypes.shape({
        title: PropTypes.string,
        close: PropTypes.string,
      }),
    }),
    success: PropTypes.string,
    error: PropTypes.string,
    close: PropTypes.string,
  }).isRequired,
  href: PropTypes.shape({
    apiLowEnd: PropTypes.string,
    moreInfo: PropTypes.string,
    customize: PropTypes.string,
  }).isRequired,
  // eslint-disable-next-line react/forbid-prop-types
  apiData: PropTypes.object,
  cookieDataList: PropTypes.arrayOf(PropTypes.object),
  // eslint-disable-next-line react/forbid-prop-types
  preferences: PropTypes.object.isRequired,
  cssContent: PropTypes.string.isRequired,
  isLiteVersion: PropTypes.bool,
  snackbarConfig: PropTypes.shape({
    successSnackbar: PropTypes.shape({
      canShow: PropTypes.bool,
      hideTimeoutInMs: PropTypes.number,
    }).isRequired,
    errorSnackbar: PropTypes.shape({
      canShow: PropTypes.bool,
      hideTimeoutInMs: PropTypes.number,
    }).isRequired,
  }).isRequired,
};

CookieConsentBannerOptOut.defaultProps = {
  apiData: null,
  cookieDataList: [],
  isLiteVersion: false,
};

module.exports = CookieConsentBannerOptOut;
