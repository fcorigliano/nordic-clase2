const React = require('react');
const PropTypes = require('prop-types');
const Script = require('../script');
const Style = require('../style');

// TODO - tracking
const CookieDisclaimer = ({
  bannerText,
  dismissButtonText,
  moreInfo,
  cookieCreationInfo,
  show,
  cssContent,
}) => {
  if (!show) {
    return null;
  }

  return (
    <div
      role="region"
      id="newCookieDisclaimerBanner"
      className="nav-new-cookie-disclaimer"
    >
      <div className="cookies-banner-top-content" />
      <Script>
        { /* eslint-disable max-len */ }
        {`
          var cookieButton = document.getElementById("newCookieDisclaimerButton");
          if (!cookieButton) {
            return;
          }
          var isMelidataAvailable = typeof melidata !== 'undefined';
          cookieButton.addEventListener("click", function() {
            var expiration_date = 365;
            var now = new Date();
            now.setDate(now.getDate() + expiration_date);
            document.cookie = '${cookieCreationInfo.name}=1; expires=' + now.toUTCString() + '; path=/; domain=${cookieCreationInfo.domain}${cookieCreationInfo.sameSite}';
            var cookieBanner = document.getElementById("newCookieDisclaimerBanner");
            if (cookieBanner) {
              cookieBanner.parentNode.removeChild(cookieBanner);
            }
            isMelidataAvailable && melidata('cleanAndSend', 'event', { path: '/navigation/cookies_consent/ack' });
            if (window.onCookieConsentBannerClosed) {
              window.onCookieConsentBannerClosed();
            }
          });
          isMelidataAvailable && melidata('cleanAndSend', 'event', {
            path: '/navigation/cookies_consent/show',
            data: {
              consent_type: 'disclaimer'
            }
          });
          var oldCookieBanner = document.getElementById("cookieDisclaimerBanner");
          if (oldCookieBanner) {
            oldCookieBanner.parentNode.removeChild(oldCookieBanner);
          }
        `}
      </Script>
      <Style renderChildrenInPlace={false}>
        {cssContent}
      </Style>
      <p className="nav-new-cookie-disclaimer__text">
        {bannerText} {(
          // react/jsx-curly-brace-presence
          <a
            rel="noopener noreferrer"
            target="_blank"
            href={moreInfo.link}
          >
            {moreInfo.name}
          </a>
        )}
      </p>
      <button
        id="newCookieDisclaimerButton"
        className="nav-new-cookie-disclaimer__button"
      >
        {dismissButtonText}
      </button>
    </div>
  );
};

CookieDisclaimer.propTypes = {
  show: PropTypes.bool.isRequired,
  bannerText: PropTypes.string.isRequired,
  cssContent: PropTypes.string.isRequired,
  moreInfo: PropTypes.shape({
    link: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
  }).isRequired,
  dismissButtonText: PropTypes.string.isRequired,
  cookieCreationInfo: PropTypes.shape({
    name: PropTypes.string.isRequired,
    domain: PropTypes.string.isRequired,
    sameSite: PropTypes.string.isRequired,
  }).isRequired,
};

module.exports = CookieDisclaimer;
