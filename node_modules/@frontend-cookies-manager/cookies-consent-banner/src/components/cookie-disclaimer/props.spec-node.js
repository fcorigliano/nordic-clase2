const { cookieDisclaimerCookieIdentifier } = require('../../constants/cookies');

const defaultProps = {
  cookies: {
    'some-other-cookie': 'some-other-value',
  },
  headers: {
    someHeader: 'a',
  },
  req: {
    someRequestObject: true,
  },
  platformId: 'ML',
  siteId: 'MLA',
  domain: 'mercadolibre.com.ar',
  device: {
    type: 'mobile',
  },
  browser: {
    support: {
      sameSite: true,
    },
  },
  userId: 4321,
  userPreferences: {
    categories: {
      advertising: null,
    },
  },
  feConfigEnvironment: 'testEnvironment',
};

const mockConfig = (config) => {
  const valueToReturn = config === null
    ? null
    : {
      bannerText: 'some banner text',
      dismissButtonText: 'some dismiss button text',
      moreInfo: 'some more info config',
    };
  const getMock = jest.fn().mockReturnValue(valueToReturn);
  jest.doMock('data-privacy-config', () => ({ getValue: getMock }));

  const dpConfigEnvironment = 'some-environment';
  const getDpEnvironment = jest.fn().mockReturnValue(dpConfigEnvironment);
  jest.doMock('@frontend-cookies-manager/common/src/services/get-dp-environment', () => ({ getDpEnvironment }));

  const assert = (props = defaultProps) => {
    const {
      platformId,
      siteId,
    } = props;
    expect(getMock).toHaveBeenCalledWith({
      key: 'cookieDisclaimer',
      platform: {
        id: platformId,
        siteId,
      },
      environment: dpConfigEnvironment,
      req: props.req,
    });
    expect(getDpEnvironment).toHaveBeenCalledWith({
      headers: props.headers,
      cookies: props.cookies,
      req: props.req,
    });
  };

  return {
    assert,
    valueToReturn,
  };
};

const mockCssContent = () => {
  const css = 'some-test-css';

  const getCssContent = jest.fn().mockReturnValue(css);
  jest.doMock('./css-content', () => ({ getCssContent }));

  const assert = () => expect(getCssContent).toHaveBeenCalledWith(defaultProps.platformId);

  return {
    css,
    assert,
  };
};

const mockUserPreferencesRequiresShowingBanner = (value) => {
  const userPreferencesRequiresShowingBanner = jest.fn().mockReturnValue(value);
  jest.doMock('../commons/user-pref-req-show-banner', () => ({ userPreferencesRequiresShowingBanner }));

  const assert = (userPreferences) => expect(userPreferencesRequiresShowingBanner)
    .toHaveBeenCalledWith(userPreferences);

  return {
    assert,
  };
};

const getCookieName = () =>
  // eslint-disable-next-line implicit-arrow-linebreak
  `_${defaultProps.platformId.toLowerCase()}_${cookieDisclaimerCookieIdentifier}_${defaultProps.siteId.toLowerCase()}`;

describe('Disclaimer banner props', () => {
  beforeEach(() => jest.resetModules());

  it('should return show false if there is no missing preferences', () => {
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(false);

    const propsMapper = require('./props');

    const { show } = propsMapper(defaultProps);

    expect(show).toBeFalsy();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if there is no configuration', () => {
    const { assert } = mockConfig(null);
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper(defaultProps);

    expect(show).toBeFalsy();
    assert();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if cookie is present', () => {
    const { assert } = mockConfig();
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const testProps = {
      ...defaultProps,
      cookies: {
        [getCookieName()]: '1',
      },
    };
    const { show } = propsMapper(testProps);

    expect(show).toBeFalsy();
    assert(testProps);
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return cookie disclaimer data with matching platform CSS', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      css,
      assert: assertCss,
    } = mockCssContent();
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper(defaultProps);

    expect(result).toEqual({
      show: true,
      cssContent: css,
      bannerText: configValueToReturn.bannerText,
      dismissButtonText: configValueToReturn.dismissButtonText,
      moreInfo: configValueToReturn.moreInfo,
      cookieCreationInfo: {
        name: getCookieName(),
        domain: defaultProps.domain,
        sameSite: ((defaultProps.browser || {}).support || {}).sameSite ? '; SameSite=None; Secure' : '',
      },
    });
    assertConfig();
    assertCss();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return cookie disclaimer data without matching platform CSS', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      css,
      assert: assertCss,
    } = mockCssContent();
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper(defaultProps);

    expect(result).toEqual({
      show: true,
      cssContent: css,
      bannerText: configValueToReturn.bannerText,
      dismissButtonText: configValueToReturn.dismissButtonText,
      moreInfo: configValueToReturn.moreInfo,
      cookieCreationInfo: {
        name: getCookieName(),
        domain: defaultProps.domain,
        sameSite: ((defaultProps.browser || {}).support || {}).sameSite ? '; SameSite=None; Secure' : '',
      },
    });
    assertConfig();
    assertCss();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return cookie disclaimer data without matching platform CSS when there is no categories', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      css,
      assert: assertCss,
    } = mockCssContent();
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper({
      ...defaultProps,
      userPreferences: {
        categories: {},
      },
    });

    expect(result).toEqual({
      show: true,
      cssContent: css,
      bannerText: configValueToReturn.bannerText,
      dismissButtonText: configValueToReturn.dismissButtonText,
      moreInfo: configValueToReturn.moreInfo,
      cookieCreationInfo: {
        name: getCookieName(),
        domain: defaultProps.domain,
        sameSite: ((defaultProps.browser || {}).support || {}).sameSite ? '; SameSite=None; Secure' : '',
      },
    });
    assertConfig();
    assertCss();
    assertMissingPreferences({
      categories: {},
    });
  });
});
