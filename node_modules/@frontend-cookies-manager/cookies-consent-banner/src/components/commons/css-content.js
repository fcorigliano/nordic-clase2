const { readFileSync } = require('fs');
const { join } = require('path');
const { getData } = require('./entries-data');
const { send } = require('../../services/statsd');
const { error: logError } = require('../../services/logger');
const { errorLoadingCss } = require('../../constants/statsd');

const cssGetters = (componentName) => getData(componentName).reduce((tempCss, fileData) => {
  tempCss[fileData.platformId] = tempCss[fileData.platformId] || {};
  tempCss[fileData.platformId][fileData.deviceType] = () => {
    const fileName = join(__dirname, '../../../lib-css', `${componentName}-${fileData.withoutExtension}.css`);
    try {
      return readFileSync(fileName).toString();
    } catch (error) {
      send(errorLoadingCss, { fileName });
      logError(`Error loading ${componentName} CSS`, {
        error,
        extraTags: { fileName },
      });
      return null;
    }
  };
  return tempCss;
}, {});

const cssCache = {};
const getCssContent = (platformId, deviceType, namespace) => {
  const platformIdWithDefault = cssGetters(namespace)[platformId] ? platformId : 'default';

  const platformGettersWithDefault = cssGetters(namespace)[platformIdWithDefault];

  const deviceWithDefault = platformGettersWithDefault[deviceType] ? deviceType : 'default';

  if (!cssCache[namespace]) {
    cssCache[namespace] = {};
  }

  cssCache[namespace][platformIdWithDefault] = cssCache[namespace][platformIdWithDefault] || {};
  const platfromCache = cssCache[namespace][platformIdWithDefault];
  platfromCache[deviceWithDefault] = platfromCache[deviceWithDefault] || {
    data: platformGettersWithDefault[deviceWithDefault](),
  };

  return platfromCache[deviceWithDefault].data;
};

module.exports = {
  getCssContent,
};
