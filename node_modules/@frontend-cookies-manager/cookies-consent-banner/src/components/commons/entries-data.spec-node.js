const getModule = () => require('./entries-data');

const getReaddirSyncMock = () => {
  const readdirSync = jest.fn().mockReturnValue([{
    isDirectory: () => true,
    name: 'some-folder-name',
  }, {
    isDirectory: () => false,
    name: 'default-desktop.css',
  }, {
    isDirectory: () => false,
    name: 'default-default.css',
  }, {
    isDirectory: () => false,
    name: 'ml-desktop.css',
  }, {
    isDirectory: () => false,
    name: 'ml-default.css',
  }, {
    isDirectory: () => false,
    name: 'mp-desktop.css',
  }, {
    isDirectory: () => false,
    name: 'mp-default.css',
  }]);

  jest.doMock('fs', () => ({
    readdirSync,
  }));

  const assertCalled = () => {
    expect(readdirSync).toHaveBeenCalledWith(expect.any(String), { withFileTypes: true });
  };

  return {
    assertCalled,
  };
};

describe('Consent banner entries data', () => {
  beforeEach(() => jest.resetModules());

  describe('getData', () => {
    it('should return data filtering directories', () => {
      const { assertCalled } = getReaddirSyncMock();

      const { getData } = getModule();

      const namespace = 'some-namespace';
      const data = getData(namespace);

      expect(data).toEqual([{
        deviceType: 'desktop',
        fileName: 'default-desktop.css',
        platformId: 'DEFAULT',
        withoutExtension: 'default-desktop',
      }, {
        deviceType: 'default',
        fileName: 'default-default.css',
        platformId: 'DEFAULT',
        withoutExtension: 'default-default',
      }, {
        deviceType: 'desktop',
        fileName: 'ml-desktop.css',
        platformId: 'ML',
        withoutExtension: 'ml-desktop',
      }, {
        deviceType: 'default',
        fileName: 'ml-default.css',
        platformId: 'ML',
        withoutExtension: 'ml-default',
      }, {
        deviceType: 'desktop',
        fileName: 'mp-desktop.css',
        platformId: 'MP',
        withoutExtension: 'mp-desktop',
      }, {
        deviceType: 'default',
        fileName: 'mp-default.css',
        platformId: 'MP',
        withoutExtension: 'mp-default',
      }]);
      assertCalled();
    });

    it('should return cached data', () => {
      const { assertCalled } = getReaddirSyncMock();

      const { getData } = getModule();

      const namespace = 'some-namespace';
      const dataFirst = getData(namespace);
      const dataSecond = getData(namespace);

      expect(dataFirst).toBe(dataSecond);
      assertCalled();
    });
  });
});
