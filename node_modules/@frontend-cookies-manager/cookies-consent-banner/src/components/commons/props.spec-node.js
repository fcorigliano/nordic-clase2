const { consentBanner } = require('@frontend-cookies-manager/common/src/constants/configurations');
const {
  loggedCookie,
  loggedFallbackCookie,
  notLoggedCookie,
} = require('../../constants/cookies');

const defaultProps = {
  platformId: 'ML',
  siteId: 'MLA',
  domain: 'mercadolibre.com.ar',
  device: {
    type: 'mobile',
  },
  browser: {
    support: {
      sameSite: true,
    },
  },
  userId: 4321,
  userPreferences: {
    categories: {
      advertising: null,
    },
  },
  feConfigEnvironment: 'testEnvironment',
  headers: {
    someHeader: 'a',
  },
  cookies: {
    someCookie: 'a',
  },
  req: {
    someRequestObject: true,
  },
};

const mockConfig = (config = {}) => {
  const valueToReturn = config === null
    ? null
    : {
      href: {
        apiLowEnd: 'https://www.{domain}.com/low-end/external',
        moreInfo: 'https://www.{domain}.com/more-info',
        customize: 'https://www.{domain}.com/customize',
        api: 'https://www.{domain}.com/api/users/{userId}',
        ...config.href,
      },
      cache: {
        ttl: 100000,
        ttlFallback: 200000,
        ttlNotLogged: 300000,
        ...config.cache,
      },
      i18n: config.i18n === null
        ? null
        : {},
      successSnackbar: config.successSnackbar,
      errorSnackbar: config.errorSnackbar,
    };
  const getMock = jest.fn().mockReturnValue(valueToReturn);
  jest.doMock('data-privacy-config', () => ({ getValue: getMock }));

  const dpConfigEnvironment = 'some-environment';
  const getDpEnvironment = jest.fn().mockReturnValue(dpConfigEnvironment);
  jest.doMock('@frontend-cookies-manager/common/src/services/get-dp-environment', () => ({ getDpEnvironment }));

  const assert = () => {
    const {
      platformId,
      siteId,
    } = defaultProps;
    expect(getMock).toHaveBeenCalledWith({
      key: consentBanner,
      platform: {
        id: platformId,
        siteId,
      },
      environment: dpConfigEnvironment,
      req: defaultProps.req,
    });
    expect(getDpEnvironment).toHaveBeenCalledWith({
      headers: defaultProps.headers,
      cookies: defaultProps.cookies,
      req: defaultProps.req,
    });
  };

  return {
    assert,
    valueToReturn,
  };
};

const mockUserPreferencesRequiresShowingBanner = (value) => {
  const userPreferencesRequiresShowingBannerMock = jest.fn().mockReturnValue(value);
  jest.doMock('./user-pref-req-show-banner',
    () => ({ userPreferencesRequiresShowingBanner: userPreferencesRequiresShowingBannerMock }));

  const assert = (userPreferences) => expect(userPreferencesRequiresShowingBannerMock)
    .toHaveBeenCalledWith(userPreferences);

  return {
    assert,
  };
};

const mockCssContent = (returnContent, namespace) => {
  const valueToReturn = returnContent !== false
    ? 'some-css-content'
    : null;
  const getMock = jest.fn().mockReturnValue(valueToReturn);
  jest.doMock('./css-content', () => ({ getCssContent: getMock }));

  const assert = () => {
    expect(getMock).toHaveBeenCalledWith(defaultProps.platformId, defaultProps.device.type, namespace);
  };

  return {
    assert,
    valueToReturn,
  };
};

describe('Consent banner bottom props', () => {
  beforeEach(() => jest.resetModules());

  it('should return show false if there is no missing preferences', () => {
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(false);
    const propsMapper = require('./props');

    const userPreferences = {
      categories: {
        advertising: true,
        tracking: false,
      },
    };
    const { show } = propsMapper('consent-banner')({
      ...defaultProps,
      userPreferences,
    });

    expect(show).toBeFalsy();

    assertMissingPreferences(userPreferences);
  });

  it('should return show false if there is no configuration', () => {
    const { assert } = mockConfig(null);
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner')(defaultProps);

    expect(show).toBeFalsy();
    assert();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if there is no i18n configuration', () => {
    const { assert } = mockConfig({
      i18n: null,
    });
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner')(defaultProps);

    expect(show).toBeFalsy();
    assert();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if there is no css content', () => {
    const { assert: assertConfig } = mockConfig();
    const { assert: assertCssContent } = mockCssContent(false, 'consent-banner');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner')(defaultProps);

    expect(show).toBeFalsy();
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show true with logged user, sameSite, non-zero ttl, cookieDataList and apiData', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      assert: assertCssContent,
      valueToReturn: cssValueToReturn,
    } = mockCssContent(true, 'consent-banner');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper('consent-banner')(defaultProps);

    const apiDataUrl = configValueToReturn.href.api.replace('{domain}', defaultProps.domain)
      .replace('{userId}', defaultProps.userId);

    expect(result).toEqual({
      show: true,
      i18n: configValueToReturn.i18n,
      href: {
        apiLowEnd: configValueToReturn.href.apiLowEnd.replace('{domain}', defaultProps.domain),
        moreInfo: configValueToReturn.href.moreInfo.replace('{domain}', defaultProps.domain),
        customize: configValueToReturn.href.customize.replace('{domain}', defaultProps.domain),
      },
      cssContent: cssValueToReturn,
      cookieDataList: [
        {
          cookieName: loggedCookie.name,
          path: '/',
          domain: defaultProps.domain,
          secure: true,
          sameSite: 'none',
          maxAge: configValueToReturn.cache.ttl / 1000,
          userId: defaultProps.userId,
        },
        {
          cookieName: loggedFallbackCookie.name,
          path: '/',
          domain: defaultProps.domain,
          secure: true,
          sameSite: 'none',
          maxAge: configValueToReturn.cache.ttlFallback / 1000,
          userId: defaultProps.userId,
        },
      ],
      apiData: {
        url: apiDataUrl,
        payload: {
          site_id: defaultProps.siteId,
          platform_id: defaultProps.platformId,
          domain: defaultProps.domain,
        },
      },
      preferences: Object
        .keys(defaultProps.userPreferences.categories)
        .reduce((hash, item) => {
          hash[item] = true;
          return hash;
        }, {}),
      isMobile: true,
      isLiteVersion: false,
      snackbarConfig: {
        successSnackbar: {},
        errorSnackbar: {},
      },
    });
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show true with not logged user, sameSite, not logged max age, cookieDataList and no apiData', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      assert: assertCssContent,
      valueToReturn: cssValueToReturn,
    } = mockCssContent(true, 'consent-banner');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper('consent-banner')({
      ...defaultProps,
      userId: null,
    });

    expect(result).toEqual({
      show: true,
      i18n: configValueToReturn.i18n,
      href: {
        apiLowEnd: configValueToReturn.href.apiLowEnd.replace('{domain}', defaultProps.domain),
        moreInfo: configValueToReturn.href.moreInfo.replace('{domain}', defaultProps.domain),
        customize: configValueToReturn.href.customize.replace('{domain}', defaultProps.domain),
      },
      cssContent: cssValueToReturn,
      cookieDataList: [{
        cookieName: notLoggedCookie.name,
        path: '/',
        domain: defaultProps.domain,
        secure: true,
        sameSite: 'none',
        maxAge: configValueToReturn.cache.ttlNotLogged / 1000,
        userId: null,
      }],
      apiData: null,
      preferences: Object
        .keys(defaultProps.userPreferences.categories)
        .reduce((hash, item) => {
          hash[item] = true;
          return hash;
        }, {}),
      isMobile: true,
      isLiteVersion: false,
      snackbarConfig: {
        successSnackbar: {},
        errorSnackbar: {},
      },
    });
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });
});

describe('Consent banner modal props', () => {
  beforeEach(() => jest.resetModules());

  it('should return show false if there is no missing preferences', () => {
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(false);
    const propsMapper = require('./props');

    const userPreferences = {
      categories: {
        advertising: true,
        tracking: false,
      },
    };
    const { show } = propsMapper('consent-banner-modal')({
      ...defaultProps,
      userPreferences,
    });

    expect(show).toBeFalsy();

    assertMissingPreferences(userPreferences);
  });

  it('should return show false if there is no configuration', () => {
    const { assert } = mockConfig(null);
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner-modal')(defaultProps);

    expect(show).toBeFalsy();
    assert();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if there is no i18n configuration', () => {
    const { assert } = mockConfig({
      i18n: null,
    });
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner-modal')(defaultProps);

    expect(show).toBeFalsy();
    assert();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show false if there is no css content', () => {
    const { assert: assertConfig } = mockConfig();
    const { assert: assertCssContent } = mockCssContent(false, 'consent-banner-modal');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const { show } = propsMapper('consent-banner-modal')(defaultProps);

    expect(show).toBeFalsy();
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show true with logged user, sameSite, non-zero ttl, cookieDataList and apiData', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      assert: assertCssContent,
      valueToReturn: cssValueToReturn,
    } = mockCssContent(true, 'consent-banner-modal');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper('consent-banner-modal')(defaultProps);

    const apiDataUrl = configValueToReturn.href.api.replace('{domain}', defaultProps.domain)
      .replace('{userId}', defaultProps.userId);

    expect(result).toEqual({
      show: true,
      i18n: configValueToReturn.i18n,
      href: {
        apiLowEnd: configValueToReturn.href.apiLowEnd.replace('{domain}', defaultProps.domain),
        moreInfo: configValueToReturn.href.moreInfo.replace('{domain}', defaultProps.domain),
        customize: configValueToReturn.href.customize.replace('{domain}', defaultProps.domain),
      },
      cssContent: cssValueToReturn,
      cookieDataList: [
        {
          cookieName: loggedCookie.name,
          path: '/',
          domain: defaultProps.domain,
          secure: true,
          sameSite: 'none',
          maxAge: configValueToReturn.cache.ttl / 1000,
          userId: defaultProps.userId,
        },
        {
          cookieName: loggedFallbackCookie.name,
          path: '/',
          domain: defaultProps.domain,
          secure: true,
          sameSite: 'none',
          maxAge: configValueToReturn.cache.ttlFallback / 1000,
          userId: defaultProps.userId,
        },
      ],
      apiData: {
        url: apiDataUrl,
        payload: {
          site_id: defaultProps.siteId,
          platform_id: defaultProps.platformId,
          domain: defaultProps.domain,
        },
      },
      preferences: Object
        .keys(defaultProps.userPreferences.categories)
        .reduce((hash, item) => {
          hash[item] = true;
          return hash;
        }, {}),
      isMobile: true,
      isLiteVersion: false,
      snackbarConfig: {
        successSnackbar: {},
        errorSnackbar: {},
      },
    });
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  it('should return show true with not logged user, sameSite, not logged max age, cookieDataList and no apiData', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig();
    const {
      assert: assertCssContent,
      valueToReturn: cssValueToReturn,
    } = mockCssContent(true, 'consent-banner-modal');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper('consent-banner-modal')({
      ...defaultProps,
      userId: null,
    });

    expect(result).toEqual({
      show: true,
      i18n: configValueToReturn.i18n,
      href: {
        apiLowEnd: configValueToReturn.href.apiLowEnd.replace('{domain}', defaultProps.domain),
        moreInfo: configValueToReturn.href.moreInfo.replace('{domain}', defaultProps.domain),
        customize: configValueToReturn.href.customize.replace('{domain}', defaultProps.domain),
      },
      cssContent: cssValueToReturn,
      cookieDataList: [{
        cookieName: notLoggedCookie.name,
        path: '/',
        domain: defaultProps.domain,
        secure: true,
        sameSite: 'none',
        maxAge: configValueToReturn.cache.ttlNotLogged / 1000,
        userId: null,
      }],
      apiData: null,
      preferences: Object
        .keys(defaultProps.userPreferences.categories)
        .reduce((hash, item) => {
          hash[item] = true;
          return hash;
        }, {}),
      isMobile: true,
      isLiteVersion: false,
      snackbarConfig: {
        successSnackbar: {},
        errorSnackbar: {},
      },
    });
    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });

  const iOSLiteVersionChecker = (version, value) => {
    const propsMapper = require('./props');
    const consentBannerPropsMapper = propsMapper('consent-banner-modal');
    const result = consentBannerPropsMapper({
      ...defaultProps,
      device: { osName: 'ios', osVersion: version },
    });
    expect(result.isLiteVersion).toEqual(value);
  };

  it('should render lowEnd version if the iOS version has flattened iframes', () => {
    ['9.0.0', '11.0.12', '12.0.0'].forEach(version => iOSLiteVersionChecker(version, true));
  });

  it('should render regular version for iOS versions that have regular iframes', () => {
    ['13.0.0', '111.0.0'].forEach(version => iOSLiteVersionChecker(version, false));
  });

  it('defensive tests for invalid values in iOSVersionChecking', () => {
    ['13', -1, 0, '0', '-13', 'abc', '', '.1.', NaN, null, undefined]
      .forEach(version => iOSLiteVersionChecker(version, false));
  });

  it('should return snackbar config according with data privacy configurations', () => {
    const {
      assert: assertConfig,
      valueToReturn: configValueToReturn,
    } = mockConfig({
      successSnackbar: {
        canShow: false,
        hideTimeoutInMs: 3000,
      },
      errorSnackbar: {
        canShow: true,
        hideTimeoutInMs: 8000,
      },
    });
    const {
      assert: assertCssContent,
      valueToReturn: cssValueToReturn,
    } = mockCssContent(true, 'consent-banner-modal');
    const { assert: assertMissingPreferences } = mockUserPreferencesRequiresShowingBanner(true);

    const propsMapper = require('./props');

    const result = propsMapper('consent-banner-modal')({
      ...defaultProps,
      userId: null,
    });

    expect(result).toEqual({
      show: true,
      i18n: configValueToReturn.i18n,
      href: {
        apiLowEnd: configValueToReturn.href.apiLowEnd.replace('{domain}', defaultProps.domain),
        moreInfo: configValueToReturn.href.moreInfo.replace('{domain}', defaultProps.domain),
        customize: configValueToReturn.href.customize.replace('{domain}', defaultProps.domain),
      },
      cssContent: cssValueToReturn,
      cookieDataList: [{
        cookieName: notLoggedCookie.name,
        path: '/',
        domain: defaultProps.domain,
        secure: true,
        sameSite: 'none',
        maxAge: configValueToReturn.cache.ttlNotLogged / 1000,
        userId: null,
      }],
      apiData: null,
      preferences: Object
        .keys(defaultProps.userPreferences.categories)
        .reduce((hash, item) => {
          hash[item] = true;
          return hash;
        }, {}),
      isMobile: true,
      isLiteVersion: false,
      snackbarConfig: {
        successSnackbar: {
          canShow: false,
          hideTimeoutInMs: 3000,
        },
        errorSnackbar: {
          canShow: true,
          hideTimeoutInMs: 8000,
        },
      },
    });

    assertConfig();
    assertCssContent();
    assertMissingPreferences(defaultProps.userPreferences);
  });
});
