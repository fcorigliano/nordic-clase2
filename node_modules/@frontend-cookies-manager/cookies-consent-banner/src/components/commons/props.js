const dpConfig = require('data-privacy-config');
const { consentBanner } = require('@frontend-cookies-manager/common/src/constants/configurations');
const { getDpEnvironment } = require('@frontend-cookies-manager/common/src/services/get-dp-environment');
const {
  loggedCookie,
  loggedFallbackCookie,
  notLoggedCookie,
} = require('../../constants/cookies');
const { getCssContent } = require('./css-content');
const { userPreferencesRequiresShowingBanner } = require('./user-pref-req-show-banner');

const doNotShow = {
  show: false,
};

const urlsCache = {};
const getUrlWithDomain = (configUrl = '', domain) => {
  urlsCache[configUrl] = urlsCache[configUrl] || {};
  urlsCache[configUrl][domain] = urlsCache[configUrl][domain] || configUrl.replace('{domain}', domain);
  return urlsCache[configUrl][domain];
};

const getUrlWithUserId = (configUrl, domain, userId) => getUrlWithDomain(configUrl, domain).replace('{userId}', userId);

const getCookieData = ({ config, userId, domain, browser, isFallbackCookie = false }) => {
  let cookieConfig;

  if (!userId) {
    cookieConfig = notLoggedCookie;
  } else if (isFallbackCookie) {
    cookieConfig = loggedFallbackCookie;
  } else {
    cookieConfig = loggedCookie;
  }

  let maxAgeInSeconds;
  try {
    const maxAgeInMilliseconds = config.cache[cookieConfig.ttlConfigKey] || 0;
    maxAgeInSeconds = maxAgeInMilliseconds / 1000;
  } catch (err) {
    maxAgeInSeconds = 0;
  }

  return {
    userId,
    cookieName: cookieConfig.name,
    path: '/',
    domain,
    secure: true,
    sameSite: (browser.support || {}).sameSite || false
      ? 'none'
      : null,
    maxAge: maxAgeInSeconds,
  };
};

const isValidCookieData = cookieData => cookieData && cookieData.maxAge > 0;

const mountCookieDataList = ({ config, userId, domain, browser }) => {
  const cookieDataList = [];

  const cookieData = getCookieData({
    config,
    userId,
    domain,
    browser,
    isFallbackCookie: false,
  });

  if (isValidCookieData(cookieData)) {
    cookieDataList.push(cookieData);
  }

  if (userId) {
    const fallbackCookieData = getCookieData({
      config,
      userId,
      domain,
      browser,
      isFallbackCookie: true,
    });

    if (isValidCookieData(fallbackCookieData)) {
      cookieDataList.push(fallbackCookieData);
    }
  }

  return cookieDataList;
};

const getHref = (href = {}, domain) => ({
  apiLowEnd: getUrlWithDomain(href.apiLowEnd, domain),
  moreInfo: getUrlWithDomain(href.moreInfo, domain),
  customize: getUrlWithDomain(href.customize, domain),
});

const getAPIData = (config, platformId, siteId, domain, userId) => {
  if (!userId) {
    return null;
  }

  const url = getUrlWithUserId((config.href || {}).api, domain, userId);

  if (!url) {
    return null;
  }

  return {
    url,
    payload: {
      site_id: siteId,
      platform_id: platformId,
      domain,
    },
  };
};

const getPreferences = (userPreferences) => Object
  .keys(userPreferences.categories)
  .reduce((result, item) => {
    result[item] = true;
    return result;
  }, {});

const getSnackbarConfig = (config) => ({
  successSnackbar: { ...(config.successSnackbar || {}) },
  errorSnackbar: { ...(config.errorSnackbar || {}) },
});

const mapProps = (namespace) => ({
  platformId,
  siteId,
  domain,
  userPreferences,
  userId,
  browser = {},
  device = {},
  headers,
  cookies,
  req,
}) => {
  if (!userPreferencesRequiresShowingBanner(userPreferences)) {
    return doNotShow;
  }

  const dpConfigEnvironment = getDpEnvironment({
    headers,
    cookies,
    req,
  });

  const config = dpConfig.getValue({
    key: consentBanner,
    platform: {
      id: platformId,
      siteId,
    },
    environment: dpConfigEnvironment,
    req,
  });

  if (!config || !config.i18n) {
    return doNotShow;
  }

  const cssContent = getCssContent(platformId, device.type, namespace);

  if (!cssContent) {
    return doNotShow;
  }

  const href = getHref(config.href, domain);

  const {
    successLogged,
    successNotLogged,
    ...otherI18nProps
  } = config.i18n;

  const i18n = {
    ...otherI18nProps,
    success: userId ? successLogged : successNotLogged,
  };

  return {
    show: true,
    i18n,
    href,
    cssContent,
    cookieDataList: mountCookieDataList({ config, userId, domain, browser }),
    apiData: getAPIData(config, platformId, siteId, domain, userId),
    preferences: getPreferences(userPreferences),
    isMobile: !device.desktop,
    isLiteVersion: device.lowEnd
      || (device.osName === 'ios' /* iOS versions <= 12 flatten iframes and break the layout,
      we consider theses devices to be low end too so that the user is redirected to a
      different page instead of rendering a modal */
      && typeof device.osVersion === 'string'
      && Number.parseInt(device.osVersion.substring(0, device.osVersion.indexOf('.')), 10) <= 12),
    snackbarConfig: getSnackbarConfig(config),
  };
};

module.exports = mapProps;
