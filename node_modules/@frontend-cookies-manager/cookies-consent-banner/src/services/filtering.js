const {
  methods,
  all,
} = require('../constants/cookies-consent-banner');
const { PRODUCTION } = require('../constants/envs');
const { error } = require('./logger');
const { send } = require('./statsd');
const {
  missingEnvVariables,
  noOriginalUrl,
} = require('../constants/statsd');

const regExpCache = {};
const getRegEx = (path) => {
  if (!regExpCache[path]) {
    // eslint-disable-next-line security/detect-non-literal-regexp
    regExpCache[path] = new RegExp(path, 'i');
  }
  return regExpCache[path];
};

const getIsPresent = ({
  applicationId,
  scopeId,
  path,
  config,
  isInclude: siteIsInclude,
}) => {
  // app
  const appConfig = config.filtering.configuration[0][applicationId];
  if (!appConfig) {
    return false;
  }

  // rules
  // if there's no matching rules it returns false
  // if there's a matching rule with EXCLUDE it returns false
  // if there's a matching rule with INCLUDE it returns true
  return !!appConfig.rules.reduce((tempValue, ruleConfig) => {
    if (tempValue !== null) {
      return tempValue;
    }

    const scopeMatches = ruleConfig.scopeId === all || ruleConfig.scopeId === scopeId;

    const appIsInclude = ruleConfig.method === methods.INCLUDE;

    /*
      this rule shows the consent when there's no path
      plaform/site INCLUDE - app INCLUDE -> true so getIsPresent returns true and shouldShowBanner returns true
      plaform/site INCLUDE - app EXCLUDE -> false so getIsPresent returns true and shouldShowBanner returns true
      plaform/site EXCLUDE - app INCLUDE -> false so getIsPresent returns false and shouldShowBanner returns true
      plaform/site EXCLUDE - app EXCLUDE -> true so getIsPresent returns false and shouldShowBanner returns true
    */
    const pathMatchesForNoPath = appIsInclude === siteIsInclude;
    const regExMatches = ruleConfig.pathRegExp === all || (path
      ? path.match(getRegEx(ruleConfig.pathRegExp))
      : pathMatchesForNoPath
    );

    const ruleMatch = scopeMatches && regExMatches;

    if (!ruleMatch) {
      return null;
    }

    return ruleConfig.method === methods.INCLUDE
      ? ruleMatch
      : !ruleMatch;
  }, null);
};

const shouldShowBanner = ({
  applicationId,
  scopeId,
  path,
  config,
  envVariables,
}) => {
  if (!applicationId || !scopeId) {
    if (envVariables
      && !envVariables.IS_CI
      && envVariables.NODE_ENV === PRODUCTION
      && envVariables.FURY
    ) {
      send(missingEnvVariables, {
        applicationId: applicationId || null,
        scopeId: scopeId || null,
      });

      error('There is no application id or scope id');
    }

    return true;
  }

  if (!path) {
    send(noOriginalUrl, {
      applicationId: applicationId || null,
      scopeId: scopeId || null,
    });
  }

  const filteringMethod = config.filtering.method || methods.EXCLUDE;

  const isInclude = filteringMethod === methods.INCLUDE;
  const isPresent = getIsPresent({
    applicationId,
    scopeId,
    path,
    config,
    isInclude,
  });

  return isInclude
    ? isPresent
    : !isPresent;
};

module.exports = {
  shouldShowBanner,
};
