const { renderType } = require('../constants/experiments');

const getService = () => require('./requests');

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
  headers: {
    'some-header-key': 'some-header-value',
  },
  cookies: {
    'some-cookie-key': 'some-cookie-value',
  },
};

const mockCookiesConsentExperimentService = ({ result }) => {
  const getRenderTypeExperimentConfig = jest.fn().mockReturnValue(result);
  jest.doMock('./cookies-consent-experiment', () => ({ getRenderTypeExperimentConfig }));

  const assertCookiesConsentExperimentCalled = () => {
    expect(getRenderTypeExperimentConfig).toHaveBeenCalledWith({
      platform: req.platform,
      headers: req.headers,
      cookies: req.cookies,
      req,
    });
  };

  return {
    assertCookiesConsentExperimentCalled,
  };
};

describe('Dynamic content service', () => {
  beforeEach(() => jest.resetModules());

  describe('requestHasCookiesConsentExperience', () => {
    it('should return false for no configuration', () => {
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({ result: null });

      const { requestHasCookiesConsentExperience } = getService();

      const result = requestHasCookiesConsentExperience({ req });

      assertCookiesConsentExperimentCalled();
      expect(result).toBe(false);
    });

    it('should return false for a configuration without variant', () => {
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({ result: {} });

      const { requestHasCookiesConsentExperience } = getService();

      const result = requestHasCookiesConsentExperience({ req });

      assertCookiesConsentExperimentCalled();
      expect(result).toBe(false);
    });

    it('should return false for a disclaimer configuration', () => {
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: renderType.variants.disclaimer,
        },
      });

      const { requestHasCookiesConsentExperience } = getService();

      const result = requestHasCookiesConsentExperience({ req });

      assertCookiesConsentExperimentCalled();
      expect(result).toBe(false);
    });

    it('should return false for a none configuration', () => {
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: renderType.variants.none,
        },
      });

      const { requestHasCookiesConsentExperience } = getService();

      const result = requestHasCookiesConsentExperience({ req });

      assertCookiesConsentExperimentCalled();
      expect(result).toBe(false);
    });

    it('should return true for a non disclaimer configuration', () => {
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: `${renderType.variants.disclaimer}-modified`,
        },
      });

      const { requestHasCookiesConsentExperience } = getService();

      const result = requestHasCookiesConsentExperience({ req });

      assertCookiesConsentExperimentCalled();
      expect(result).toBe(true);
    });
  });
});
