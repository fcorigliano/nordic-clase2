const {
  consentBanner,
  selectedVariant,
} = require('../constants/configurations');

const selectedVariantKey = [
  consentBanner,
  selectedVariant,
].join('.');

const getService = () => require('./cookies-consent-experiment');

const platform = {
  id: 'ML',
  siteId: 'MLA',
};
const headers = {};
const cookies = {};

const req = {
  someRequestProperty: 1,
};

const mockDpConfigService = ({
  selectedVariantResult,
} = {}) => {
  const getValue = jest.fn().mockReturnValue(selectedVariantResult || null);
  jest.doMock('data-privacy-config', () => ({
    getValue,
  }));

  const dpConfigEnvironment = 'some-environment';
  const getDpEnvironment = jest.fn().mockReturnValue(dpConfigEnvironment);
  jest.doMock('./get-dp-environment', () => ({ getDpEnvironment }));

  const assertDpConfigCalled = ({
    platform: assertPlatform = platform,
    headers: assertHeaders = headers,
    cookies: assertCookies = cookies,
    req: assertReq = req,
  } = {}) => {
    expect(getValue).toHaveBeenCalledWith({
      key: selectedVariantKey,
      platform: assertPlatform,
      environment: dpConfigEnvironment,
      req: assertReq,
    });
    expect(getDpEnvironment).toHaveBeenCalledWith({
      headers: assertHeaders,
      cookies: assertCookies,
      req: assertReq,
    });
  };

  return {
    assertDpConfigCalled,
  };
};

describe('Cookies consent experiment service', () => {
  beforeEach(() => jest.resetModules());

  describe('getRenderTypeExperimentConfig', () => {
    it('should return selected variant', () => {
      const selectedVariantResult = {
        variant: 'some-variant-id',
      };
      const { assertDpConfigCalled } = mockDpConfigService({ selectedVariantResult });
      const { getRenderTypeExperimentConfig } = getService();

      const result = getRenderTypeExperimentConfig({
        platform,
        headers,
        cookies,
        req,
      });

      expect(result).toBe(selectedVariantResult);
      assertDpConfigCalled({
        platform,
        key: selectedVariantKey,
      });
    });

    it('should return null if selected variant is not configured', () => {
      const selectedVariantResult = null;
      const { assertDpConfigCalled } = mockDpConfigService({ selectedVariantResult });
      const { getRenderTypeExperimentConfig } = getService();

      const result = getRenderTypeExperimentConfig({
        platform,
        headers,
        cookies,
        req,
      });

      expect(result).toBe(null);
      assertDpConfigCalled({
        platform,
        key: selectedVariantKey,
      });
    });

    it('should return null if there is no platform', () => {
      const { getRenderTypeExperimentConfig } = getService();

      const result = getRenderTypeExperimentConfig({
        platform: null,
        headers,
        cookies,
        req,
      });

      expect(result).toBe(null);
    });
  });
});
