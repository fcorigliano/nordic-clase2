const getModule = () => require('./logger');
const { COOKIES_HELPERS_MIDDLEWARE_ERROR_NAMESPACE } = require('./constants/newrelic');

const applicationId = 'some-application-id';
const scopeId = 'some-scope-id';
const message = 'sample message';
const emptyErrorMessage = 'No error message';

const mockEnv = ({ PRODUCTION } = {}) => {
  jest.doMock('frontend-env', () => ({
    PRODUCTION: !!PRODUCTION,
    APPLICATION: applicationId,
    SCOPE: scopeId,
  }));
};

const mockLogger = () => {
  const errorMock = jest.fn();
  const loggerInstance = {
    error: errorMock,
  };
  const loggerMock = jest.fn().mockReturnValue(loggerInstance);
  jest.doMock('frontend-logger', () => loggerMock);

  const assertCalled = (expectedMessage, expectedTags) => {
    expect(loggerMock).toHaveBeenCalledWith('@frontend-cookies-manager/cookies-helpers-middleware');
    expect(errorMock).toHaveBeenCalledWith(expectedMessage, {
      applicationId,
      scopeId,
      ...expectedTags,
    });
  };

  const assertNotCalled = () => {
    expect(errorMock).not.toHaveBeenCalled();
  };

  return {
    assertCalled,
    assertNotCalled,
  };
};

const mockNewRelic = () => {
  const recordCustomEventMock = jest.fn();
  const newRelicInstance = {
    recordCustomEvent: recordCustomEventMock,
  };
  jest.doMock('newrelic', () => newRelicInstance);

  const assertCalled = (expectedEventType, expectedAttributes) => {
    expect(recordCustomEventMock).toHaveBeenCalledWith(expectedEventType, {
      applicationId,
      scopeId,
      ...expectedAttributes,
    });
  };

  const assertNotCalled = () => {
    expect(recordCustomEventMock).not.toHaveBeenCalled();
  };

  return {
    assertCalled,
    assertNotCalled,
  };
};

describe('Logger', () => {
  beforeEach(() => jest.resetModules());

  describe('error', () => {
    describe('frontend-logger', () => {
      it('should log message', () => {
        mockEnv();
        const { assertCalled: assertCalledLogger } = mockLogger();
        const { assertNotCalled: assertNotCalledNewRelic } = mockNewRelic();

        const { error } = getModule();

        error(message);

        assertCalledLogger(`${message}: ${emptyErrorMessage}`, {
          platformId: null,
          siteId: null,
          domain: null,
        });
        assertNotCalledNewRelic();
      });

      it('should log message with req tags', () => {
        mockEnv();
        const { assertCalled: assertCalledLogger } = mockLogger();
        const { assertNotCalled: assertNotCalledNewRelic } = mockNewRelic();

        const { error } = getModule();

        const options = {
          req: {
            platform: {
              id: 'MLA',
              siteId: 'ML',
              domain: 'mercadolibre.com.ar',
            },
          },
        };
        error(message, options);

        assertCalledLogger(`${message}: ${emptyErrorMessage}`, {
          platformId: 'MLA',
          siteId: 'ML',
          domain: 'mercadolibre.com.ar',
        });
        assertNotCalledNewRelic();
      });

      it('should log message with error', () => {
        mockEnv();
        const { assertCalled: assertCalledLogger } = mockLogger();
        const { assertNotCalled: assertNotCalledNewRelic } = mockNewRelic();

        const { error } = getModule();

        const errorMessage = 'some error message';
        error(message, {
          error: new Error(errorMessage),
        });

        assertCalledLogger(`${message}: ${errorMessage}`, {
          platformId: null,
          siteId: null,
          domain: null,
        });
        assertNotCalledNewRelic();
      });
    });

    describe('frontend-logger', () => {
      it('should send custom event', () => {
        mockEnv({ PRODUCTION: true });
        const { assertCalled: assertCalledNewRelic } = mockNewRelic();
        const { assertNotCalled: assertNotCalledLogger } = mockLogger();

        const { error } = getModule();

        error(message);

        assertCalledNewRelic(COOKIES_HELPERS_MIDDLEWARE_ERROR_NAMESPACE, {
          error: `${message}: ${emptyErrorMessage}`,
          platformId: null,
          siteId: null,
          domain: null,
        });
        assertNotCalledLogger();
      });

      it('should log message with req tags', () => {
        mockEnv({ PRODUCTION: true });
        const { assertCalled: assertCalledNewRelic } = mockNewRelic();
        const { assertNotCalled: assertNotCalledLogger } = mockLogger();

        const { error } = getModule();

        const options = {
          req: {
            platform: {
              id: 'MLA',
              siteId: 'ML',
              domain: 'mercadolibre.com.ar',
            },
          },
        };
        error(message, options);

        assertCalledNewRelic(COOKIES_HELPERS_MIDDLEWARE_ERROR_NAMESPACE, {
          error: `${message}: ${emptyErrorMessage}`,
          platformId: 'MLA',
          siteId: 'ML',
          domain: 'mercadolibre.com.ar',
        });
        assertNotCalledLogger();
      });

      it('should log message with error', () => {
        mockEnv({ PRODUCTION: true });
        const { assertCalled: assertCalledNewRelic } = mockNewRelic();
        const { assertNotCalled: assertNotCalledLogger } = mockLogger();

        const { error } = getModule();

        const errorMessage = 'some error message';
        error(message, {
          error: new Error(errorMessage),
        });

        assertCalledNewRelic(COOKIES_HELPERS_MIDDLEWARE_ERROR_NAMESPACE, {
          error: `${message}: ${errorMessage}`,
          platformId: null,
          siteId: null,
          domain: null,
        });
        assertNotCalledLogger();
      });
    });
  });
});
