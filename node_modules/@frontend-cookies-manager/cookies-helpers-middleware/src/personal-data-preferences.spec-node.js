const getModule = () => require('./personal-data-preferences');

describe('Personal Data Preferences module', () => {
  beforeEach(() => jest.resetModules());

  describe('getPersonalDataPreferencesUrls', () => {
    it('should return urls concatenated with environment name when valid param', () => {
      const { getPersonalDataPreferencesUrls } = getModule();

      expect(getPersonalDataPreferencesUrls('prod')).toStrictEqual({
        userPreferences: '/prod/personal-data-preferences/preferences/users',
        categories: '/prod/personal-data-preferences/preferences/categories',
      });

      expect(getPersonalDataPreferencesUrls('stage')).toStrictEqual({
        userPreferences: '/stage/personal-data-preferences/preferences/users',
        categories: '/stage/personal-data-preferences/preferences/categories',
      });

      expect(getPersonalDataPreferencesUrls('test')).toStrictEqual({
        userPreferences: '/test/personal-data-preferences/preferences/users',
        categories: '/test/personal-data-preferences/preferences/categories',
      });
    });

    it('should return urls with default environment name when invalid param', () => {
      const { getPersonalDataPreferencesUrls } = getModule();

      const expectedResult = {
        userPreferences: '/prod/personal-data-preferences/preferences/users',
        categories: '/prod/personal-data-preferences/preferences/categories',
      };

      expect(getPersonalDataPreferencesUrls(null)).toStrictEqual(expectedResult);
      expect(getPersonalDataPreferencesUrls(() => {})).toStrictEqual(expectedResult);
      expect(getPersonalDataPreferencesUrls(false)).toStrictEqual(expectedResult);
      expect(getPersonalDataPreferencesUrls(123)).toStrictEqual(expectedResult);
      expect(getPersonalDataPreferencesUrls('invalid-environment-name')).toStrictEqual(expectedResult);
      expect(getPersonalDataPreferencesUrls('PROD')).toStrictEqual(expectedResult);
    });

    it('should return urls with default environment name when empty param', () => {
      const { getPersonalDataPreferencesUrls } = getModule();

      const expectedResult = {
        userPreferences: '/prod/personal-data-preferences/preferences/users',
        categories: '/prod/personal-data-preferences/preferences/categories',
      };

      expect(getPersonalDataPreferencesUrls()).toStrictEqual(expectedResult);
    });
  });

  describe('getPersonalDataPreferencesEnvironmentName', () => {
    it(`should return environment name according with req when cookie "meliLab" exists,
      and header "x-personal-data-preferences-environment" is filled`, () => {
      const { getPersonalDataPreferencesEnvironmentName } = getModule();

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': 'prod' },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'other-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': 'stage' },
      })).toBe('stage');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'another-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': 'test' },
      })).toBe('test');
    });

    it('should return default environment name when is missing cookie "meliLab"', () => {
      const { getPersonalDataPreferencesEnvironmentName } = getModule();

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { otherCookie: 'some-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': 'stage' },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: {},
        headers: { 'x-personal-data-preferences-environment': 'stage' },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        headers: { 'x-personal-data-preferences-environment': 'stage' },
      })).toBe('prod');
    });

    it('should return default environment name when invalid header "x-personal-data-preferences-environment"', () => {
      const { getPersonalDataPreferencesEnvironmentName } = getModule();

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': 'some-invalid-value' },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': null },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
        headers: { 'x-personal-data-preferences-environment': () => {} },
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
        headers: {},
      })).toBe('prod');

      expect(getPersonalDataPreferencesEnvironmentName({
        get(key) { return this.headers && this.headers[key]; },
        cookies: { meliLab: 'some-meli-lab' },
      })).toBe('prod');
    });
  });
});
