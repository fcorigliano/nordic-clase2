const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const config = require('frontend-config');
const dpConfig = require('data-privacy-config');
const { getDpEnvironment } = require('@frontend-cookies-manager/common/src/services/get-dp-environment');
const { getDomain } = require('@frontend-cookies-manager/common/src/services/domains');
const { getUserId } = require('@frontend-cookies-manager/common/src/services/users');
const {
  TEST,
  IS_CI,
  TESTING_MY_MODULE_CALL_COOKIES_PREFERENCES_APIS,
  FURY,
} = require('frontend-env');
const { userPreferencesProperty } = require('./constants/namespaces');
const { userPreferences: requestConstants } = require('./constants/requests');
const {
  loggedCookie,
  notLoggedCookie,
  loggedFallbackCookie,
} = require('./constants/cookies');
const { get: getCategories } = require('./categories');
const {
  userCookiesPreferencesAPIError,
  noPlatformId,
  noSiteId,
  noDomain,
  noPersonalDataPreferencesEnvironmentName,
} = require('./constants/statsd');
const { admins } = require('./constants/domains');
const { send: sendStat } = require('./statsd');
const { error: logError } = require('./logger');
const {
  getPersonalDataPreferencesUrls,
  getPersonalDataPreferencesEnvironmentName,
} = require('./personal-data-preferences');

const clientInstance = restClient(requestConstants.restClientConfig);

const defaultCategoriesFromCacheResponse = Promise.resolve(null);

const getValidCookiePreferenceCategories = ({ validCategoryNames, cookiePreferences }) => (
  validCategoryNames.reduce((toReturn, categoryId) => {
    const rawValue = cookiePreferences.categories[categoryId];
    const value = (rawValue !== null && rawValue !== true && rawValue !== false)
      ? null
      : rawValue;

    return {
      ...toReturn,
      [categoryId]: value,
    };
  }, {})
);

const getCookiePreferencesCategory = ({ req, cookiePreferences, environmentName, platformId, siteId, domain }) => {
  if (platformId && siteId && domain) {
    return getCategories({ environmentName, platformId, siteId, domain, req })
      .then(categories => getValidCookiePreferenceCategories({ validCategoryNames: categories, cookiePreferences }))
      .then((categories) => ({ categories }))
      .catch(() => getCookiePreferencesCategory({ req, cookiePreferences }));
  }

  try {
    const categories = getValidCookiePreferenceCategories({
      validCategoryNames: Object.keys(cookiePreferences.categories),
      cookiePreferences,
    });

    return Promise.resolve({ categories });
  } catch (e) {
    return defaultCategoriesFromCacheResponse;
  }
};

const getCategoriesFromCache = ({ req, cookieName, userId, environmentName, platformId, siteId, domain }) => {
  let cacheData = null;
  try {
    const cacheCookie = req.cookies[cookieName];

    if (!cacheCookie) {
      return defaultCategoriesFromCacheResponse;
    }

    const serializedData = JSON.parse(cacheCookie);
    if ((userId && serializedData.userId !== userId) || !serializedData.categories) {
      cacheData = defaultCategoriesFromCacheResponse;
    } else {
      cacheData = getCookiePreferencesCategory({
        req,
        cookiePreferences: serializedData,
        environmentName,
        platformId,
        siteId,
        domain,
      });
    }
  } catch (e) {
    cacheData = defaultCategoriesFromCacheResponse;
  }

  return cacheData;
};

const setCookie = ({ req, res, cookieName, ttlKey, categories, userId, domain, dpConfigEnvironment }) => {
  const maxAge = dpConfig.getValue({
    key: ttlKey,
    req,
    environment: dpConfigEnvironment,
  }) || 0;

  if (maxAge && domain && !res.headersSent) {
    const sameSiteSupported = (req.browser && req.browser.support && req.browser.support.sameSite) || false;

    const data = JSON.stringify({
      userId,
      categories,
    });
    res.cookie(cookieName, data, {
      maxAge,
      path: '/',
      secure: true,
      domain,
      ...(sameSiteSupported
        ? { sameSite: 'none' }
        : null),
    });
  }
};

const isAdmin = (req) => req.hostname.includes(admins);

const isInternalTraffic = (req) => FURY && !req.get('x-public');

const get = (req, res) => {
  if (
    (TEST || IS_CI || TESTING_MY_MODULE_CALL_COOKIES_PREFERENCES_APIS === 'false')
    && (TESTING_MY_MODULE_CALL_COOKIES_PREFERENCES_APIS !== 'true')
  ) {
    return Promise.resolve({
      categories: {
        advertising: null,
      },
    });
  }

  const platform = req.platform || {};
  const platformId = platform.id;
  const { siteId } = platform;
  const platformDomain = platform.domain;
  const userId = getUserId(req);
  const cookieFallbackName = userId ? loggedFallbackCookie.name : notLoggedCookie.name;
  const environmentName = getPersonalDataPreferencesEnvironmentName(req);

  if (isAdmin(req) || isInternalTraffic(req)) {
    return getCategoriesFromCache({ req, cookieName: cookieFallbackName, userId });
  }

  if (!platformId) {
    sendStat(noPlatformId, req);
    return getCategoriesFromCache({ req, cookieName: cookieFallbackName, userId });
  }

  if (!siteId) {
    sendStat(noSiteId, req);
    return getCategoriesFromCache({ req, cookieName: cookieFallbackName, userId });
  }

  if (!platformDomain) {
    sendStat(noDomain, req);
    return getCategoriesFromCache({ req, cookieName: cookieFallbackName, userId });
  }

  if (!environmentName) {
    sendStat(noPersonalDataPreferencesEnvironmentName, req);
  }

  const feConfigEnvironment = config.getEnvironment(req);
  const domain = getDomain(platformId, siteId, platformDomain, feConfigEnvironment);

  if (!userId) {
    return getCategoriesFromCache({
      req,
      cookieName: notLoggedCookie.name,
      userId,
      environmentName,
      platformId,
      siteId,
      domain,
    })
      .then((data) => {
        if (data) return data;

        return getCategories({
          environmentName,
          platformId,
          siteId,
          domain,
          req,
        })
          .then((categories) => categories.reduce(
            (toReturn, category) => ({
              ...toReturn,
              [category]: null,
            }),
            {},
          ))
          .then((categories) => ({ categories }));
      })
      .catch(() => null);
  }

  return getCategoriesFromCache({
    req,
    cookieName: loggedCookie.name,
    userId,
    environmentName,
    platformId,
    siteId,
    domain,
  }).then((categoriesFromCache) => {
    if (categoriesFromCache) {
      return categoriesFromCache;
    }

    const { userPreferences: userPreferencesUrl } = getPersonalDataPreferencesUrls(environmentName);

    return clientInstance
      .get(`${userPreferencesUrl}/${userId}`, {
        params: {
          platform_id: platformId,
          site_id: siteId,
          domain,
        },
        context: buildRestClientContext(req),
      })
      .then((response) => {
        const dpConfigEnvironment = getDpEnvironment({ req });
        const categories = response.data[userPreferencesProperty];
        const setCookieParams = {
          req,
          res,
          categories,
          userId,
          domain,
          dpConfigEnvironment,
        };

        setCookie({
          ...setCookieParams,
          cookieName: loggedCookie.name,
          ttlKey: loggedCookie.ttlConfigKey,
        });

        setCookie({
          ...setCookieParams,
          cookieName: loggedFallbackCookie.name,
          ttlKey: loggedFallbackCookie.ttlConfigKey,
        });

        return { categories };
      })
      .catch((error) => {
        sendStat(userCookiesPreferencesAPIError, req, { userId });
        logError('Error getting user cookies preferences from API', {
          req,
          error,
        });

        return getCategoriesFromCache({
          req,
          cookieName: loggedFallbackCookie.name,
          userId,
          environmentName,
          platformId,
          siteId,
          domain,
        });
      });
  });
};

module.exports = {
  get,
};
