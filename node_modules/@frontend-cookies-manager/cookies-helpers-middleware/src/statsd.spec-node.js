const { baseKey } = require('./constants/statsd');

const getService = () => require('./statsd');

const applicationId = 'some-application-id';
const scopeId = 'some-scope-id';
const key = 'some-key';
const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
};

const mockStatsd = () => {
  const histogram = jest.fn();
  jest.doMock('frontend-statsd/internal', () => ({ histogram }));

  const assertStatsdCalled = ({ platform = req.platform, extraTags } = {}) => {
    expect(histogram).toHaveBeenCalledWith(`${baseKey}.${key}`, 1, {
      applicationId,
      scopeId,
      platformId: platform ? platform.id : null,
      siteId: platform ? platform.siteId : null,
      domain: platform ? platform.domain : null,
      ...extraTags,
    });
  };

  const assertStatsdNotCalled = () => {
    expect(histogram).not.toHaveBeenCalled();
  };

  return {
    assertStatsdCalled,
    assertStatsdNotCalled,
  };
};

const mockEnv = ({
  FURY,
  PRODUCTION,
} = {}) => {
  jest.doMock('frontend-env', () => ({
    FURY: FURY !== false,
    PRODUCTION: PRODUCTION !== false,
    APPLICATION: applicationId,
    SCOPE: scopeId,
  }));
};

describe('Statsd service', () => {
  beforeEach(() => jest.resetModules());

  describe('send', () => {
    it('should skip send if FURY env variable is not truthy', () => {
      mockEnv({ FURY: false });
      const { assertStatsdNotCalled } = mockStatsd();

      const { send } = getService();

      send(key, req);

      assertStatsdNotCalled();
    });

    it('should skip send if PRODUCTION env variable is not truthy', () => {
      mockEnv({ PRODUCTION: false });
      const { assertStatsdNotCalled } = mockStatsd();

      const { send } = getService();

      send(key, req);

      assertStatsdNotCalled();
    });

    it('should send with extra tags', () => {
      mockEnv();
      const { assertStatsdCalled } = mockStatsd();

      const { send } = getService();

      const extraTags = {
        someKey: 'some-value',
        someOtherKey: 'some-other-value',
      };
      send(key, req, extraTags);

      assertStatsdCalled({ extraTags });
    });

    it('should send with nullable platform data when req does not have platform object', () => {
      mockEnv();
      const { assertStatsdCalled } = mockStatsd();

      const { send } = getService();

      send(key, {});

      assertStatsdCalled({ platform: null });
    });
  });
});
