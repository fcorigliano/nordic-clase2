const { renderType } = require('@frontend-cookies-manager/common/src/constants/experiments');
const {
  consentBanner,
  defaultConsent: defaultConsentConfiguration,
  defaultConsentFallback: defaultConsentFallbackConfiguration,
} = require('@frontend-cookies-manager/common/src/constants/configurations');
const {
  getRenderTypeExperimentConfig,
} = require('@frontend-cookies-manager/common/src/services/cookies-consent-experiment');
const dpConfig = require('data-privacy-config');

const {
  getUserConsentCookieCategoryCalled,
  getUserConsentCookieCategoryDefaultConfigUsed,
  getUserConsentCookieCategoryDefaultVariantUsed,
  getUserConsentCookieCategoryError,
} = require('./constants/statsd');
const { send: sendStat } = require('./statsd');
const { error: logError } = require('./logger');

const defaultConsentKey = [
  consentBanner,
  defaultConsentConfiguration,
].join('.');

const defaultConsentFallbackKey = [
  consentBanner,
  defaultConsentFallbackConfiguration,
].join('.');

const getDefaultConsentCookieCategory = ({ consentConfig, categoryKey = '' }) => {
  const defaultConsentConfig = consentConfig || {};

  const defaultConsentCategory = defaultConsentConfig.categories
    && defaultConsentConfig.categories[categoryKey];

  if (typeof defaultConsentCategory === 'boolean') {
    return defaultConsentCategory;
  }

  if (typeof defaultConsentConfig.value === 'boolean') {
    return defaultConsentConfig.value;
  }

  return undefined;
};

const getDefaultCategoryValueFromConfig = ({ req, configDefaultConsentKey, categoryKey }) => {
  const defaultConsentConfig = dpConfig.getValue({
    key: configDefaultConsentKey,
    req,
  });

  const defaultConsentValue = getDefaultConsentCookieCategory({
    consentConfig: defaultConsentConfig,
    categoryKey,
  });

  return defaultConsentValue;
};

const getDefaultVariantConsent = ({ req }) => {
  const renderTypeExperimentConfig = getRenderTypeExperimentConfig({
    platform: req.platform,
    headers: req.headers,
    cookies: req.cookies,
    req,
  });

  return !!renderType.variantDefaultConsent[renderTypeExperimentConfig && renderTypeExperimentConfig.variant];
};

const getUserConsentCookieCategory = (req, promise) => (categoryKey) => promise
  .then(preferences => {
    const withPreferences = !!preferences;
    sendStat(getUserConsentCookieCategoryCalled, req, { categoryKey, withPreferences });

    if (withPreferences) {
      const value = preferences.categories[categoryKey];
      if (typeof value === 'boolean') {
        return value;
      }
    } else {
      const defaultConsentFallback = getDefaultCategoryValueFromConfig({
        req,
        configDefaultConsentKey: defaultConsentFallbackKey,
        categoryKey,
      });

      if (typeof defaultConsentFallback === 'boolean') {
        return defaultConsentFallback;
      }
    }

    const defaultConsent = getDefaultCategoryValueFromConfig({
      req,
      configDefaultConsentKey: defaultConsentKey,
      categoryKey,
    });

    if (typeof defaultConsent === 'boolean') {
      sendStat(getUserConsentCookieCategoryDefaultConfigUsed, req, { categoryKey, withPreferences });
      return defaultConsent;
    }

    sendStat(getUserConsentCookieCategoryDefaultVariantUsed, req, { categoryKey, withPreferences });
    return getDefaultVariantConsent({ req });
  }).catch(error => {
    sendStat(getUserConsentCookieCategoryError, req, { categoryKey });
    logError('Error getting user consent cookie category', {
      req,
      error,
    });

    return false;
  });

module.exports = {
  getUserConsentCookieCategory,
};
