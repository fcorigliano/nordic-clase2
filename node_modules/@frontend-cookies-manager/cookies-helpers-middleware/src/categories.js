const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const buildFlowStarterContext = require('frontend-restclient/src/build-flow-context');

const {
  PERSONAL_DATA_PREFERENCES_DEFAULT_ENVIRONMENT_NAME: DEFAULT_ENVIRONMENT_NAME,
} = require('./constants/environment');
const { categoriesProperty } = require('./constants/namespaces');
const { categories: requestConstants } = require('./constants/requests');
const { cookiesCategoriesAPIError } = require('./constants/statsd');
const { getPersonalDataPreferencesUrls } = require('./personal-data-preferences');
const { send: sendStat } = require('./statsd');
const { error: logError } = require('./logger');

const clientInstance = restClient(requestConstants.restClientConfig);

const cache = {};

const getCategories = ({ environmentName, platformId, siteId, domain, req, isCurrentRequest }) => {
  cache[environmentName][platformId][siteId][domain].hitCache = false;

  const { categories: categoriesUrl } = getPersonalDataPreferencesUrls(environmentName);

  // Copying only request data that we need to
  // do not keep in memory the entire request
  const requestData = !isCurrentRequest
    ? req
    : {
      platform: req.platform,
    };

  const promise = clientInstance
    .get(categoriesUrl, {
      params: {
        platform_id: platformId,
        site_id: siteId,
        domain,
      },
      context: isCurrentRequest
        ? buildRestClientContext(req)
        : buildFlowStarterContext(),
    })
    .then((response) => {
      cache[environmentName][platformId][siteId][domain].promise = promise;
      setTimeout(() => {
        if (cache[environmentName][platformId][siteId][domain].hitCache) {
          getCategories({ environmentName, platformId, siteId, domain, req: requestData, isCurrentRequest: false });
        } else {
          delete cache[environmentName][platformId][siteId][domain];
        }
      }, requestConstants.scheduleTimeWindow);
      return response.data[categoriesProperty];
    })
    .catch((error) => {
      sendStat(cookiesCategoriesAPIError, requestData);
      logError('Error getting cookies preferences from API', {
        req,
        error,
      });
      setTimeout(
        () => getCategories({ environmentName, platformId, siteId, domain, req: requestData, isCurrentRequest: false }),
        requestConstants.errorTimeWindow,
      );

      throw error;
    });

  return promise;
};

const get = ({ environmentName = DEFAULT_ENVIRONMENT_NAME, platformId, siteId, domain, req }) => {
  if (!cache[environmentName]) {
    cache[environmentName] = {};
  }

  if (!cache[environmentName][platformId]) {
    cache[environmentName][platformId] = {};
  }

  if (!cache[environmentName][platformId][siteId]) {
    cache[environmentName][platformId][siteId] = {};
  }

  if (!cache[environmentName][platformId][siteId][domain]) {
    cache[environmentName][platformId][siteId][domain] = {};
  } else {
    cache[environmentName][platformId][siteId][domain].hitCache = true;
  }

  if (!cache[environmentName][platformId][siteId][domain].promise) {
    cache[environmentName][platformId][siteId][domain].promise = getCategories({
      environmentName,
      platformId,
      siteId,
      domain,
      req,
      isCurrentRequest: true,
    });
  }

  return cache[environmentName][platformId][siteId][domain].promise;
};

module.exports = {
  get,
};
