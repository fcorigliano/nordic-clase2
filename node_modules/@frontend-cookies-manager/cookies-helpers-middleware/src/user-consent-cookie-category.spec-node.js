/* eslint-disable max-len */
const {
  consentBanner,
  defaultConsent: defaultConsentConfiguration,
  defaultConsentFallback: defaultConsentFallbackConfiguration,
} = require('@frontend-cookies-manager/common/src/constants/configurations');

const getModule = () => require('./user-consent-cookie-category');

const {
  getUserConsentCookieCategoryCalled,
  getUserConsentCookieCategoryDefaultConfigUsed,
  getUserConsentCookieCategoryDefaultVariantUsed,
  getUserConsentCookieCategoryError,
} = require('./constants/statsd');

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
  headers: {
    'some-header-key': 'some-header-value',
  },
  cookies: {
    'some-cookie-key': 'some-cookie-value',
  },
};

const category = 'some-category-key';

const matricTags = { categoryKey: category };

const variantKey = 'some-variant-key';

const defaultConsentKey = [
  consentBanner,
  defaultConsentConfiguration,
].join('.');

const defaultConsentFallbackKey = [
  consentBanner,
  defaultConsentFallbackConfiguration,
].join('.');

const mockDpConfigService = (...results) => {
  const getValue = jest.fn();

  if (results.length === 0) results[0] = null;

  results.forEach(result => getValue.mockReturnValueOnce(result));

  jest.doMock('data-privacy-config', () => ({
    getValue,
  }));

  const assertDpConfigCalled = ({ key, nthCall = 1 }) => {
    expect(getValue).toHaveBeenNthCalledWith(nthCall, {
      key,
      req,
    });
  };

  const assertDpConfigNotCalled = ({ key, nthCall = 1 }) => {
    expect(getValue).not.toHaveBeenNthCalledWith(nthCall, {
      key,
      req,
    });
  };

  return {
    assertDpConfigCalled,
    assertDpConfigNotCalled,
  };
};

const mockCookiesConsentExperimentService = ({ result }) => {
  const getRenderTypeExperimentConfig = jest.fn().mockReturnValue(result);
  jest.doMock('@frontend-cookies-manager/common/src/services/cookies-consent-experiment', () => ({
    getRenderTypeExperimentConfig,
  }));

  const assertCookiesConsentExperimentCalled = () => {
    expect(getRenderTypeExperimentConfig).toHaveBeenCalledWith({
      platform: req.platform,
      headers: req.headers,
      cookies: req.cookies,
      req,
    });
  };

  return {
    assertCookiesConsentExperimentCalled,
  };
};

const mockRenderTypeConstant = ({ variantDefaultConsent }) => jest
  .doMock('@frontend-cookies-manager/common/src/constants/experiments', () => ({
    renderType: {
      variantDefaultConsent: {
        [variantKey]: variantDefaultConsent,
      },
    },
  }));

const mockStatsd = () => {
  const send = jest.fn();
  jest.doMock('./statsd', () => ({ send }));

  const assertCalled = ({ key, nthCall = 1, tags }) => {
    expect(send).toHaveBeenNthCalledWith(nthCall, key, req, tags);
  };

  return {
    assertCalled,
  };
};

const mockLogger = () => {
  const errorMock = jest.fn();
  jest.doMock('./logger', () => ({ error: errorMock }));

  const assertCalled = (error) => {
    expect(errorMock).toHaveBeenCalledWith('Error getting user consent cookie category', {
      req,
      error,
    });
  };

  return {
    assertCalled,
  };
};

describe('User consent cookie category service', () => {
  beforeEach(() => jest.resetModules());

  describe('getUserConsentCookieCategory', () => {
    it('should return false consent if preferences promise is rejected', () => {
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      const { assertCalled: assertCalledLogger } = mockLogger();
      const { getUserConsentCookieCategory } = getModule();
      const error = 'some error';
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.reject(error));
      return userConsentCookieCategory(category).then(consent => {
        assertCalledStatsd({ key: getUserConsentCookieCategoryError, tags: matricTags });
        assertCalledLogger(error);
        return expect(consent).toBe(false);
      });
    });

    it('should return default fallback value from config if preferences promise is empty and not exists categories key in fallback config', () => {
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      const { assertDpConfigCalled, assertDpConfigNotCalled } = mockDpConfigService({
        value: false,
      });

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve(null));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertDpConfigNotCalled({ key: defaultConsentKey });
          assertDpConfigCalled({ key: defaultConsentFallbackKey });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, tags: { withPreferences: false, ...matricTags } });
        });
    });

    it('should return default fallback value from config if preferences promise is empty and not exists category key in fallback config', () => {
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      const { assertDpConfigCalled, assertDpConfigNotCalled } = mockDpConfigService({
        value: false,
        categories: {
          anotherCategoryKey: true,
        },
      });

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve(null));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertDpConfigNotCalled({ key: defaultConsentKey });
          assertDpConfigCalled({ key: defaultConsentFallbackKey });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, tags: { withPreferences: false, ...matricTags } });
        });
    });

    it('should return default fallback category value if preferences promise is empty and exists category fallback value', () => {
      const { assertDpConfigCalled, assertDpConfigNotCalled } = mockDpConfigService({
        value: false,
        categories: {
          [category]: true,
        },
      });
      const { assertCalled: assertCalledStatsd } = mockStatsd();

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve(null));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(true);
          assertDpConfigNotCalled({ key: defaultConsentKey });
          assertDpConfigCalled({ key: defaultConsentFallbackKey });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, tags: { withPreferences: false, ...matricTags } });
        });
    });

    it('should return default category value if preferences promise is empty and not exists fallback config', () => {
      const { assertDpConfigCalled } = mockDpConfigService(
        null,
        {
          value: false,
          categories: {
            [category]: true,
          },
        },
      );
      const { assertCalled: assertCalledStatsd } = mockStatsd();

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve(null));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(true);
          assertDpConfigCalled({ key: defaultConsentFallbackKey, nthCall: 1 });
          assertDpConfigCalled({ key: defaultConsentKey, nthCall: 2 });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: false, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultConfigUsed, nthCall: 2, tags: { withPreferences: false, ...matricTags } });
        });
    });

    it('should return category user preferences for true value', () => {
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: true,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(true);
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return category user preferences for false value', () => {
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      const { getUserConsentCookieCategory } = getModule();

      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: false,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return true configuration default value', () => {
      const { assertDpConfigCalled } = mockDpConfigService({
        value: true,
      });
      const { assertCalled: assertCalledStatsd } = mockStatsd();

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: null,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(true);
          assertDpConfigCalled({ key: defaultConsentKey });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultConfigUsed, nthCall: 2, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return false configuration default value', () => {
      const { assertDpConfigCalled } = mockDpConfigService({
        value: false,
      });
      const { assertCalled: assertCalledStatsd } = mockStatsd();

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: null,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertDpConfigCalled({ key: defaultConsentKey });
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultConfigUsed, nthCall: 2, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return true category default value', () => {
      const { assertDpConfigCalled } = mockDpConfigService();
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: variantKey,
        },
      });
      mockRenderTypeConstant({ variantDefaultConsent: true });
      const { assertCalled: assertCalledStatsd } = mockStatsd();

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: null,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(true);
          assertDpConfigCalled({ key: defaultConsentKey });
          assertCookiesConsentExperimentCalled();
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultVariantUsed, nthCall: 2, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return false category default value', () => {
      const { assertDpConfigCalled } = mockDpConfigService();
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: variantKey,
        },
      });
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      mockRenderTypeConstant({ variantDefaultConsent: false });

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: null,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertDpConfigCalled({ key: defaultConsentKey });
          assertCookiesConsentExperimentCalled();
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultVariantUsed, nthCall: 2, tags: { withPreferences: true, ...matricTags } });
        });
    });

    it('should return false for unknown variant', () => {
      const { assertDpConfigCalled } = mockDpConfigService();
      const { assertCookiesConsentExperimentCalled } = mockCookiesConsentExperimentService({
        result: {
          variant: `${variantKey}-modified`,
        },
      });
      const { assertCalled: assertCalledStatsd } = mockStatsd();
      mockRenderTypeConstant({ variantDefaultConsent: true });

      const { getUserConsentCookieCategory } = getModule();
      const userConsentCookieCategory = getUserConsentCookieCategory(req, Promise.resolve({
        categories: {
          [category]: null,
        },
      }));
      return userConsentCookieCategory(category)
        .then(consent => {
          expect(consent).toBe(false);
          assertDpConfigCalled({ key: defaultConsentKey });
          assertCookiesConsentExperimentCalled();
          assertCalledStatsd({ key: getUserConsentCookieCategoryCalled, nthCall: 1, tags: { withPreferences: true, ...matricTags } });
          assertCalledStatsd({ key: getUserConsentCookieCategoryDefaultVariantUsed, nthCall: 2, tags: { withPreferences: true, ...matricTags } });
        });
    });
  });
});
