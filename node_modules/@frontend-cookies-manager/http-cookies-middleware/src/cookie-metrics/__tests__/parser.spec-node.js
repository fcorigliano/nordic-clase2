jest.mock('../../../package.json', () => ({ version: '1.0.0-test.0' }));
const {
  prepareClientInfoData,
  prepareTagsData,
  prepareCookieData,
} = require('../parser');

describe('Parser', () => {
  test('prepareClientInfoData', () => {
    const client = prepareClientInfoData();
    expect(client).toMatchSnapshot();
  });

  test('prepareTagsData', () => {
    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    const tags = prepareTagsData(req);
    expect(tags).toHaveProperty('application');
    expect(tags).toHaveProperty('device');
    expect(tags).toHaveProperty('platform');
    expect(tags).toHaveProperty('site');
    expect(tags).toHaveProperty('webview');
  });

  test('prepareTagsData throw error platform', () => {
    const req = {
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    expect(() => {
      prepareTagsData(req);
    }).toThrow('Platform detection missing');
  });

  test('prepareTagsData throw error device', () => {
    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
    };

    expect(() => {
      prepareTagsData(req);
    }).toThrow('Device detection missing');
  });

  test('prepareCookieData', () => {
    const cookies = [
      '',
      'Path=/',
      'foo=bar; Path=/; HttpOnly',
      'security=yes; Path=/; HttpOnly; Allow; ;',
      'fb_ga=23567; max-age=2345678; Secure; Valid',
      'lucy=abc123; max-age=2345678',
      'ml=no; max-age=abc; Secure',
      'callme=no; Secure=yes',
      'auth=yes; Path=/; Secure; SameSite',
      'rememberme=1; Path=/; Expires=Fri, 19 Feb 2021 14:42:43 GMT; HttpOnly; Secure; SameSite=None',
    ];
    const cookie = prepareCookieData(cookies);

    expect(cookie).toMatchSnapshot();
  });

  test('prepareCookieData one cookie', () => {
    const cookies = [
      'rememberme=1; Path=/; Expires=Fri, 19 Feb 2021 14:42:43 GMT; HttpOnly; Secure; SameSite=None',
    ];
    const cookie = prepareCookieData(cookies);

    expect(cookie).toEqual([{
      domain: null,
      expires: 'Fri, 19 Feb 2021 14:42:43 GMT',
      'max-age': null,
      name: 'rememberme',
      path: '/',
      samesite: 'None',
      secure: true,
      'unknown-metadata': ' HttpOnly',
    }]);
  });

  test('prepareCookieData empty cookies', () => {
    const cookies = [];
    const cookie = prepareCookieData(cookies);

    expect(cookie.length).toEqual(0);
  });
});
