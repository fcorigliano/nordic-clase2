jest.mock('../../../package.json', () => ({ version: '1.0.0-test.0' }));

const mockAppName = () => {
  process.env.APPLICATION = 'app-demo';
};

const mockConfig = (configMock) => {
  jest.doMock('data-privacy-config', () => ({ getValue: configMock }));

  const assertCalled = () => {
    expect(configMock).toHaveBeenCalled();
  };

  return {
    assertCalled,
  };
};

const mockTrafficControl = (value) => {
  const trafficControlMock = jest.fn().mockReturnValue(value);
  jest.doMock('../traffic-control', () => ({ trafficControl: trafficControlMock }));

  const assertCalled = () => {
    expect(trafficControlMock).toHaveBeenCalled();
  };

  const assertNotCalled = () => {
    expect(trafficControlMock).not.toHaveBeenCalled();
  };

  return {
    assertCalled,
    assertNotCalled,
  };
};

const mockResponse = (data) => {
  const mockEventOn = jest.fn();
  const res = {
    on: mockEventOn,
    ...data,
  };

  const assertCalled = () => {
    expect(mockEventOn).toHaveBeenCalled();
  };

  const assertNotCalled = () => {
    expect(mockEventOn).not.toHaveBeenCalled();
  };

  return {
    assertCalled,
    assertNotCalled,
    res,
  };
};

const mockMetrics = () => {
  const recordMetricMock = jest.fn();
  jest.doMock('../buffer-metrics', () => ({ recordMetric: recordMetricMock }));

  const assertMetricCalled = () => {
    expect(recordMetricMock).toHaveBeenCalled();
  };

  const assertMetricNotCalled = () => {
    expect(recordMetricMock).not.toHaveBeenCalled();
  };

  const getCallbacks = (id = 0) => recordMetricMock.mock.calls[id];

  return {
    assertMetricCalled,
    assertMetricNotCalled,
    recordMetricMock,
    getCallbacks,
  };
};

const mockModule = () => {
  // eslint-disable-next-line global-require
  const { sendCookieMetrics, cookieMetricsMiddleware } = require('../index');

  return {
    cookieMetricsMiddleware,
    sendCookieMetrics,
  };
};

describe('cookie Metrics Middleware', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.resetAllMocks();
  });

  test('cookieMetricsMiddleware true', (done) => {
    const {
      assertCalled: assertResponseOn,
      res,
    } = mockResponse();

    const {
      assertCalled: assertTrafficControl,
    } = mockTrafficControl(true);

    const {
      cookieMetricsMiddleware,
    } = mockModule();

    cookieMetricsMiddleware({}, res, () => {
      assertResponseOn();
      assertTrafficControl();
      done();
    });
  });

  test('cookieMetricsMiddleware false', (done) => {
    const {
      assertNotCalled: assertResponseOn,
      res,
    } = mockResponse();

    const {
      assertCalled: assertTrafficControl,
    } = mockTrafficControl(false);

    const {
      cookieMetricsMiddleware,
    } = mockModule();

    cookieMetricsMiddleware({}, res, () => {
      assertResponseOn();
      assertTrafficControl();
      done();
    });
  });
});

describe('Send cookie metrics', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.resetAllMocks();
  });

  test('sendCookieMetrics', () => {
    mockAppName();

    const configMock = jest.fn()
      .mockReturnValueOnce({ bufferSize: 5 })
      .mockReturnValueOnce({ flushTime: 10 });
    const {
      assertCalled,
    } = mockConfig(configMock);

    const {
      assertMetricCalled,
      getCallbacks,
    } = mockMetrics();

    const {
      sendCookieMetrics,
    } = mockModule();

    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    const res = {
      getHeader: () => ([
        'lucy=abc123; max-age=2345678',
        'ml=no; max-age=abc; Secure',
        'rememberme=1; Path=/; Expires=Fri, 19 Feb 2021 14:42:43 GMT; HttpOnly; Secure; SameSite=None',
      ]),
    };

    sendCookieMetrics(req, res);

    assertCalled();
    assertMetricCalled();

    expect(getCallbacks()).toMatchSnapshot();
  });

  test('sendCookieMetrics without config', () => {
    mockAppName();

    const configMock = jest.fn()
      .mockReturnValueOnce(null)
      .mockReturnValueOnce(null);

    const {
      assertCalled,
    } = mockConfig(configMock);

    const {
      assertMetricCalled,
      getCallbacks,
    } = mockMetrics();

    const {
      sendCookieMetrics,
    } = mockModule();

    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    const res = {
      getHeader: () => ([
        'lucy=abc123; max-age=2345678',
        'ml=no; max-age=abc; Secure',
        'rememberme=1; Path=/; Expires=Fri, 19 Feb 2021 14:42:43 GMT; HttpOnly; Secure; SameSite=None',
      ]),
    };

    sendCookieMetrics(req, res);

    assertCalled();
    assertMetricCalled();

    expect(getCallbacks()).toMatchSnapshot();
  });

  test('sendCookieMetrics with string cookie', () => {
    mockAppName();

    const configMock = jest.fn()
      .mockReturnValueOnce({ bufferSize: 5 })
      .mockReturnValueOnce({ flushTime: 10 });
    const {
      assertCalled,
    } = mockConfig(configMock);

    const {
      assertMetricCalled,
      getCallbacks,
    } = mockMetrics();

    const {
      sendCookieMetrics,
    } = mockModule();

    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    const res = {
      getHeader: () => 'rememberme=1; Path=/; Expires=Fri, 19 Feb 2021 14:42:43 GMT; HttpOnly; Secure; SameSite=None',
    };

    sendCookieMetrics(req, res);

    assertCalled();
    assertMetricCalled();

    expect(getCallbacks()).toMatchSnapshot();
  });

  test('not send Cookie Metrics without cookies', () => {
    const {
      assertMetricNotCalled,
    } = mockMetrics();

    const {
      sendCookieMetrics,
    } = mockModule();

    const req = {
      platform: {
        id: 'ml',
        siteId: 'mla',
      },
      device: {
        type: 'desktop',
        webView: false,
      },
    };

    const res = {
      getHeader: () => undefined,
    };

    sendCookieMetrics(req, res);

    assertMetricNotCalled();
  });
});
