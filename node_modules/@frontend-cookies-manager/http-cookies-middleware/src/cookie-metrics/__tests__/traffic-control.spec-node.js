// eslint-disable-next-line global-require
const getModule = () => require('../traffic-control');

const appName = 'demo-app';
const feConfigEnvironment = 'some-fe-config-environment';

const mockConfig = (config) => {
  const returnValue = config === null
    ? null
    : {
      blacklist: [],
      bufferSize: 500,
      flushTime: 1000,
      percent: 100,
      ...config,
    };

  const configGetMock = jest.fn().mockReturnValue(returnValue);
  jest.doMock('data-privacy-config', () => ({ getValue: configGetMock }));

  const assert = ({ req }) => {
    expect(configGetMock).toBeCalledWith({
      key: 'httpCookies',
      req,
    });
  };

  return {
    assert,
  };
};

const webView = true;

describe('Traffic Control', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.restoreAllMocks();
  });

  test('TrafficControl return true - successful path with d2id cookie', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLA',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    const {
      assert,
    } = mockConfig();

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toEqual(true);

    assert({ req });
  });

  test('TrafficControl return true - successful path with d2id header', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLA',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      headers: {
        'x-d2id': 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    const {
      assert,
    } = mockConfig();

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toEqual(true);

    assert({ req });
  });

  test('should return null on error', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLA',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      headers: {
        'x-d2id': 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    const configGetMock = jest.fn().mockImplementation(() => {
      throw new Error();
    });
    jest.doMock('data-privacy-config', () => ({ getValue: configGetMock }));

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();

    expect(configGetMock).toBeCalledWith({
      key: 'httpCookies',
      req,
    });
  });

  test('Blacklist app returns null ', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLB',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    process.env.APPLICATION = appName;

    const { assert } = mockConfig({
      blacklist: ['demo-app'],
    });

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
    assert({ req });
  });

  test('No d2id cookie returns null ', () => {
    const platform = {
      id: 'ML',
      siteId: 'MPE',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {},
    };

    const { assert } = mockConfig();

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
    assert({ req });
  });

  test('Percent config is 0 returns null ', () => {
    const platform = {
      id: 'ML',
      siteId: 'MCO',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    const { assert } = mockConfig({
      percent: 0,
    });

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
    assert({ req });
  });

  test('Cookie percent is 99 and returns true', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLA',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: { _d2id: 'f926a6ae-c503-4615-ad3d-110b6f33a798' },
    };

    const {
      assert,
    } = mockConfig();

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toEqual(true);

    assert({ req });
  });

  test('Cookie percent is 0 and returns true', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLA',
    };
    const deviceType = 'desktop';
    const req = {
      platform,
      device: {
        type: deviceType,
        webView,
      },
      cookies: { _d2id: 'f926c6fe-c503-9685-ff3d-990f6f99f798' },
    };

    const {
      assert,
    } = mockConfig();

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toEqual(true);

    assert({ req });
  });

  test('Config not found', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLM',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };

    const { assert } = mockConfig(null);

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
    assert({ req });
  });

  test('Platform not found', () => {
    const req = {
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };
    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
  });

  test('Device not found', () => {
    const req = {
      platform: { id: 'ML', siteId: 'MLA' },
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-111b6f33a696',
      },
    };
    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
  });

  test('Middleware are shutdown', () => {
    const req = { cookies: {} };
    const response = getModule().trafficControl(req);

    expect(response).toBeNull();
  });

  test('Cookies not found', () => {
    const req = {
      platform: { id: 'ML', siteId: 'MLA' },
      device: {
        type: 'desktop',
        webView,
      },
      cookies: {},
    };
    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeNull();
  });

  test('Your percent is above than 30 returns null', () => {
    const platform = {
      id: 'ML',
      siteId: 'MLU',
    };
    const req = {
      platform,
      device: {
        type: 'desktop',
        webView,
      },
      cookies: { _d2id: 'f926b6fe-c503-9685-ff3d-990f6f99f798' },
    };

    const { assert } = mockConfig({
      percent: 25,
    });

    const response = getModule().trafficControl(req, feConfigEnvironment);

    expect(response).toBeFalsy();

    assert({ req });
  });
});

describe('Calculate Percent', () => {
  test('CalculatePercent is 10', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926a6ae-a503-4315-ad0d-100b6f33a600',
      },
    });
    expect(qualifiedUser).toEqual(10);
  });

  test('CalculatePercent is 37', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926a6ae-c503-4615-ad3d-110b6f33a798',
      },
    });
    expect(qualifiedUser).toEqual(37);
  });

  test('CalculatePercent is 99', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926b6fe-c503-9685-ff3d-990f6f99f798',
      },
    });
    expect(qualifiedUser).toEqual(99);
  });

  test('CalculatePercent is 0', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926c6fe-c503-9685-ff3d-990f6f99f798',
      },
    });
    expect(qualifiedUser).toEqual(0);
  });

  test('CalculatePercent is 1', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926d6fe-c503-9685-ff3d-990f6f99f798',
      },
    });
    expect(qualifiedUser).toEqual(1);
  });

  test('CalculatePercent is 2', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926e6fe-c503-9685-ff3d-990f6f99f798',
      },
    });
    expect(qualifiedUser).toEqual(2);
  });

  test('CalculatePercent is 2 with "-n" suffix', () => {
    const qualifiedUser = getModule().calculatePercent({
      cookies: {
        _d2id: 'f926e6fe-c503-9685-ff3d-990f6f99f798-n',
      },
    });
    expect(qualifiedUser).toEqual(2);
  });

  test('CalculatePercent is null - _d2id not exists', () => {
    const qualifiedUser = getModule().calculatePercent({});
    expect(qualifiedUser).toBeNull();
  });
});
