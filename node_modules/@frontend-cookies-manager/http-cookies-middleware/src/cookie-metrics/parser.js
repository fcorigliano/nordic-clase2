const { statsd, applicationName } = require('./config');
const { version } = require('../../package.json');

const getSingleValue = (values) => {
  if (values.length !== 1 || !values[0]) {
    throw new Error();
  }
  return values[0];
};

const metadata = {
  path: getSingleValue,
  domain: getSingleValue,
  expires: getSingleValue,
  samesite: getSingleValue,
  'max-age': (values) => {
    const parsed = parseInt(getSingleValue(values), 10);
    if (Number.isNaN(parsed)) {
      throw new Error();
    }
    return parsed;
  },
  secure: (values) => {
    if (values.length) {
      throw new Error();
    }
    return true;
  },
};

const addToUnknownData = (data, metadataString) => {
  data['unknown-metadata'] = `${(data['unknown-metadata'] ? `${data['unknown-metadata']};` : '')}${metadataString}`;
};

const getCookieData = (cookieString) => {
  if (!cookieString) {
    return null;
  }

  const data = cookieString
    .split(';')
    .reduce((temporalData, value, index) => {
      const trimmedValue = value.trim();

      // discard empty parts
      if (!trimmedValue) {
        return temporalData;
      }

      const assignmentParts = trimmedValue
        .split('=')
        .map((part) => part.trim());

      const key = assignmentParts[0];

      if (!index) {
        // Cookie key = cookie value
        if (key && assignmentParts.length === 2) {
          temporalData.name = key;
        }
        return temporalData;
      }

      const lowercaseKey = key.toLowerCase();
      const metadataFormatter = metadata[lowercaseKey];
      if (metadataFormatter) {
        try {
          temporalData[lowercaseKey] = metadataFormatter(assignmentParts.slice(1));
        } catch (e) {
          addToUnknownData(temporalData, value);
        }
      } else {
        addToUnknownData(temporalData, value);
      }

      return temporalData;
    }, {
      name: null,
      path: null,
      domain: null,
      'max-age': null,
      expires: null,
      samesite: null,
      secure: null,
      'unknown-metadata': null,
    });

  return data.name
    ? data
    : null;
};

const prepareCookieData = (cookies = []) => cookies.map((cookie) => (getCookieData(cookie))).filter((cookie) => cookie);

const prepareTagsData = (req) => {
  if (!req.platform) {
    statsd('platform.failed', { application: applicationName });
    throw new Error('Platform detection missing');
  }

  if (!req.device) {
    statsd('device.failed', { application: applicationName });
    throw new Error('Device detection missing');
  }

  return {
    application: applicationName,
    platform: req.platform.id,
    site: req.platform.siteId,
    device: req.device.type,
    webview: req.device.webView,
  };
};

const prepareClientInfoData = () => ({
  name: 'http-cookies',
  version,
});

module.exports = {
  prepareClientInfoData,
  prepareTagsData,
  prepareCookieData,
};
