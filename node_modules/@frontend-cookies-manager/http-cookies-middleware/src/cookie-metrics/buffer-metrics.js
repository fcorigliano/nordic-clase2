const restClient = require('frontend-restclient');
const { statsd } = require('./config');

const buffer = {};
const endpointMetricsURL = '/v2/client-cookies';

let request;
const getRestClient = () => (request || restClient({
  baseURL: 'https://events.mercadolibre.com',
  timeout: 5000,
}));

const getKey = (tags) => {
  const {
    application, platform, site, device, webview,
  } = tags;

  if (application && platform && platform && site && device) {
    return `${application}_${platform}_${platform}_${site}_${device}_${webview ? 1 : 0}`;
  }

  throw new Error('some tags are missing');
};

const makeSnapshot = (key) => {
  const snapshot = buffer[key];
  clearTimeout(snapshot.ticker);
  delete buffer[key];
  return snapshot;
};

const send = (key) => {
  const snapshot = makeSnapshot(key);

  const { client, tags, metrics } = snapshot;

  const payload = {
    'client-info': client,
    tags,
    cookies: metrics,
  };

  getRestClient().post(endpointMetricsURL, {
    data: payload,
  }).then(() => {
    statsd('metrics.sent', tags);
  }).catch(() => {
    statsd('metrics.failed', tags);
  });
};

const tryToSend = (key) => {
  if (buffer[key].metrics.length >= buffer[key].bufferSize) {
    send(key);
  }
};

const increment = (key, data) => {
  buffer[key].metrics.push(...data);
  tryToSend(key);
};

const run = (key, flushTime) => {
  buffer[key].ticker = setTimeout(() => {
    send(key);
  }, flushTime);
};

const createBuffer = (key, clientInfo, tags, data, flushTime, bufferSize) => {
  buffer[key] = {
    metrics: data,
    ticker: null,
    tags,
    client: clientInfo,
    bufferSize,
  };

  run(key, flushTime);

  return buffer;
};

const recordMetric = (clientInfo, tags, data, config) => {
  const key = getKey(tags);

  if (buffer[key]) {
    increment(key, data);
  } else {
    createBuffer(key, clientInfo, tags, data, config.flushTime, config.bufferSize);
  }
};

module.exports = {
  recordMetric,
};
