const {
  prepareClientInfoData,
  prepareTagsData,
  prepareCookieData,
} = require('./parser');

const { trafficControl } = require('./traffic-control');
const { recordMetric } = require('./buffer-metrics');
const { getConfig } = require('./config');

const getFlushTime = (req) => {
  const defaultFlushTime = 1000;
  const bufferConfig = getConfig(req) || { flushTime: defaultFlushTime };

  return bufferConfig.flushTime;
};

const getBufferSize = (req) => {
  const defaultBufferSize = 500;
  const bufferConfig = getConfig(req) || { bufferSize: defaultBufferSize };

  return bufferConfig.bufferSize;
};

const sendCookieMetrics = (req, res) => {
  try {
    const cookies = res.getHeader('set-cookie');
    if (!cookies) return;

    const bufferSize = getBufferSize(req);
    const flushTime = getFlushTime(req);
    const clientInfo = prepareClientInfoData();
    const tags = prepareTagsData(req);
    const data = prepareCookieData(Array.isArray(cookies) ? cookies : [cookies]);

    recordMetric(clientInfo, tags, data, { flushTime, bufferSize });
  } catch (e) {
    // mute errors
  }
};

/**
 * Expose middleware
 */
const cookieMetricsMiddleware = function cookieMetricsMiddleware(req, res, next) {
  if (trafficControl(req)) {
    res.on('finish', () => {
      sendCookieMetrics(req, res);
    });
  }

  next();
};

module.exports = {
  cookieMetricsMiddleware,
  sendCookieMetrics,
};
