/**
 * Module dependencies
 */
let domains = require('../config/domains.json');

const { NODE_ENV } = process.env;

// Allow the usage of fake domains but only for development and testing purpose
if (NODE_ENV !== 'production') {
  const devDomains = require('../config/domains-dev.json'); // eslint-disable-line global-require
  domains = domains.concat(devDomains);
}

// Sort domains by domain name desc in order to filter subdomains before
domains = domains.sort((a, b) => b.domain.length - a.domain.length);

/**
 * Temporary store for already detected platforms
 * @type {Map<string, Object>}
 */
const knownPlatforms = new Map();

/**
 * Expose platform
 * Finds and returns a domains object when the given host match with a domain.
 * It should return "undefined" if the domain is not found.
 */
module.exports = (host) => {
  if (!knownPlatforms.has(host)) {
    knownPlatforms.set(host, domains.find(({ domain }) => (host === domain || host.endsWith(`.${domain}`))));
  }

  return knownPlatforms.get(host);
};
