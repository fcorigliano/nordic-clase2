const {
  getHref,
  getPlatformName,
} = require('../../services/ui-navigation');

jest.mock('ui-navigation/config/platforms', () => ({
  'some-platform-name': {
    id: 'some-platform-id',
  },
}));

const defaultCdnLink = 'https://default-cdn-link.com';

jest.mock('../../constants/cdns', () => ({
  CDNS: {
    default: {
      link: 'https://default-cdn-link.com',
    },
  },
}));

describe('Commons', () => {
  describe('ui-navigation service', () => {
    describe('getHref', () => {
      const fileName = 'some-file-name';
      const uiNavigationVersion = 'some-ui-navigation-version';
      const platformName = 'some-platform-name';

      it('should match default cdn url without cdn object', () => {
        const result = getHref(null, fileName, uiNavigationVersion, platformName);

        const expected = `${defaultCdnLink}/frontend-assets/frontend-navigations/ui-navigation/${uiNavigationVersion}/${platformName}/${fileName}`;
        expect(result).toBe(expected);
      });

      it('should match default cdn url with a cdn object without link', () => {
        const cdn = {};
        const result = getHref(cdn, fileName, uiNavigationVersion, platformName);

        const expected = `${defaultCdnLink}/frontend-assets/frontend-navigations/ui-navigation/${uiNavigationVersion}/${platformName}/${fileName}`;
        expect(result).toBe(expected);
      });

      it('should match custom cdn url with a cdn object with link', () => {
        const cdn = {
          link: 'https://some-custom-cdn-link.com',
        };
        const result = getHref(cdn, fileName, uiNavigationVersion, platformName);

        const expected = `${cdn.link}/frontend-assets/frontend-navigations/ui-navigation/${uiNavigationVersion}/${platformName}/${fileName}`;
        expect(result).toBe(expected);
      });
    });

    describe('getPlatformName', () => {
      it('should return the platform name for ML', () => {
        const result = getPlatformName('ML');
        expect(result).toBe('mercadolibre');
      });

      it('should return the platform name for MP', () => {
        const result = getPlatformName('MP');
        expect(result).toBe('mercadopago');
      });

      it('should return the platform name for MS', () => {
        const result = getPlatformName('MS');
        expect(result).toBe('mercadoshops');
      });

      it('should return the platform name for TC', () => {
        const result = getPlatformName('TC');
        expect(result).toBe('tucarro');
      });

      it('should return the platform name for PI', () => {
        const result = getPlatformName('PI');
        expect(result).toBe('portalinmobiliario');
      });

      it('should return the platform name for MT', () => {
        const result = getPlatformName('MT');
        expect(result).toBe('metroscubicos');
      });

      it('should return undefined with non existent platform id', () => {
        const result = getPlatformName('unknown-platform-id');
        expect(result).toBeUndefined();
      });
    });
  });
});
