const { exec } = require('child_process');

const uiNavigationModuleName = 'first-party-web-navigation';

const getUiNavigationVersionsToCheck = (config) => {
  const versions = [];
  if ((((config.configurations) || {}).firstParty || {}).uiNavigationVersion) {
    versions.push({
      scope: 'global',
      version: config.configurations.firstParty.uiNavigationVersion,
    });
  }
  versions.push(...Object.keys(config.platforms || {}).reduce(
    (platformVersions, platform) => {
      if (
        ((config.platforms[platform].configurations || {}).firstParty || {}).uiNavigationVersion
      ) {
        platformVersions.push({
          scope: `platform: ${platform}`,
          version:
            config.platforms[platform].configurations.firstParty.uiNavigationVersion,
        });
      }
      const sitesUiVersions = Object.keys(config.platforms[platform].sites || {}).reduce((sitesVersion, site) => {
        if ((((config.platforms[platform].sites || {})[site] || {}).firstParty || {}).uiNavigationVersion) {
          sitesVersion.push({
            scope: `platform: ${platform}, site: ${site}`,
            version:
              config.platforms[platform].sites[site].uiNavigationVersion,
          });
        }
        return sitesVersion;
      }, []);
      // eslint-disable-next-line no-param-reassign
      platformVersions = platformVersions.concat(sitesUiVersions);
      return platformVersions;
    },
    [],
  ));
  return versions;
};

const validateVersionWithNpmCli = (moduleName, data) => new Promise((resolve, reject) => {
  exec(`npm view ${moduleName}@${data.version} version`, (error, stdout, stderr) => {
    if (error) {
      reject(error);
      return;
    }
    if (stderr) {
      reject(stderr);
      return;
    }
    if (stdout.trim() === data.version) {
      resolve(data.version);
    } else {
      reject(new Error(`${moduleName} verification failed (not published) in scope ${data.scope} : v${data.version}`));
    }
  });
});

test('Should check if the "ui-navigation" version saved in config file is released', async () => {
  const config = require('../config');
  const versionsToCheck = getUiNavigationVersionsToCheck(config);
  const promises = await Promise.all(
    versionsToCheck.map(data => validateVersionWithNpmCli(uiNavigationModuleName, data)),
  );
  expect(promises.length).toBe(versionsToCheck.length);
});
