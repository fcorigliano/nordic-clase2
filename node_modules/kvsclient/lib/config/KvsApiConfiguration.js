const util = require('util');
const env = require('frontend-env');
const _ = require('lodash');
const querystring = require('query-string');
const log = require('../logger');
const config = require('./config.json');
const Constants = require('../kvsclient/constants/Constants');

if (_.includes(['test', 'development'], env.NODE_ENV)) {
  env.KEY_VALUE_STORE_MOCK_CONTAINER_END_POINT_READ = 'http://kvstest.mock.com';
  env.KEY_VALUE_STORE_MOCK_CONTAINER_END_POINT_WRITE = 'http://kvstest.mock.com';
  env.KEY_VALUE_STORE_MOCK_CONTAINER_CONTAINER_NAME = 'MOCK_CONTAINER';
}

class KvsApiConfiguration {
  constructor(properties) {
    this._readTimeout = config.restclient.read_timeout;
    this._writeTimeout = config.restclient.write_timeout;
    this._encodingType = Constants.ENCODING_TYPES.NONE;

    if (!_.isNil(properties) && !_.isNil(properties.readTimeout) && parseInt(properties.readTimeout, 10) > 0) {
      this._readTimeout = parseInt(properties.readTimeout, 10);
    }

    if (!_.isNil(properties) && !_.isNil(properties.writeTimeout) && parseInt(properties.writeTimeout, 10) > 0) {
      this._writeTimeout = parseInt(properties.writeTimeout, 10);
    }

    if (!_.isNil(properties) && !_.isNil(properties.encodingType) && Constants.ENCODING_TYPES[properties.encodingType]) {
      this._encodingType = Constants.ENCODING_TYPES[properties.encodingType];
    }
  }

  get readTimeout() {
    return this._readTimeout;
  }

  set readTimeout(readTimeout) {
    if (parseInt(readTimeout, 10) > 0) {
      this._readTimeout = parseInt(readTimeout, 10);
    }
  }

  get writeTimeout() {
    return this._writeTimeout;
  }

  set writeTimeout(writeTimeout) {
    if (parseInt(writeTimeout, 10) > 0) {
      this._writeTimeout = parseInt(writeTimeout, 10);
    }
  }

  getTimeout(method) {
    switch (method) {
      case Constants.METHODS.READ:
        return this.readTimeout;
      case Constants.METHODS.WRITE:
        return this.writeTimeout;
      default:
        throw new Error(`Invalid method: ${method}`);
    }
  }

  get encodingType() {
    return this._encodingType;
  }

  set encodingType(encodingType) {
    if (Constants.ENCODING_TYPES[encodingType]) {
      this._encodingType = Constants.ENCODING_TYPES[encodingType];
    }
  }

  static getBaseUrl(method, container) {
    let endpoint;

    if (!method) {
      throw new Error('Mandatory parameter method can not be null');
    }

    if (!container) {
      throw new Error('Mandatory parameter container can not be null');
    }

    switch (method) {
      case Constants.METHODS.READ:
        endpoint = env[util.format(config.env.read, container)];
        break;
      case Constants.METHODS.WRITE:
        endpoint = env[util.format(config.env.write, container)];
        break;
      default:
        throw new Error(`Invalid method: ${method}`);
    }
    const containerName = env[util.format(config.env.container, container)];
    if (!endpoint || !containerName) {
      log.error(`Cannot find environment info for container ${container}`);
      throw new Error(`Cannot find environment info for container ${container}`);
    }
    return endpoint;
  }

  static getQueryString(operationType, keys) {
    const queryString = {
      operationType,
    };

    if (env.TEST && !_.isNil(config.test)) {
      queryString.test_case = config.test.test_case;
    }

    if (!_.isNil(keys)) {
      queryString.keys = keys.join(',');
    }

    return queryString;
  }

  static getUri(container, key, qs) {
    const containerName = env[util.format(config.env.container, container)];

    let uri = `/containers/${containerName}`;
    if (!_.isNil(key)) {
      uri += `/${key}`;
    }

    if (!_.isNil(qs)) {
      uri = `${uri}?${querystring.stringify(qs, {
        skipEmptyString: true,
        skipNull: true,
      })}`;
    }
    return uri;
  }
}

module.exports = KvsApiConfiguration;
