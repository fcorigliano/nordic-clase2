const _ = require('lodash');
const pkg = require('../package.json');
const KvsClient = require('./KvsClient');

class ContainerKvsClient {
  constructor(options = {}) {
    if (!_.isNil(options.delegate) && (typeof options.delegate !== 'object' || options.delegate.constructor.name !== 'KvsClient')) {
      throw new TypeError('You need to specify an instance of KvsClient as delegate');
    } else if (_.isNil(options.container) || typeof options.container !== 'string') {
      throw new TypeError('You need to specify the container to use');
    }
    this._delegate = options.delegate || new KvsClient();
    this._container = options.container;
  }

  get version() {
    return pkg.version;
  }

  static setLogLevel(level) {
    KvsClient.setLogLevel(level);
  }

  get container() {
    return this._container;
  }

  get(key) {
    return this._delegate.get(this._container, key);
  }

  save(item) {
    return this._delegate.save(this._container, item);
  }

  update(item) {
    return this._delegate.update(this._container, item);
  }

  delete(key) {
    return this._delegate.delete(this._container, key);
  }

  batchGet(keys) {
    return this._delegate.batchGet(this._container, keys);
  }

  batchSave(items) {
    return this._delegate.batchSave(this._container, items);
  }

  batchUpdate(items) {
    return this._delegate.batchUpdate(this._container, items);
  }

  batchDelete(keys) {
    return this._delegate.batchDelete(this._container, keys);
  }

  bulkGet(keys) {
    return this._delegate.bulkGet(this._container, keys);
  }

  bulkSave(items) {
    return this._delegate.bulkSave(this._container, items);
  }

  bulkUpdate(items) {
    return this._delegate.bulkUpdate(this._container, items);
  }

  bulkDelete(keys) {
    return this._delegate.bulkDelete(this._container, keys);
  }

  getCounter(key) {
    return this._delegate.getCounter(this._container, key);
  }

  incrementCounter(key, value) {
    return this._delegate.incrementCounter(this._container, key, value);
  }

  decrementCounter(key, value) {
    return this._delegate.decrementCounter(this._container, key, value);
  }

  resetCounter(key) {
    return this._delegate.resetCounter(this._container, key);
  }
}

module.exports = ContainerKvsClient;
