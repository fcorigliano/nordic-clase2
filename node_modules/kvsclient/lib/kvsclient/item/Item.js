const _ = require('lodash');
const JsonUtils = require('../utils/JsonUtils');
const Constants = require('../constants/Constants');

function validateValue(value) {
  if (typeof value === 'string') {
    JsonUtils.toJsonObject(value);
  } else if (typeof value === 'object') {
    JsonUtils.toJsonString(value);
  } else {
    throw new TypeError('Property value should be a valid json');
  }
}

class Item {
  constructor(properties) {
    if (_.isNil(properties)) {
      properties = {};
    }
    this._ttl = properties.ttl ? Number(properties.ttl) : -1;
    this._key = properties.key ? properties.key.toString() : null;
    if (!_.isNil(properties.value)) {
      validateValue(properties.value);
    }
    this._value = properties.value || null;
    this._version = properties.version ? Number(properties.version) : 0;
    if (!_.isNil(properties.error)) {
      properties.error = properties.error.toUpperCase();
      if (properties.error !== Constants.ERROR_TYPES.UNEXPECTED && properties.error !== Constants.ERROR_TYPES.CONFLICT) {
        throw new TypeError('You need to specify a valid error type: UNEXPECTED,CONFLICT');
      }
    }
    this._error = properties.error ? properties.error : null;
  }

  get key() {
    return this._key;
  }

  set key(key) {
    this._key = key ? key.toString() : null;
  }

  get value() {
    if (typeof this._value === 'string') {
      return JsonUtils.toJsonObject(this._value);
    }
    return this._value;
  }

  set value(value) {
    validateValue(value);
    this._value = value;
    return this._value;
  }

  get ttl() {
    return this._ttl;
  }

  set ttl(ttl) {
    this._ttl = _.isNil(ttl) ? null : Number(ttl);
  }

  get version() {
    return this._version;
  }

  set version(version) {
    this._version = _.isNil(version) ? null : Number(version);
  }

  get error() {
    return this._error;
  }

  set error(error) {
    if (!_.isNil(error)) {
      error = error.toString().toUpperCase();
      if (error !== Constants.ERROR_TYPES.UNEXPECTED && error !== Constants.ERROR_TYPES.CONFLICT) {
        throw new TypeError('You need to specify a valid error type: UNEXPECTED,CONFLICT');
      }
      this._error = error;
    }
  }

  hasError() {
    return !_.isNil(this._error);
  }

  getValueAsString() {
    if (typeof this._value === 'string') {
      return this._value;
    }
    return JsonUtils.toJsonString(this._value);
  }
}

module.exports = Item;
