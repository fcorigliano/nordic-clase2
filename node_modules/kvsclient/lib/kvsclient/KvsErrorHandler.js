const HttpStatus = require('http-status-codes');
const JsonUtils = require('./utils/JsonUtils');
const dog = require('./utils/dog');
const log = require('../logger');
const KvsError = require('./errors/KvsError');
const RejectedExecutionError = require('./errors/RejectedExecutionError');

function getErrorCode(error = {}, fallback = '') {
  return (error.response && error.response.data && error.response.data.code) ? error.response.data.code : fallback;
}

function handleKvsGetError(container, key, error) {
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.get', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.get.status', 1, { container, status: error.response.status });
    if (error.response.status !== HttpStatus.NOT_FOUND) {
      dog.recordSimpleMetric('kvsclient.error.get', 1, { container });
      log.error(`Error in kvs-get for item ${key}`, {
        action: 'get',
        result: 'error',
        response: JsonUtils.toJsonString(error.response.data),
      });
      if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
        throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
      } else {
        throw new KvsError(
          `Error in kvs-get for item ${key} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
          getErrorCode(error),
          error.response.status,
        );
      }
    }
  } else {
    dog.recordSimpleMetric('kvsclient.error.get', 1, { container });
    log.error(`Error in kvs-get for item ${key}`, { action: 'get', result: 'error', response: error.message });
    throw new KvsError(
      `Error in kvs-get for item ${key} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsSaveError(container, item, error) {
  dog.recordSimpleMetric('kvsclient.error.save', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.save', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.save.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-save for item ${item.key}`, {
      action: 'save',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });

    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-save for item ${item.key} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-save for item ${item.key}`, {
      action: 'save',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-save for item ${item.key} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsUpdateError(container, item, error) {
  dog.recordSimpleMetric('kvsclient.error.update', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.update', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.update.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-update for item ${item.key}`, {
      action: 'update',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-update for item ${item.key} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-update for item ${item.key}`, {
      action: 'update',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-update for item ${item.key} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsDeleteError(container, key, error) {
  dog.recordSimpleMetric('kvsclient.error.delete', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.delete', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.delete.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-delete for item ${key}`, {
      action: 'delete',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-delete for item ${key} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-delete for item ${key}`, {
      action: 'delete',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-delete for item ${key} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBatchGetError(container, keys, error) {
  dog.recordSimpleMetric('kvsclient.error.batchGet', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.batchGet', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.batchGet.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-batchGet for items ${keys.join()}`, {
      action: 'batchGet',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-batchGet for items ${keys.join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-batchGet for items ${keys.join()}`, {
      action: 'batchGet',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-batchGet for items ${keys.join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBatchSaveError(container, items, error) {
  dog.recordSimpleMetric('kvsclient.error.batchSave', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.batchSave', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.batchSave.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-batchSave for items ${items.getKeys().join()}`, {
      action: 'batchSave',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-batchSave for items ${items.getKeys().join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-batchSave for items ${items.getKeys().join()}`, {
      action: 'batchSave',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-batchSave for items ${items.getKeys().join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBatchUpdateError(container, items, error) {
  dog.recordSimpleMetric('kvsclient.error.batchUpdate', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.batchUpdate', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.batchUpdate.status', 1, {
      container,
      status: error.response.status,
    });
    log.error(`Error in kvs-batchUpdate for items ${items.getKeys().join()}`, {
      action: 'batchUpdate',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-batchUpdate for items ${items.getKeys().join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-batchUpdate for items ${items.getKeys().join()}`, {
      action: 'batchUpdate',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-batchUpdate for items ${items.getKeys().join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBatchDeleteError(container, keys, error) {
  dog.recordSimpleMetric('kvsclient.error.batchDelete', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.batchDelete', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.batchDelete.status', 1, {
      container,
      status: error.response.status,
    });
    log.error(`Error in kvs-batchDelete for items ${keys.join()}`, {
      action: 'batchDelete',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-batchDelete for items ${keys.join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-batchDelete for items ${keys.join()}`, {
      action: 'batchDelete',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-batchDelete for items ${keys.join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBulkGetError(container, keys, error) {
  dog.recordSimpleMetric('kvsclient.error.bulkGet', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.bulkGet', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.bulkGet.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-bulkGet for items ${keys.join()}`, {
      action: 'bulkGet',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-bulkGet for items ${keys.join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-bulkGet for items ${keys.join()}`, {
      action: 'bulkGet',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-bulkGet for items ${keys.join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBulkSaveError(container, items, error) {
  dog.recordSimpleMetric('kvsclient.error.bulkSave', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.bulkSave', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.bulkSave.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-bulkSave for items ${items.getKeys().join()}`, {
      action: 'bulkSave',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-bulkSave for items ${items.getKeys().join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-bulkSave for items ${items.getKeys().join()}`, {
      action: 'bulkSave',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-bulkSave for items ${items.getKeys().join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBulkUpdateError(container, items, error) {
  dog.recordSimpleMetric('kvsclient.error.bulkUpdate', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.bulkUpdate', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.bulkUpdate.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-bulkUpdate for items ${items.getKeys().join()}`, {
      action: 'bulkUpdate',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-bulkUpdate for items ${items.getKeys().join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-bulkUpdate for items ${items.getKeys().join()}`, {
      action: 'bulkUpdate',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-bulkUpdate for items ${items.getKeys().join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}

function handleKvsBulkDeleteError(container, keys, error) {
  dog.recordSimpleMetric('kvsclient.error.bulkDelete', 1, { container });
  if (error.response) {
    dog.recordCompoundMetric('kvsclient.bulkDelete', error.response.duration, { container });
    dog.recordSimpleMetric('kvsclient.bulkDelete.status', 1, { container, status: error.response.status });
    log.error(`Error in kvs-bulkDelete for items ${keys.join()}`, {
      action: 'bulkDelete',
      result: 'error',
      response: JsonUtils.toJsonString(error.response.data),
    });
    if (error.response.status === HttpStatus.TOO_MANY_REQUESTS) {
      throw new RejectedExecutionError(`Container ${container} is over quota`, getErrorCode(error));
    } else {
      throw new KvsError(
        `Error in kvs-bulkDelete for items ${keys.join()} status ${error.response.status} and data ${JsonUtils.toJsonString(error.response.data)}`,
        getErrorCode(error),
        error.response.status,
      );
    }
  } else {
    log.error(`Error in kvs-bulkDelete for items ${keys.join()}`, {
      action: 'bulkDelete',
      result: 'error',
      response: error.message,
    });
    throw new KvsError(
      `Error in kvs-bulkDelete for items ${keys.join()} and data ${error.message}`,
      'internal_server_error',
      HttpStatus.INTERNAL_SERVER_ERROR,
    );
  }
}


exports.handleKvsGetError = handleKvsGetError;
exports.handleKvsSaveError = handleKvsSaveError;
exports.handleKvsUpdateError = handleKvsUpdateError;
exports.handleKvsDeleteError = handleKvsDeleteError;
exports.handleKvsBatchGetError = handleKvsBatchGetError;
exports.handleKvsBatchSaveError = handleKvsBatchSaveError;
exports.handleKvsBatchUpdateError = handleKvsBatchUpdateError;
exports.handleKvsBatchDeleteError = handleKvsBatchDeleteError;
exports.handleKvsBulkGetError = handleKvsBulkGetError;
exports.handleKvsBulkSaveError = handleKvsBulkSaveError;
exports.handleKvsBulkUpdateError = handleKvsBulkUpdateError;
exports.handleKvsBulkDeleteError = handleKvsBulkDeleteError;
exports.getErrorCode = getErrorCode;
