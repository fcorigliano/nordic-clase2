/**
 * The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the same.
 * The unreserved characters ".", "-", "~", and "_" remain the same.
 * The general delimiters "@" and ":" remain the same.
 * The subdelimiters "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", and "=" remain the same.
 * The space character " " is converted into %20.
 * All other characters are converted into one or more bytes using UTF-8 encoding and each byte
 *  is then represented by the 3-character string "%XY", where "XY" is the two-digit, uppercase,
 *  hexadecimal representation of the byte value.
 */

const LOWER_CASE_LETTERS = 'abcdefghijklmnñopqrstuvwxyz';
const UPPER_CASE_LETTERS = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';
const DIGITS = '0123456789';
const UNRESERVED_CHARACTERS = '-._~';
const SUBDELIMITER_CHARACTERS = '!$\'()*,;&=';
const GENERAL_SUBDELIMITER_CHARACTERS = '@:';
const PLUS = '+';
// const SPACE = ' ';
// const ENCODED_SPACE = '%20';

/**
 * Characters that are not escaped.
 */
const SAFE_CHARACTERS = LOWER_CASE_LETTERS
  + UPPER_CASE_LETTERS
  + DIGITS
  + UNRESERVED_CHARACTERS
  + SUBDELIMITER_CHARACTERS
  + GENERAL_SUBDELIMITER_CHARACTERS
  + PLUS;

/**
 * Escapes a char to make it valid for URL.
 * @param c the char to escape.
 * @return the char if it is a safe char or the escaped char otherwise.
 */
function _getEscapedChar(c) {
  if (SAFE_CHARACTERS.indexOf(c) > -1) {
    return c;
  }

  return encodeURIComponent(c).toUpperCase();
}

/**
 * Escapes the key to make it valid for URL.
 * @param key the key to escape.
 * @return the escaped key.
 */
function escape(key) {
  let encodedKey = '';

  for (let i = 0; i < key.length; i++) {
    encodedKey += _getEscapedChar(key[i]);
  }

  return encodedKey;
}

/**
 * Decodes an URL valid key to its original form.
 * @param key the key to decode.
 * @return the decoded key.
 */
function decode(key) {
  return decodeURIComponent(key);
}

module.exports = {
  escape,
  decode,
};
