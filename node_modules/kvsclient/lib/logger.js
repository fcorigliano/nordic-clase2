const { createLogger, format, transports } = require('winston');
const { DEVELOPMENT, TEST } = require('frontend-env');
const pkg = require('../package.json');

const { combine, printf } = format;

const loggerOptions = {
  exitOnError: false,
};

const defaultMessageFormat = printf(({ timestamp, level, message }) => `${timestamp} - ${level}: ${message}`);

const loggerOptionsRewrite = format((info) => {
  const { level, metadata } = info;
  let meta = metadata;

  const formatted = [
    `[src:${pkg.name}]`,
    `[level:${level}]`,
  ];

  if (meta instanceof Error) {
    meta = {
      type: meta.name,
      message: meta.message,
      stack: meta.stack,
    };
  }

  if (Array.isArray(meta)) {
    meta.forEach((m, i) => {
      let value = m.value || m;
      value = typeof value === 'object' ? JSON.stringify(value) : `${value}`;

      const data = {
        key: m.key ? m.key.replace(/[-.:]/g, '_') : i,
        value: value.replace(/[:]/g, '_'),
      };

      formatted.push(`[${data.key}:${data.value}]`);
    });
  } else if (typeof meta === 'object') {
    Object.keys(meta).forEach((k) => {
      const value = typeof meta[k] === 'object' ? JSON.stringify(meta[k]) : `${meta[k]}`;
      formatted.push(`[${k}:${value}]`);
    });
  }

  meta = formatted.join(' ');

  return meta;
});

/* istanbul ignore next */
if (TEST) {
  const path = require('path'); // eslint-disable-line global-require

  loggerOptions.transports = [
    new transports.File({
      filename: path.resolve('./test/out.log'),
      format: combine(
        format.timestamp(),
        defaultMessageFormat,
      ),
    }),
  ];

  loggerOptions.exceptionHandlers = [
    new transports.File({
      filename: path.resolve('./test/exception.log'),
      format: combine(
        format.timestamp(),
        defaultMessageFormat,
      ),
    }),
  ];
} else {
  loggerOptions.transports = [
    new transports.Console({
      format: combine(
        format.timestamp(),
        format.colorize({ all: DEVELOPMENT }),
      ),
    }),
  ];

  loggerOptions.exceptionHandlers = [
    new transports.Console({
      format: combine(
        format.timestamp(),
        format.colorize({ all: DEVELOPMENT }),
      ),
    }),
  ];

  loggerOptions.format = combine(
    format.metadata(),
    loggerOptionsRewrite(),
  );
}

const logger = createLogger(loggerOptions);

let level = 'info';
Object.defineProperty(logger, 'level', {
  get: () => level,
  set: (newLevel) => {
    level = newLevel;
    Object.keys(logger.transports).forEach((t) => {
      logger.transports[t].level = newLevel;
    });
  },
});

logger.level = level;

module.exports = logger;
