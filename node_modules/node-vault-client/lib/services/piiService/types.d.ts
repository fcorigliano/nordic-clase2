import type { Request } from 'express';
interface BaseRetryConfig {
    /**
     * Retry strategy to use.
     *
     * @default 'linear'
     */
    strategy: 'linear' | 'exponential';
    /**
     * Delay between each retry, in milliseconds.
     *
     * @default 20
     */
    delay: number;
    /**
     * Maximum amount of retries.
     *
     * @default 1
     */
    maxRetries: number;
}
export interface LinearRetryConfig extends BaseRetryConfig {
    strategy: 'linear';
}
export interface ExponentialRetryConfig extends BaseRetryConfig {
    strategy: 'exponential';
    /**
     * Exponential factor to use. Each subsequent request will delay
     * the same amount of the previous delay, multiplied by this factor.
     *
     * @example 2
     */
    factor: number;
    /**
     * Maximum delay between each retry.
     * This caps the value produced by the factor param.
     *
     * @example 500
     */
    maxDelay: number;
}
declare type RetryConfig = LinearRetryConfig | ExponentialRetryConfig;
export interface PIIClientConfig {
    /**
     * Amount of time to wait for each request, before cutting the connection.
     *
     * @default 60
     */
    timeout: number;
    /**
     * Retry config to use when making requests to Vault API.
     */
    retry: RetryConfig | false;
    /**
     * Flag which adds the header x-dirty-data to all requests to vault client.
     * Basically, the header tells the vault that it does not matter that there
     * is inconsistent user data, return the information anyway
     */
    isDirty?: boolean;
}
export interface VaultErrorData {
    message: string;
    extensions: {
        code: string;
    };
}
export interface VaultResponseData<T> {
    data: T;
    errors?: VaultErrorData[] | Record<string, unknown>[];
}
export interface PIIServiceParams {
    query: string;
    req?: Request;
    versionId?: string;
    variables?: Record<string, unknown>;
}
export interface PIIServiceConfig {
    token: string;
    restClientConfig: PIIClientConfig;
}
export {};
