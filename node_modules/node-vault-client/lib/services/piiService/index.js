"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _PIIService_client, _PIIService_operationOptions, _PIIService_makeRequest;
Object.defineProperty(exports, "__esModule", { value: true });
const frontend_restclient_1 = __importDefault(require("frontend-restclient"));
const build_context_1 = __importDefault(require("frontend-restclient/src/build-context"));
const build_flow_context_1 = __importDefault(require("frontend-restclient/src/build-flow-context"));
const frontend_env_1 = require("frontend-env");
const retry_1 = __importDefault(require("retry"));
const vaultError_1 = __importDefault(require("./vaultError"));
// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment
const { version } = require('../../../package.json');
const CLIENT_UA = `piivaultclient-node/${version}`;
const shouldRetry = (error) => !(error instanceof vaultError_1.default);
/**
 * Service to get PII info from Vault API v2.
 * Info on API can be found [here](https://sites.google.com/mercadolibre.com/kyc/data-vault)
 */
class PIIService {
    constructor(config) {
        _PIIService_client.set(this, void 0);
        _PIIService_operationOptions.set(this, void 0);
        _PIIService_makeRequest.set(this, void 0);
        __classPrivateFieldSet(this, _PIIService_client, frontend_restclient_1.default({
            timeout: config.restClientConfig.timeout,
            headers: {
                'x-pegasus-token': config.token,
                'user-agent': CLIENT_UA,
                ...config.restClientConfig.isDirty && { 'x-dirty-data': 'true' },
                ...!frontend_env_1.PRODUCTION && { 'x-api-sandbox': 'true' },
            },
        }), "f");
        const { retry: retryConfig } = config.restClientConfig;
        if (retryConfig) {
            const { maxRetries, delay } = retryConfig;
            __classPrivateFieldSet(this, _PIIService_operationOptions, {
                retries: maxRetries,
                factor: retryConfig.strategy === 'exponential' ? retryConfig.factor : 1,
                minTimeout: delay,
                maxTimeout: retryConfig.strategy === 'exponential' ? retryConfig.maxDelay : Infinity,
            }, "f");
        }
        __classPrivateFieldSet(this, _PIIService_makeRequest, this.makeRequest.bind(this), "f");
        this.getData = this.getData.bind(this);
    }
    getData(params) {
        return __classPrivateFieldGet(this, _PIIService_makeRequest, "f").call(this, () => {
            const { query, req, variables, versionId, } = params;
            const context = req ? build_context_1.default(req) : build_flow_context_1.default();
            return __classPrivateFieldGet(this, _PIIService_client, "f").post('/v2/kyc/vault', {
                context,
                retry: false,
                data: {
                    query,
                    ...variables && { variables },
                },
                ...versionId && { headers: { 'x-version-id': versionId } },
            })
                .then((res) => {
                // Vault API return a user or users object, which can be null,
                // depending if we are using multi-get or simple get
                const data = res.data?.data;
                if (res.data.errors && !(data?.user || data?.users)) {
                    throw new vaultError_1.default(res.data.errors[0]);
                }
                return res.data;
            });
        });
    }
    makeRequest(request) {
        if (__classPrivateFieldGet(this, _PIIService_operationOptions, "f")) {
            const retryOperation = retry_1.default.operation(__classPrivateFieldGet(this, _PIIService_operationOptions, "f"));
            return new Promise((resolve, reject) => {
                retryOperation.attempt(() => {
                    request()
                        .then(resolve)
                        .catch((err) => {
                        if (!(shouldRetry(err) && retryOperation.retry(err))) {
                            reject(err);
                        }
                    });
                });
            });
        }
        return request();
    }
}
exports.default = PIIService;
_PIIService_client = new WeakMap(), _PIIService_operationOptions = new WeakMap(), _PIIService_makeRequest = new WeakMap();
