"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _PIIClient_service, _PIIClient_getVaultData;
Object.defineProperty(exports, "__esModule", { value: true });
const frontend_env_1 = require("frontend-env");
const json_to_graphql_query_1 = require("json-to-graphql-query");
const piiService_1 = __importDefault(require("./services/piiService"));
const metrics_1 = __importDefault(require("./metrics"));
const parseUserProperties = (properties) => {
    let parsedProperties;
    if (typeof properties === 'object' && !!properties) {
        parsedProperties = json_to_graphql_query_1.jsonToGraphQLQuery(properties);
    }
    else if (typeof properties === 'string') {
        parsedProperties = properties;
    }
    else {
        throw new TypeError('userProperties param must be of type string or object. Please read documentation at https://github.com/mercadolibre/fury_node-vault-client for more info.');
    }
    return parsedProperties;
};
const defaultConfig = {
    timeout: frontend_env_1.PRODUCTION ? 80 : 3000,
    retry: {
        strategy: 'linear',
        maxRetries: 1,
        delay: 20,
    },
    isDirty: false,
};
class PIIClient {
    constructor(token, config) {
        _PIIClient_service.set(this, void 0);
        _PIIClient_getVaultData.set(this, void 0);
        const retry = config?.retry;
        if (retry) {
            let requiredProps = Object.keys(defaultConfig.retry);
            if (retry.strategy === 'exponential') {
                requiredProps = requiredProps.concat(['maxDelay', 'factor']);
            }
            const missingProps = requiredProps
                .reduce((accum, curr) => (curr in retry ? accum : accum.concat(curr)), []);
            if (missingProps.length > 0) {
                throw new TypeError(`Missing properties in retry config: ${missingProps.toString()}. Refer to the doc for more info: https://github.com/mercadolibre/fury_node-vault-client#config-options`);
            }
        }
        const restClientConfig = { ...defaultConfig, ...config };
        __classPrivateFieldSet(this, _PIIClient_service, new piiService_1.default({ token, restClientConfig }), "f");
        __classPrivateFieldSet(this, _PIIClient_getVaultData, this.getVaultData.bind(this), "f");
        this.getPIIUserData = this.getPIIUserData.bind(this);
        this.getPIIUsersData = this.getPIIUsersData.bind(this);
    }
    /**
     * Get PII data for a user from Vault API
     *
     * @template T User's data structure expected from Vault API
     * @returns {Promise<T>} Promise which resolves to requested user data
     * @memberof PIIClient
     */
    getPIIUserData(params) {
        const { req, userId, versionId, userProperties, } = params;
        const parsedProperties = parseUserProperties(userProperties);
        const query = `query GetUserInfo($userId: Int!) { user(id: $userId) { ${parsedProperties} } }`;
        const user = userId || req?.user?.id;
        if (!user) {
            throw new TypeError('User ID was not provided. Please read documentation at https://github.com/mercadolibre/fury_node-vault-client for more info.');
        }
        let operation = 'simple_get';
        if (versionId) {
            operation = 'versioned_get';
        }
        const vaultParams = {
            req,
            query,
            operation,
            variables: {
                userId: user,
            },
            ...versionId && { versionId },
        };
        return __classPrivateFieldGet(this, _PIIClient_getVaultData, "f").call(this, vaultParams)
            .then(responseData => responseData.data.user);
    }
    /**
     * Get PII data for many users from Vault API
     *
     * @template T Users' data structure expected from Vault API
     * @returns {Promise<T[]>} Promise which resolves to array containing each user's requested data
     * @memberof PIIClient
     */
    getPIIUsersData(params) {
        const { req, userIds, userProperties, } = params;
        const parsedProperties = parseUserProperties(userProperties);
        if (!Array.isArray(userIds)) {
            throw new TypeError('Must provide userIds param and must be of type Array containing many user IDs. Please read documentation at https://github.com/mercadolibre/fury_node-vault-client for more info.');
        }
        const query = `query GetUserInfo($userId: [Int]!) { users(ids: $userId) { ${parsedProperties} } }`;
        const vaultParams = {
            req,
            query,
            operation: 'bulk_get',
            variables: {
                userId: userIds,
            },
        };
        return __classPrivateFieldGet(this, _PIIClient_getVaultData, "f").call(this, vaultParams)
            .then(responseData => ({
            users: responseData.data.users,
            ...responseData.errors && { errors: responseData.errors },
        }));
    }
    getVaultData(params) {
        const { operation } = params;
        const startTime = Date.now();
        return __classPrivateFieldGet(this, _PIIClient_service, "f").getData(params)
            .then((data) => {
            metrics_1.default({ startTime, operation });
            return data;
        })
            .catch((error) => {
            metrics_1.default({ startTime, operation, error: error });
            throw error;
        });
    }
}
exports.default = PIIClient;
_PIIClient_service = new WeakMap(), _PIIClient_getVaultData = new WeakMap();
