const Config = require('./config');
const {
  ids: environmentIds,
  environmentConstants,
  testEnvironmentLab,
} = require('./constants/environments');

const environments = {};
const getConfig = (environmentId) => {
  // TODO - log an error if environment is not valid
  const sanitizedEnvironment = environmentConstants[environmentId]
    ? environmentId
    : environmentIds.PRODUCTION;

  if (!environments[sanitizedEnvironment]) {
    environments[sanitizedEnvironment] = new Config(sanitizedEnvironment);
  }

  return environments[sanitizedEnvironment];
};

// Caches PRODUCTION environment at module startup
getConfig(environmentIds.PRODUCTION);

/**
 * Create the proxy of config instance for getters and setters handling
 *
 * @type {Proxy}
 */
const proxy = new Proxy({}, {
  // Universal config getter
  get(target, key) {
    switch (key) {
      // Config set() method
      case 'set':
        return (nextKey, value, environment) => getConfig(environment || environmentIds.PRODUCTION)
          ._set(nextKey, value);

      // Config get() method
      case 'get':
        return (nextKey, platform, site, environment) => getConfig(environment || environmentIds.PRODUCTION)
          ._get(nextKey, platform, site);

      case 'environmentIds':
        return environmentIds;

      case 'toJSON':
        return (platform, site, environment) => getConfig(environment || environmentIds.PRODUCTION)
          .toJSON(platform, site);

      case 'checkUpdates':
        return (interval, environment) => getConfig(environment || environmentIds.PRODUCTION)
          .checkUpdates(interval);

      case 'addUpdateHandler':
        return (handler, environment) => getConfig(environment || environmentIds.PRODUCTION)
          .addUpdateHandler(handler);

      case 'removeUpdateHandler':
        return (handler, environment) => getConfig(environment || environmentIds.PRODUCTION)
          .removeUpdateHandler(handler);

      case 'getEnvironment':
        return (req) => (req && req.cookies && req.cookies.meliLab === testEnvironmentLab
          ? environmentIds.TEST
          : environmentIds.PRODUCTION);

      default: {
        const targetConfig = getConfig(environmentIds.PRODUCTION);

        if (typeof targetConfig[key] !== 'undefined') {
          return typeof targetConfig[key] === 'function' ? targetConfig[key].bind(targetConfig) : targetConfig[key];
        }

        return targetConfig._get(key);
      }
    }
  },
  // Config setter
  set(target, key, value) {
    return getConfig(environmentIds.PRODUCTION)._set(key, value);
  },
});

module.exports = proxy;
