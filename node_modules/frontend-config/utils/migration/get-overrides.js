const { sites: sitesConfig } = require('../../config/platforms');
const defaultExcludedSites = require('./excluded-sites');

const mpNavigation = require('./configurations/mp');
const fpNavigation = require('./configurations/first-party');
const dataPrivacy = require('./configurations/data-privacy');
const piNavigation = require('./configurations/pi');
const classiNavigation = require('./configurations/classified');
const mlNavigation = require('./configurations/ml');
const cbtNavigation = require('./configurations/cbt');

const modules = [
  mlNavigation,
  mpNavigation,
  piNavigation,
  classiNavigation,
  cbtNavigation,
  fpNavigation,
  dataPrivacy,
];

const getOverridesArray = () => modules.reduce((tempResult, { config, rules }) => {
  rules.forEach(({ platforms, keys }) => {
    platforms
    .forEach(({
      id: platformId,
      excludedSites,
      allowedSites,
    }) => {
      const sites = (allowedSites || sitesConfig[platformId])
        .filter(siteId => !(excludedSites || []).concat(defaultExcludedSites).includes(siteId));

      sites.forEach((siteId) => {
        const sanitizedKeys = (keys || []).reduce((tempKeys, keyConfig) => {
          tempKeys.push(keyConfig.key);
          if (keyConfig.mapper) {
            const configValue = config.getValue({
              key: keyConfig.key,
              platform: {
                id: platformId,
                siteId,
              },
            }) || [];
            return tempKeys.concat(keyConfig.mapper(configValue));
          }
          return tempKeys;
        }, []);

        sanitizedKeys.forEach((key) => {
          const value = config.getValue({
            key,
            platform: {
              id: platformId,
              siteId,
            },
          });
          if (value !== undefined) {
            tempResult.push({
              key,
              value,
              platformId,
              siteId,
            });
          }
        });
      });
    });
  });

  return tempResult;
}, []);

const getOverrides = () => {
  const overridesArray = getOverridesArray();
  const overridesObject = {};

  overridesArray.forEach(({
    key,
    value,
    platformId,
    siteId,
  }) => {
    if (!overridesObject[platformId]) {
      overridesObject[platformId] = {};
    }
    if (!overridesObject[platformId][siteId]) {
      overridesObject[platformId][siteId] = {};
    }
    const siteConfig = overridesObject[platformId][siteId];
    const keys = key.split('.');

    keys.reduce((tempConfig, tempKey, index) => {
      if (keys.length - 1 !== index) {
        // object key
        tempConfig[tempKey] = tempConfig[tempKey] || {};

        return tempConfig[tempKey];
      }

      tempConfig[tempKey] = value;
    }, siteConfig);
  });

  return overridesObject;
};

const updateModules = ({ req }) => Promise.all(modules.map(({ config }) => config.update({ req })));

module.exports = {
  getOverrides,
  updateModules,
};