const config = require('..');
const { sites } = require('../config/platforms');
const path = require('path');
const fs = require('fs');
const del = require('del'); // eslint-disable-line import/no-extraneous-dependencies
const semver = require('semver'); // eslint-disable-line import/no-extraneous-dependencies
const { version } = require('../package.json'); // eslint-disable-line import/no-extraneous-dependencies
const { UPDATE_STATIC_FILES_ON_RELEASE } = require('../src/constants/release'); // eslint-disable-line import/no-extraneous-dependencies

const buildPath = path.join(__dirname, '..', 'build');

// Remove a temp directory to ensure that older files are never will be uploaded
del.sync(buildPath, {
  force: true,
});

// Create an empty temp directory
fs.mkdirSync(buildPath, 0o755);

if (!UPDATE_STATIC_FILES_ON_RELEASE) {
  return;
}

const isProduction = semver.valid(semver.coerce(version)) === version;
const environmentFolder = path.join(buildPath, isProduction ? 'production' : 'test');

// Create an empty temp directory
fs.mkdirSync(environmentFolder, 0o755);

// Config object that stores the data for all platforms
const mergedConfig = {
  version,
};

// Generate config files for every supported site
Object.keys(sites).forEach((platform) => {
  const platformSites = sites[platform];

  if (!mergedConfig[platform]) {
    mergedConfig[platform] = {};
  }

  platformSites.forEach((site) => {
    try {
      mergedConfig[platform][site] = {
        ...config.toJSON(platform, site),
        version,
      };

      fs.writeFileSync(path.join(environmentFolder, `${platform}-${site}.json`),
        JSON.stringify(mergedConfig[platform][site], null, 2));
    } catch (ex) {
      if (/Unsupported platform/.test(ex.message)) {
        console.warn(ex.message);
      } else {
        throw ex;
      }
    }
  });
});

// Write common config file
fs.writeFileSync(path.join(environmentFolder, 'common.json'), JSON.stringify(mergedConfig, null, 2));
