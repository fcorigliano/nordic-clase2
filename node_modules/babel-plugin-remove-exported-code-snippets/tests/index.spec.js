// eslint-disable-next-line import/no-extraneous-dependencies
const { transform } = require('@babel/core');
const plugin = require('../src/index');

const trim = (s) => s.join('\n').trim().replace(/^\s+/gm, '');
const babel = (code, pluginOptions = []) => transform(code, {
  filename: 'noop.js',
  presets: [['@babel/preset-react', { development: false, pragma: '__jsx' }]],
  plugins: [[plugin, { exports: pluginOptions }]],
  babelrc: false,
  configFile: false,
  sourceType: 'module',
  compact: true,
  caller: {
    name: 'tests',
    supportsStaticESM: true,
  },
}).code;

describe('babel-plugin-remove-exported-code-snippets', () => {
  test('Should remove named export function declaration (ex, getServerSideProps)', () => {
    const output = babel(trim`
      export function getServerSideProps() {
        return { props: {} }
      }
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should not remove extra named export function declarations and also remove async exported functions', () => {
    const output = babel(trim`
      export async function getServerSideProps() {
        return { props: {} }
      }
      export function Noop() {}
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export function Noop(){}export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should remove named export variable declarations', () => {
    const output = babel(trim`
      export const getServerSideProps = function() {
        return { props: {} }
      }
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should remove named export variable declarations (async) and code references of getServerSideProps and setPageConfiguration (ex, use of nordic/config)', () => {
    const output = babel(trim`
      import React from "react";
      import config from "nordic/config";

      export const getServerSideProps = async req => {
        const ItemService = require('../services/item');
      
        const response = await ItemService.getItem(req.params.id);
        return {
          props: {
            title: response.title ? response.title : response.name,
            price: response.price,
            available: response.available_quantity,
          },
        };
      };
      
      export const setPageConfiguration = (dynamicConfig) => ({
        className: 'this-is-classname',
        imagesPrefix: config.assets.prefix,
      });

      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps', 'setPageConfiguration']);

    expect(output).toMatchInlineSnapshot(
      '"import React from\\"react\\";export default function Test(){return __jsx(\\"div\\",null);}"'
    );
  });

  test('Should remove re-exported variable declarations', () => {
    const output = babel(trim`
      const getServerSideProps = () => {
        return {}
      }
      export { getServerSideProps };
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('should remove re-exported function declarations', () => {
    const output = babel(trim`
      function getServerSideProps() {
        return {};
      }
      export { getServerSideProps }
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should not remove extra named export variable declarations (foo) and be able to delete multiple configured exports', () => {
    const output = babel(trim`
      export const someOtherExport = () => {
        return {}
      };

      export const getServerSideProps = function() {
        return { props: {} }
      }, foo = 2;

      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps', 'someOtherExport']);

    expect(output).toMatchInlineSnapshot(
      '"export const foo=2;export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should support full re-export', () => {
    const output = babel(trim`
      export { getServerSideProps, default } from 'test';
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export{default}from\'test\';"',
    );
  });

  test('Should correctly remove the destructuring assignment (object)', () => {
    const output = babel(trim`
      import fs from 'fs';
      import other from 'other';
      const {readFile, readdir, access: foo} = fs.promises;
      const {a,b, cat: bar,...rem} = other;
      export async function getServerSideProps() {
        readFile;
        readdir;
        foo;
        b;
        cat;
        rem;
      }
      export default function Home() { return <div />; }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"import other from\'other\';const{a,cat:bar}=other;export default function Home(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should correctly remove the destructuring assignment (array)', () => {
    const output = babel(trim`
      import fs from 'fs';
      import other from 'other';
      const [a, b, ...rest]= fs.promises;
      const [foo, bar] = other;
      export async function getServerSideProps() {
        a;
        b;
        rest;
        bar;
      }
      export default function Home() { return <div />; }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"import other from\'other\';const[foo]=other;export default function Home(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should not crash for class declarations', () => {
    const output = babel(trim`
      function getServerSideProps() {
        return {};
      }
      export { getServerSideProps };
      export class MyClass {}
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"export class MyClass{}export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });

  test('Should support class exports', () => {
    const output = babel(trim`
      export function getServerSideProps() {
        return { props: {} }
      }
      class Test extends React.Component {
        render() {
          return <div />
        }
      }
      export default Test;
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"class Test extends React.Component{render(){return __jsx(\\"div\\",null);}}export default Test;"',
    );
  });

  test('should support export { _ as default }', () => {
    const output = babel(trim`
      export function getServerSideProps() {
        return { props: {} }
      }
      function El() {
        return <div />
      }
      export { El as default };
    `, ['getServerSideProps']);

    expect(output).toMatchInlineSnapshot(
      '"function El(){return __jsx(\\"div\\",null);}export{El as default};"',
    );
  });

  test('Should remove re-exported function declarations\' dependents (variables, functions, imports)', () => {
    const output = babel(trim`
      import keep_me from 'hello';
      import {keep_me2} from 'hello2';
      import * as keep_me3 from 'hello3';
      import drop_me from 'bla';
      import { drop_me2 } from 'foo';
      import { drop_me3, but_not_me } from 'bar';
      import * as remove_this from 'hehe';
      var some_test = 1;
      function dont_bug_me_either() {}
      const inceptionVar = 'saram';
      var var1 = 1;
      let var2 = 2;
      const var3 = inceptionVar + remove_this;
      function inception1() {var2;drop_me2;}
      function abc() {}
      const b = function() {var3;drop_me3;};
      const b2 = function apples() {};
      const bla = () => {inception1};
      async function getServerSideProps() {
        abc();
        drop_me;
        b;
        b2;
        bla();
        return { props: {var1} }
      }
      export { getServerSideProps };
      export default function Test() {
        return <div />
      }
    `, ['getServerSideProps', 'someMissingExport']);

    expect(output).toMatchInlineSnapshot(
      '"import keep_me from\'hello\';import{keep_me2}from\'hello2\';import*as keep_me3 from\'hello3\';import{but_not_me}from\'bar\';var some_test=1;function dont_bug_me_either(){}export default function Test(){return __jsx(\\"div\\",null);}"',
    );
  });
});
