const crypto = require('crypto');

const isModuleCSS = (mod) => (
  // mini-css-extract-plugin
  mod.type === 'css/mini-extract' ||
  // extract-css-chunks-webpack-plugin (old)
  mod.type === 'css/extract-chunks' ||
  // extract-css-chunks-webpack-plugin (new)
  mod.type === 'css/extract-css-chunks'
);

const countJsEntries = (webpackConfig) => {
  const entries = Object.entries(webpackConfig.entry);
  return entries.reduce((acc, entry) => {
    if (entry[0].includes('polyfill')) { // we asume polyfill is the name
      return acc;
    }
    for (let index = 0; index < entry[1].length; index += 1) {
      if (entry[1][index].endsWith('.js')) { // if one file contains a js file we count the entry
        return acc + 1;
      }
    }
    return acc;
  }, 0);
};

const FRAMEWORK_BUNDLES = [
  'react',
  'react-dom',
  'scheduler',
  'prop-types',
  'use-subscription',
];

/* eslint-disable max-len */
const granularSrategy = (webpackConfig) => ({
  optimization: {
    splitChunks: {
      chunks: 'all',
      maxInitialRequests: 25,
      minSize: 20000,
      cacheGroups: {
        default: false,
        framework: {
          chunks: 'all',
          name: 'framework',
          // This regex ignores nested copies of framework libraries so they're bundled with their issuer.
          test: new RegExp(
            `(?<!node_modules.*)[\\\\/]node_modules[\\\\/](${FRAMEWORK_BUNDLES.join('|')})[\\\\/]`,
          ),
          priority: 40,
          // Don't let webpack eliminate this chunk (prevents this chunk from becoming a part of the commons chunk)
          enforce: true,
        },
        // 150KB cut off for any npm library (change this value to meet your requirements)
        lib: {
          test(module) {
            return (
              !isModuleCSS(module)
              && module.size() > 150000
              && /node_modules[/\\]/.test(module.identifier())
            );
          },
          name(module) {
            const hash = crypto.createHash('sha1');
            hash.update(module.identifier({ context: 'dir' }));

            return `lib-${hash.digest('hex').substring(0, 8)}`;
          },
          priority: 30,
          minChunks: 1,
          reuseExistingChunk: true,
        },
        // if a chunk is used on all components we put it in commons
        // define (or pass in) the total number of pages here
        commons: {
          test(module) {
            return !isModuleCSS(module);
          },
          name: 'commons',
          minChunks: countJsEntries(webpackConfig),
          priority: 20,
        },
      },
    },
  },
});

module.exports = granularSrategy;
