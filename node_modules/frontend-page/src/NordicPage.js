/* eslint-disable react/jsx-closing-tag-location */
const React = require('react');
const Head = require('react-declarative-head');
const MeliGA = require('frontend-analytics/meli-ga');
const MelidataTrack = require('frontend-melidata/melidata-track');
const Script = require('frontend-script');
const Style = require('frontend-style');
const serialize = require('serialize-javascript');
const PropTypes = require('prop-types');
const { ImageProvider } = require('frontend-image');
const { I18nProvider } = require('frontend-i18n');
const {
  possibleDeviceTypes,
  warnings,
  environments,
} = require('./constants');
const { log } = require('./utils');

const defaultPageSettings = {
  analytics: null,
  hydrate: true,
  deviceType: null,
  imagesPrefix: '',
  i18n: null,
  melidata: null,
  className: '',
  script: '',
  style: '',
  id: '',
  isLegacyBrowser: false,
  appName: '',
  title: '',
};

/**
 * Validates that a specific object is valid to be used as analytics props.
 * @param {object} analytics - Object with analytics props
 * @return {boolean} Returns true if the object is valid
 */
function isAnalyticsValid(analytics) {
  const isValid = (analytics && typeof analytics === 'object'
  && Object.prototype.hasOwnProperty.call(analytics, 'section'));

  if (analytics && !Object.prototype.hasOwnProperty.call(analytics, 'section')) {
    log.warn(warnings.ANALYTICS);
  }

  return isValid;
}

/**
 * Validates that a specific object is valid to be used as melidata props.
 * @param {object} melidata - Object with analytics props
 * @return {boolean} Returns true if the object is valid
 */
function isMelidataValid(melidata) {
  const isValid = (melidata && typeof melidata === 'object'
  && Object.prototype.hasOwnProperty.call(melidata, 'path'));

  if (melidata && !Object.prototype.hasOwnProperty.call(melidata, 'path')) {
    log.warn(warnings.MELIDATA);
  }

  return isValid;
}

/**
 * Validates that the conditions are met for the state to be rendered.
 * @param {object} pageState - Object with the page state
 * @param {boolean} hydrate - Flag indicating that the page to be rendered will be hydrated
 * @return {boolean} Returns true if the object is valid
 */
function canRenderState(pageState, hydrate) {
  return pageState !== null && hydrate;
}

function getBaseChild(props) {
  const { pageState, Component, pageSettings } = props;
  const {
    hydrate,
    analytics,
    melidata,
    className,
    script,
    style,
    id,
    deviceType,
    isLegacyBrowser,
    appName,
    title,
  } = { ...defaultPageSettings, ...pageSettings };

  return (
    <div className={className} id={id} key={`page-${id}`}>
      { title && typeof title === 'string' && <Head><title>{title}</title></Head> }
      <Component {...pageState} key={`page-child-${id}`} />
      { isAnalyticsValid(analytics) && <MeliGA {...analytics} key={`page-meli-ga-${id}`} /> }
      { isMelidataValid(melidata) && <MelidataTrack {...melidata} key={`page-melidata-track-${id}`} /> }
      { style && typeof style === 'string'
    && <Style href={style} critical={deviceType === 'mobile'} key={`page-style-tag-${id}`} /> }
      { canRenderState(pageState, hydrate) && (<Script key={`page-preloaded-state-${id}`}>
        {`
    window.__PRELOADED_STATE__ = ${serialize({ pageState, pageSettings }, { isJSON: true })};
  `}
      </Script>) }
      { hydrate && <div key={`page-scripts-${id}`}>
        <Script src={`${script}.js`} key={`page-script-tag-${id}`} />
        <Script src="vendor.nordic.page.js" key={`page-vendor-script-tag-${id}`} />
        { isLegacyBrowser
      && <Script
        key={`page-polyfills-script-${id}`}
        src={`${appName}-polyfills.js`}
        priority={1}
        preload
      /> }
      </div> }
    </div>);
}

function addI18nProviderIfApplies(componentToRender, props) {
  const { i18n } = props.pageSettings;
  if (i18n) {
    return (
      <I18nProvider i18n={i18n}>
        {componentToRender}
      </I18nProvider>
    );
  }
  return componentToRender;
}

function addImageProviderIfApplies(componentToRender, props) {
  const { imagesPrefix } = props.pageSettings;
  if (imagesPrefix) {
    return (
      <ImageProvider prefix={imagesPrefix}>
        {componentToRender}
      </ImageProvider>
    );
  }
  return componentToRender;
}

const NordicPage = (props) => {
  let componentToRender = getBaseChild(props);
  componentToRender = addI18nProviderIfApplies(componentToRender, props);
  componentToRender = addImageProviderIfApplies(componentToRender, props);

  return componentToRender;
};

function getPropTypeValidator(type, error) {
  const validate = (props, propName) => {
    let logMessage;
    // eslint-disable-next-line valid-typeof
    if (props[propName] && typeof props[propName] !== type) {
      logMessage = `Invalid prop type for ${propName} at setPageSettings. `
      + `The expected value is a ${type}.`;
    } else if (propName === 'deviceType'
    && !possibleDeviceTypes.find((deviceType) => props[propName] === deviceType)) {
      logMessage = `Invalid prop value for ${propName} at setPageSettings. `
      + `The expected values are: ${possibleDeviceTypes.toString()}.`;
    }

    if (logMessage) {
      if (error) {
        log.error(logMessage);
      } else {
        log.warn(logMessage);
      }
    }
  };
  return validate;
}

NordicPage.propTypes = {
  pageSettings: PropTypes.shape({
    analytics: getPropTypeValidator('object', true),
    hydrate: getPropTypeValidator('boolean'),
    deviceType: getPropTypeValidator('string'),
    i18n: getPropTypeValidator('object'),
    script: getPropTypeValidator('string'),
    style: getPropTypeValidator('string', true),
    melidata: getPropTypeValidator('object', true),
    className: getPropTypeValidator('string'),
    id: getPropTypeValidator('string'),
    imagesPrefix: getPropTypeValidator('string'),
    isLegacyBrowser: getPropTypeValidator('boolean'),
    appName: getPropTypeValidator('string'),
    title: getPropTypeValidator('string', true),
  }),
  pageState: PropTypes.object,
  Component: PropTypes.func.isRequired,
};

NordicPage.defaultProps = {
  pageState: null,
  pageSettings: defaultPageSettings,
  Component: () => (<></>),
};

module.exports = NordicPage;

if (process.env.NODE_ENV === environments.TEST) {
  exports = module.exports;
  exports.isAnalyticsValid = isAnalyticsValid;
  exports.isMelidataValid = isMelidataValid;
  exports.canRenderState = canRenderState;
}
