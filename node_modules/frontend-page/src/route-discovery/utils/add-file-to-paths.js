const path = require('path');

const { environments } = require('../../constants');
const { getDeviceTypeOfFile } = require('./device-helper');
const { checkIfViewOrStyles } = require('./file-helpers');
const { throwDuplicatedErrorStatusCodeError, throwDuplicatedRouteError } = require('./inform-duplicates');
const { normalizeClientName } = require('./normalizers');

/**
 * Object defining the resources of each device type for a specific page
 * @typedef { { [deviceType]: { client, view, style } } } PagePaths
 * @property {string} [deviceType] - Name of the device type defined for the route discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Object defining the resources of each device type for a specific http error status code
 * @typedef { { [deviceType]: { client, view, style } } } HttpErrorPaths
 * @property {string} [deviceType] - Name of the device type defined for the route discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Adds a file path to the received paths object depending on the file type and the
 * device type of the file.
 * When the device object does not exist in paths it is created
 * @param {object} data - Paths object, new file path, directory, device type and client related to paths object
 * @param {PagePaths | HttpErrorPaths} data.paths - Paths object by device type
 * @param {string} data.filePath - File path to be added to paths
 * @param {string} data.dir - Base directory for the page files
 * @param {string} data.deviceType - Device type related with the device paths object to be updated
 * @returns {PagePaths | HttpErrorPaths} Updated paths object
 */
function addFilePathToPathsObject({ paths, filePath, dir }) {
  const fileType = checkIfViewOrStyles(filePath);
  const deviceType = getDeviceTypeOfFile(filePath);

  const newPaths = { [deviceType]: { ...paths[deviceType] } };

  if (!paths[deviceType]) {
    const client = normalizeClientName(filePath);

    newPaths[deviceType] = { styles: '', view: '', client };
  }

  const duplicatedFileType = newPaths[deviceType][fileType];

  if (duplicatedFileType) {
    const error = new Error('Duplicated file by file type');

    error.data = { fileType, deviceType, duplicatedFileType, filePath, dir };

    throw error;
  }

  newPaths[deviceType][fileType] = path.resolve(dir, filePath);

  return { ...paths, ...newPaths };
}

/**
 * Adds a file path to the discovered http error paths object depending on the file type and the
 * device type of the file.
 * @param {object} data - Status code, paths object, directory and new file path related to the discovered http error
 * @param {number} data.statusCode - Http error status code
 * @param {HttpErrorPaths} data.paths - Http error paths object by device type
 * @param {string} data.dir - Base directory for the page files
 * @param {string} data.filePath - File path to be added to discovered http error paths
 * @returns {HttpErrorPaths} Updated http error paths object
 */
function addPathToDiscoveredHttpError({ statusCode, paths, dir, filePath }) {
  let newPaths;

  try {
    newPaths = addFilePathToPathsObject({ paths, filePath, dir });
  } catch (error) {
    const errorData = error.data;

    if (errorData) {
      const duplicatedRouteErrorData = { ...errorData, statusCode };

      throwDuplicatedErrorStatusCodeError(duplicatedRouteErrorData);
    }
  }

  return newPaths;
}

/**
 * Adds a file path to the discovered route paths object depending on the file type and the
 * device type of the file.
 * @param {object} data - Route, paths object, directory and new file path related to the discovered route
 * @param {string} data.route - Navigable route of page
 * @param {HttpErrorPaths} data.paths - Discovered route paths object by device type
 * @param {string} data.dir - Base directory for the page files
 * @param {string} data.filePath - File path to be added to discovered route paths
 * @returns {HttpErrorPaths} Updated route paths object
 */
function addPathToDiscoveredRoute({ route, paths, dir, filePath }) {
  let newPaths;

  try {
    newPaths = addFilePathToPathsObject({ paths, filePath, dir });
  } catch (error) {
    const errorData = error.data;

    if (errorData) {
      const duplicatedRouteErrorData = { ...errorData, route };

      throwDuplicatedRouteError(duplicatedRouteErrorData);
    }
  }

  return newPaths;
}

module.exports = {
  addPathToDiscoveredRoute,
  addPathToDiscoveredHttpError,
};

if (process.env.NODE_ENV === environments.TEST) {
  exports = module.exports;
  exports.addFilePathToPathsObject = addFilePathToPathsObject;
}
