const { removeNamingConventionsFromFile } = require('./file-helpers');

/**
 * Object defining the resources of each device type for a specific page
 * @typedef { { [deviceType]: { client, view, style } } } PagePaths
 * @property {string} [deviceType] - Name of the device type defined for the route discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Object defining the resources of each device type for a specific http error status code
 * @typedef { { [deviceType]: { view, style } } } HttpErrorPaths
 * @property {string} [deviceType] - Name of the device type defined by the route
 * discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Object defining the resources of a specific page
 * @typedef { { route, hook, paths } } PageObject
 * @property {string} route - Navigable route of the page
 * @property {string} hook - Specific hooks file of the page
 * @property {PagePaths} paths - Object defining the paths resources of each device type for the page
 */

/**
 * Object defining the resources of a specific http error
 * @typedef { { route, hook, paths } } HttpErrorObject
 * @property {number} statusCode - Status code of the http error
 * @property {PagePaths} paths - Object defining the paths resources of each device type for the http error
 */

/**
 * Object defining a list of http error status codes
 * @typedef { { statusCode: { paths } } } HttpErrorListObject
 * @property {number} statusCode - Status code of the http error
 * @property {PagePaths} paths - Object defining the paths resources of each device type for the http error
 */

const logDuplicatedFileByFileExtension = ({ fileType, messagePortion, deviceType = 'base' }) => (
  `Ambiguous ${fileType} file definition for ${messagePortion}`
  + `${deviceType && deviceType !== 'base' ? ` and ${deviceType} device` : ''}. `
  + 'It is not possible to assign the same file name with different '
  + `${fileType} extensions. Please check the file definition `
  + 'convention for Nordic Page.'
);

const logDuplicatedFilesByIndexNamingConvention = ({
  duplicatedFileType,
  duplicatedFile,
  messagePortion,
}) => (
  `Ambiguous definition for ${messagePortion}. It is not possible to define a `
  + 'view on an index file inside a folder with the same name '
  + 'as another view file. Files in conflict:\n'
  + `${duplicatedFileType}\n`
  + `${duplicatedFile}\n`
);

/**
   * Returns an error message if there is already a discovered route with the same route
   * @param {string} route - Page navigable route
   * @param { Array<PageObject> } discoveredRoutes - List of discovered page routes
   * @param {string} fileType - File type of the page file path
   * @param {string} filePath - Page file path to be checked against discovered routes
   * @returns {string} Returns an error message if route is duplicated
   *
   * @examples
   * const route = '/error';
   * const fileType = 'view';
   * const filePath = 'app/nordic-pages/error/index.js';
   * const discoveredRoutes = [
   *   { route: '/error', paths: { base: [Object] }, hooks: '' },
   *   { route: '/other', paths: { base: [Object] }, hooks: '' },
   * ];
   *
   * checkDuplicatedRoute({ route, discoveredRoutes, fileType, filePath }) throws: Error message
   */
function checkDuplicatedRoute({ route, discoveredRoutes, fileType, filePath }) {
  let errorMessage = '';

  if (fileType !== 'view') {
    return errorMessage;
  }

  for (let i = 0; i <= discoveredRoutes.length - 1; i += 1) {
    const routesAreEqual = discoveredRoutes[i].route && route === discoveredRoutes[i].route;

    if (routesAreEqual) {
      const duplicatedFileType = discoveredRoutes[i].paths.base.view;
      const messagePortion = `${route} route`;

      errorMessage = logDuplicatedFilesByIndexNamingConvention({
        duplicatedFileType,
        duplicatedFile: filePath,
        messagePortion,
      });

      return errorMessage;
    }
  }
  return errorMessage;
}

/**
   * Returns an error message if there is already a discovered http error page with the same status code
   * @param {number} statusCode - Http error status code
   * @param {HttpErrorListObject} discoveredHttpErrors - List of discovered http errors
   * @param {string} fileType - File type of the http error file path
   * @param {string} filePath - Http error file path to be checked against discovered http errors
   * @returns {string} Returns an error message if status code is duplicated
   *
   * @examples
   * const statusCode = 404;
   * const fileType = 'view';
   * const filePath = 'app/nordic-pages/404/index.js';
   * const discoveredHttpErrors = {
   *   500: { paths: { base: [Object] } },
   *   404: { paths: { base: [Object] } },
   * };
   *
   * checkDuplicatedHttpErrorStatusCode({ statusCode, discoveredHttpErrors, fileType, filePath })
   * throws: Error message
   */
function checkDuplicatedHttpErrorStatusCode({ statusCode, discoveredHttpErrors, fileType, filePath }) {
  let errorMessage = '';

  if (fileType !== 'view') {
    return errorMessage;
  }

  const discoveredStatusCodeData = discoveredHttpErrors[statusCode];

  if (discoveredStatusCodeData) {
    const duplicatedFileType = discoveredStatusCodeData.paths.base.view;
    const messagePortion = `${statusCode} http error status code`;

    errorMessage = logDuplicatedFilesByIndexNamingConvention({
      duplicatedFileType,
      duplicatedFile: filePath,
      messagePortion,
    });

    return errorMessage;
  }

  return errorMessage;
}

/**
   * Throws duplicated entity error by file type extension or index naming convention.
   * @param {object} entity - Entity with the duplicated data
   * @param {string} entity.filePath - Duplicated file path
   * @param {string} entity.duplicatedFileType - Duplicated file path of file type extension or index naming convention
   * @param {string} entity.fileType - Indicates the file type of the file path
   * @param {string} entity.deviceType - Indicates the device type of the file path (base, desktop, mobile, etc)
   * @param {string} entity.dir - Base directory for the files
   * @param {string} entity.messagePortion - Message portion added to duplicated entity error report when it applies
   *
   * @examples
   * const filePath = 'home/index.mobile.js';
   * const duplicatedFileType = 'home.mobile.js';
   * const fileType = 'view';
   * const deviceType = 'mobile';
   * const dir = 'app/nordic-pages';
   * const messagePortion = '/home route';
   *
   * throwDuplicatedEntityError = ({ filePath, duplicatedFileType, fileType, deviceType, dir, messagePortion })
   * throws: Duplicated files by index naming convention
   */
const throwDuplicatedEntityError = ({ filePath, duplicatedFileType, fileType, deviceType, dir, messagePortion }) => {
  const duplicatedFile = `${dir}/${filePath}`;
  let message = '';

  // @example File with same path but different extension: test.js - test.ts
  if (removeNamingConventionsFromFile(duplicatedFileType) === removeNamingConventionsFromFile(duplicatedFile)) {
    message = logDuplicatedFileByFileExtension({ fileType, deviceType, messagePortion });
  } else {
  // @example Files with same route: item.js - item/index.js
    message = logDuplicatedFilesByIndexNamingConvention({ duplicatedFileType, duplicatedFile, messagePortion });
  }

  throw new Error(message);
};

/**
   * Throws duplicated route error by file type extension or index naming convention.
   * @param {object} entity - Entity with the duplicated data
   * @param {string} entity.route - Page route that has duplicates
   * @param {string} entity.fileType - Indicates the file type of the file path
   * @param {string} entity.deviceType - Indicates the device type of the file path (base, desktop, mobile, etc)
   * @param {string} entity.duplicatedFileType - Duplicated file path of file type extension or index naming convention
   * @param {string} entity.dir - Base directory for the files
   * @param {string} entity.filePath - Duplicated file path
   *
   * @examples
   * const route = '/home';
   * const filePath = 'home/index.mobile.js';
   * const duplicatedFileType = 'home.mobile.js';
   * const fileType = 'view';
   * const deviceType = 'mobile';
   * const dir = 'app/nordic-pages';
   *
   * throwDuplicatedRouteError({ route, fileType, deviceType, duplicatedFileType, filePath, dir, })
   * throws: Duplicated route files by index naming convention
   */
const throwDuplicatedRouteError = ({
  route,
  fileType,
  deviceType,
  duplicatedFileType,
  filePath,
  dir,
}) => {
  const messagePortion = `${route} route`;

  throwDuplicatedEntityError({ filePath, duplicatedFileType, fileType, deviceType, dir, messagePortion });
};

/**
   * Throws duplicated status code error by file type extension or index naming convention.
   * @param {object} entity - Entity with the duplicated data
   * @param {number} entity.statusCode - Http error status code that has duplicates
   * @param {string} entity.fileType - Indicates the file type of the file path
   * @param {string} entity.deviceType - Indicates the device type of the file path (base, desktop, mobile, etc)
   * @param {string} entity.duplicatedFileType - Duplicated file path of file type extension or index naming convention
   * @param {string} entity.dir - Base directory for the files
   * @param {string} entity.filePath - Duplicated file path
   *
   * @examples
   * const statusCode = 404;
   * const filePath = '404/index.mobile.js';
   * const duplicatedFileType = '404.mobile.js';
   * const fileType = 'view';
   * const deviceType = 'mobile';
   * const dir = 'app/nordic-pages';
   *
   * throwDuplicatedErrorStatusCodeError({ statusCode, fileType, deviceType, duplicatedFileType, filePath, dir, })
   * throws: Duplicated status code files by index naming convention
   */
const throwDuplicatedErrorStatusCodeError = ({
  statusCode,
  fileType,
  deviceType,
  duplicatedFileType,
  filePath,
  dir,
}) => {
  const messagePortion = `${statusCode} http error status code`;

  throwDuplicatedEntityError({ filePath, duplicatedFileType, fileType, deviceType, dir, messagePortion });
};

module.exports = {
  throwDuplicatedRouteError,
  throwDuplicatedErrorStatusCodeError,
  logDuplicatedFileByFileExtension,
  logDuplicatedFilesByIndexNamingConvention,
  checkDuplicatedRoute,
  checkDuplicatedHttpErrorStatusCode,
};
exports = module.exports;
