const path = require('path');

const {
  baseHooksNamingRegex,
  httpErrorFilesInRootRegex,
  pageHooksRegex,
  viewRegex,
  stylesRegex,
  basenameRegex,
} = require('../regExs');

/**
 * Returns the type of the file by the naming convention used
 * File type options are: 'baseHooks', 'hooks', 'httpError'
 * @param {string} file - File path to find the file type
 * @returns {string} File type
 *
 * @examples
 * getTheFileNamingConvention('/_hooks.server.js') returns 'baseHooks'
 * getTheFileNamingConvention('item/[id].hooks.server.js') returns 'hooks'
 * getTheFileNamingConvention('404.scss') returns 'httpError'
 */
function getTheFileNamingConvention(file) {
  if (baseHooksNamingRegex.test(file)) {
    return 'baseHooks';
  }
  if (httpErrorFilesInRootRegex.test(file)) {
    return 'httpError';
  }
  if (pageHooksRegex.test(file)) {
    return 'hooks';
  }

  return '';
}

/**
 * Returns if the file received is a view or a styles file
 * @param {string} file - File path to find the file type
 * @returns {string} File type
 *
 * @examples
 * checkIfViewOrStyles('/home.js') returns 'view'
 * checkIfViewOrStyles('item/[id].ts') returns 'view'
 * checkIfViewOrStyles('404.scss') returns 'styles'
 */
function checkIfViewOrStyles(file) {
  if (viewRegex.test(file)) {
    return 'view';
  }

  if (stylesRegex.test(file)) {
    return 'styles';
  }

  return '';
}

/**
 * Returns the type of the file
 * File type options are: 'view', 'styles', 'baseHooks', 'hooks', 'httpError'
 * @param {string} file - File path to find the file type
 * @returns {string} File type
 *
 * @examples
 * getFileType('item/[id].js') returns 'view'
 * getFileType('item/[id].scss') returns 'styles'
 * getFileType('/_hooks.server.js') returns 'baseHooks'
 * getFileType('item/[id].hooks.server.js') returns 'hooks'
 * getFileType('404.scss') returns 'httpError'
 */
function getFileType(file) {
  let fileType = '';

  fileType = getTheFileNamingConvention(file);

  if (fileType) {
    return fileType;
  }

  fileType = checkIfViewOrStyles(file);

  return fileType;
}

/**
 * Returns the basename of a file path, removing naming conventions
 * @param {string} file - File path to find basename
 * @returns {string} Basename of the route
 *
 * @examples
 * removeNamingConventionsFromFile(home.mobile.js) => home
 * removeNamingConventionsFromFile(home.hooks.server.js) => home
 */
function removeNamingConventionsFromFile(file) {
  return path.basename(file)
    .replace(basenameRegex, '')
    .replace(/^styles$/, 'index');
}

module.exports = {
  getFileType,
  getTheFileNamingConvention,
  checkIfViewOrStyles,
  removeNamingConventionsFromFile,
};
