const path = require('path');

const { getFileType } = require('./file-helpers');
const { validateIfExistMoreThanOneBaseHookFileInRoot } = require('./validators');
const { baseHooksInRootRegex } = require('../regExs');
const { log } = require('../../utils');

const { PAGES_PATH } = require('../../constants');

/**
 * Add file path to base hooks in root list when file path matches base hooks in root naming convention.
 * Informs when file path matches with base hook file naming convention but it is not
 * located in the directory root.
 * @param {Array<string>} baseHooksInRoot - List of base hook files in route
 * @param {string} filePath - Base hook file path
 * @param {string} dir - Base directory for the files
 * @returns {Array<string>} List of base hooks files in root
 *
 * @example
 * const baseHooksInRoot = [ '_hooks.server.js', '_hooks.server.jsx' ];
 * const filePath = '_hooks.server.ts';
 * const dir = 'app/nordic-pages';
 *
 * addFilePathToBaseHooksInRootArrayIfApplies(baseHooksInRoot, filePath, dir)
 * returns: [ '_hooks.server.js', '_hooks.server.jsx', '_hooks.server.ts' ]
 */
function addFilePathToBaseHooksInRootArrayIfApplies(baseHooksInRoot, filePath, dir) {
  const fileFullPath = path.resolve(dir, filePath);
  const baseHooksArray = [...baseHooksInRoot];

  if (baseHooksInRootRegex.test(filePath)) {
    baseHooksArray.push(fileFullPath);

    return baseHooksArray;
  }

  log.warn('Expected to find Nordic Pages base server hooks file in the root of '
      + `${PAGES_PATH} but was found in: ${fileFullPath}`);

  return baseHooksInRoot;
}

/**
 * Classify the discovered files received in base hooks files, http error files and specific files.
 * @param {Array} discoveredFiles - Sorted list of discovered file paths:
 *    - First, http error files
 *    - Second, base hook files
 *    - Third, specific files
 * @returns {object} files - Object with the list of specific files and the base hooks file
 * @returns {Array} files.specificFiles - List of specific files
 * @returns {Array} files.httpErrorFiles - List of http error files
 * @returns {string} files.baseHooksFile - Base hooks file
 *
 * @example
 * const discoveredFiles = [
 *    '404.js',
 *    '500/index.js',
 *    '_hooks.server.js',
 *    'item/list/[id].desktop.js',
 *    'item/[id].scss',
 *    'item/[id].hooks.server.js'
 * ];
 *
 * classifyDiscoveredFiles(discoveredFiles)
 * returns
 * {
 *    specificFiles: [
 *      'item/[id].scss', 'item/[id].hooks.server.js', 'item/list/[id].desktop.js',
 *    ],
 *    httpErrorFiles: [
 *      '404.js', '500/index.js'
 *    ],
 *    baseHooksFile: '_hooks.server.js'
 * }
 */
function classifyDiscoveredFiles(discoveredFiles, dir) {
  let baseHooksInRoot = [];

  const classifiedFiles = { baseHooksFile: '', httpErrorFiles: [], specificFiles: [] };

  for (let index = 0; index < discoveredFiles.length; index += 1) {
    const filePath = discoveredFiles[index];
    const fileType = getFileType(filePath);

    if (fileType !== 'baseHooks' && fileType !== 'httpError') {
      classifiedFiles.specificFiles = discoveredFiles.slice(index);
      break;
    }

    switch (fileType) {
      case 'httpError': {
        classifiedFiles.httpErrorFiles.push(filePath);
        break;
      }
      case 'baseHooks': {
        baseHooksInRoot = addFilePathToBaseHooksInRootArrayIfApplies(baseHooksInRoot, filePath, dir);
        break;
      }
      default: // ignored
    }
  }

  validateIfExistMoreThanOneBaseHookFileInRoot(baseHooksInRoot);

  classifiedFiles.baseHooksFile = baseHooksInRoot[0] || '';

  return classifiedFiles;
}

module.exports = {
  classifyDiscoveredFiles,
};
