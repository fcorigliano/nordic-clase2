const { possibleDeviceTypes } = require('../../constants');
const { fileWithDeviceSpecifiedRegex, deviceTypeRegex } = require('../regExs');

/**
 * Object defining the resources of each device type for a specific page
 * @typedef { { [deviceType]: { client, view, style } } } PagePaths
 * @property {string} [deviceType] - Name of the device type defined for the route discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Object defining the resources of each device type for a specific http error status code
 * @typedef { { [deviceType]: { view, style } } } HttpErrorPaths
 * @property {string} [deviceType] - Name of the device type defined by the route
 * discovery (base, mobile, etc.)
 * @property {string} [deviceType].client - Client file name for certain device type
 * @property {string} [deviceType].view - View file path for certain device type
 * @property {string} [deviceType].style - Style file path for certain device type
 */

/**
 * Object defining the resources of a specific page
 * @typedef { { route, hook, paths } } PageObject
 * @property {string} route - Navigable route of the page
 * @property {string} hook - Specific hooks file of the page
 * @property {PagePaths} paths - Object defining the paths resources of each device type for the page
 */

/**
   * Returns the device type of the discovered file.
   * Device type options are defined in the 'discoveryDeviceTypes' constant
   * @param {string} file - Discovered file path or name to find the device type
   * @returns {string} Device type
   *
   * @examples
   * getDeviceTypeOfFile('item/[id].js') returns 'base'
   * getDeviceTypeOfFile('item/[id].desktop.scss') returns 'desktop'
   * getDeviceTypeOfFile('item/[id].mobile.js') returns 'mobile'
   * getDeviceTypeOfFile('[id].tablet') returns 'tablet'
   */
function getDeviceTypeOfFile(file) {
  let deviceType = 'base';
  const matchDevicePattern = fileWithDeviceSpecifiedRegex.test(file);

  if (matchDevicePattern) {
    const splitFile = file.split('.');

    deviceType = splitFile.find(key => deviceTypeRegex.test(key));
  }

  return deviceType;
}

/**
   * Returns the first device type and paths of that type using the order of priority
   * defined in the constant 'possibleDeviceTypes'
   * @param {PagePaths | HttpErrorPaths} paths - Paths by device type
   * @returns {object} Device type and device type paths
   *
   * @examples
   * const paths = {
   *  tablet: {
   *    client: 'home.tablet',
   *    view: 'home.tablet.js',
   *    style: 'home.tablet.scss'
   *  },
   *  mobile: {
   *    client: 'home.mobile',
   *    view: 'home.mobile.js',
   *  }
   * };
   * getPriorityDevicePaths(paths) returns:
   * {
   *  deviceType: 'mobile',
   *  deviceTypePaths: {
   *    client: 'home.mobile',
   *    view: 'home.mobile.js',
   *  },
   * }
   */
function getPriorityDevicePaths(paths) {
  const deviceType = (possibleDeviceTypes.find(key => paths[key] && paths[key].view)
  || '');
  const deviceTypePaths = (deviceType ? paths[deviceType] : null);

  return { deviceType, deviceTypePaths };
}

module.exports = {
  getDeviceTypeOfFile,
  getPriorityDevicePaths,
};
exports = module.exports;
