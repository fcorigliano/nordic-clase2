const glob = require('glob');
const path = require('path');

const { getDeviceTypeOfFile } = require('./device-helper');
const {
  FILES_IGNORED_IN_DISCOVERY,
  environments,
} = require('../../constants');
const { removeNamingConventionsFromFile } = require('./file-helpers');
const {
  baseHooksNamingRegex,
  fileExtensionsToDiscover,
  routeWithParamsRegex,
  httpErrorFilesInRootRegex,
} = require('../regExs');

/**
 * Compare two file paths to finally sort the list of
 * discovered file paths from most specific to least specific.
 * The expected order is:
 *    - First, http error files
 *    - Second, base hook files
 *    - Third, specific files
 * @param {string} a - File path positioned immediately before 'b'.
 * @param {string} b - File path positioned immediately after 'a'.
 * @returns {number} When is:
 * - '-1': Indicates that 'a' has to be after 'b'
 * - '1': Indicates that 'a' has to be before 'b'
 */
function compare(a, b) {
  const getDirname = (route) => path.dirname(route).replace(/^\./g, '');
  const hasParams = (str) => routeWithParamsRegex.test(str);

  const aRoute = {
    dirname: getDirname(a),
    basename: removeNamingConventionsFromFile(a),
    deviceType: getDeviceTypeOfFile(path.basename(a)),
  };
  const bRoute = {
    dirname: getDirname(b),
    basename: removeNamingConventionsFromFile(b),
    deviceType: getDeviceTypeOfFile(path.basename(b)),
  };

  const aFileIsHttpError = httpErrorFilesInRootRegex.test(a);
  const bFileIsHttpError = httpErrorFilesInRootRegex.test(b);


  if (aFileIsHttpError && !bFileIsHttpError) {
    return -1;
  }

  if (!aFileIsHttpError && bFileIsHttpError) {
    return 1;
  }

  const aFileIsBaseHook = baseHooksNamingRegex.test(a);
  const bFileIsBaseHook = baseHooksNamingRegex.test(b);

  if (aFileIsBaseHook) {
    return -1;
  }

  if (!aFileIsBaseHook && bFileIsBaseHook) {
    return 1;
  }

  const aFileHasParams = hasParams(a);
  const bFileHasParams = hasParams(b);

  if (!aFileHasParams && bFileHasParams) {
    return -1;
  }

  if (aRoute.dirname === bRoute.dirname) {
    if (aRoute.basename === bRoute.basename) {
      if (aRoute.deviceType < bRoute.deviceType) {
        return -1;
      }
    } else if (
      (!hasParams(aRoute.basename) && hasParams(bRoute.basename))
        || aRoute.basename < bRoute.basename) {
      return -1;
    }
  } else if (
    (aFileHasParams && bFileHasParams && aRoute.dirname > bRoute.dirname)
      || aRoute.dirname < bRoute.dirname) {
    return -1;
  }

  return 1;
}

const discoverFiles = (dir) => {
  const discoveredFiles = glob
    .sync(fileExtensionsToDiscover,
      { cwd: dir, ignore: FILES_IGNORED_IN_DISCOVERY });

  discoveredFiles.sort(compare);

  return discoveredFiles;
};

module.exports = discoverFiles;
exports = module.exports;

if (process.env.NODE_ENV === environments.TEST) {
  exports = module.exports;
  exports.discoverFiles = discoverFiles;
  exports.compare = compare;
}
