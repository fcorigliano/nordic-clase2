const {
  hooksFilesIdentifier,
  discoveryFileExtensions,
  possibleDeviceTypes,
} = require('../constants');

const deviceTypeNaming = possibleDeviceTypes.join('|');
const scriptExtensions = discoveryFileExtensions.SCRIPT.join('|');
const styleExtensions = discoveryFileExtensions.STYLE.join('|');

const scriptOptions = discoveryFileExtensions.SCRIPT.join(',');
const stylesOptions = discoveryFileExtensions.STYLE.join(',');

/**
 * Used in checkIfViewOrStyles(file) to match VIEW files.
 * This regex matches when the file has a SCRIPT extension and is not a HOOKS file.
 * @example
 * /items/[id].js
 */
const viewRegex = new RegExp(`^(?!(.*((\\.${hooksFilesIdentifier.VIEW_SPECIFIC})|${hooksFilesIdentifier.BASE})\\.(${scriptExtensions})))(.*\\.(${scriptExtensions}))$`);

/**
 * Used in checkIfViewOrStyles(file) to match STYLE SHEETS files.
 * This regex matches when the file has a STYLE extension.
 * @example
 * /items/[id].css
 */
const stylesRegex = new RegExp(`.*\\.(${styleExtensions})$`);

/**
 * Used in getTheFileNamingConvention(file) to match PAGE-SPECIFIC SERVER HOOKS files.
 * This regex matches when the file is a
 * PAGE-SPECIFIC SERVER HOOKS (*.hooks.server.<scriptExtension>)
 * @example
 * /items/[id].hooks.server.js
 */
const pageHooksRegex = new RegExp(`.*\\.${hooksFilesIdentifier.VIEW_SPECIFIC}\\.(${scriptExtensions})$`);

/**
 * Used in getTheFileNamingConvention(file) to match BASE HOOKS files.
 * This regex matches when the file is a BASE HOOKS (_hooks.server.<scriptExtension>).
 * @example
 * /items/_hooks.server.ts
 */
const baseHooksNamingRegex = new RegExp(`((^)|(.*\\/))?${hooksFilesIdentifier.BASE}\\.(${scriptExtensions})$`);

/**
 * Used in compare(a, b) and getFileType(file) to match HTTP ERRORS files
 * in the pages directory.
 * This regex matches when the file is located in the nordic pages directory root
 * and follows the HTTP ERROR status code naming convention.
 * @example
 * 404.js, 404.mobile.scss, 500/index.js
 */
const indexScriptNaming = `index(\\.(${deviceTypeNaming}))?\\.(${scriptExtensions})`;
const indexStyleNaming = `(index|styles)(\\.(${deviceTypeNaming}))?\\.(${styleExtensions})`;
const httpErrorFilesInRootRegex = new RegExp('^(4|5)[0-9][0-9]'
+ `((\\/((${indexScriptNaming})|(${indexStyleNaming})))`
+ `|((\\.(${deviceTypeNaming}))?\\.(${scriptExtensions}|${styleExtensions})))$`);

/**
 * Used in classifyDiscoveredFiles(discoveredFiles, dir) to match BASE HOOKS files
 * in the root directory of the pages.
 * This regex matches when the file is a BASE HOOKS in root (_hooks.server.<scriptExtension>).
 * @example
 * /items/_hooks.server.ts
 */
const baseHooksInRootRegex = new RegExp(`^${hooksFilesIdentifier.BASE}\\.(${scriptExtensions})$`);

/**
 * Used in getDeviceTypeOfFile(file) to get the DEVICE TYPE of the file (if any).
 * This regex matches when the file is a DEVICE TYPE VIEW or a DEVICE TYPE STYLE sheet.
 * @examples
 * index.mobile.js
 * home.mobile.scss
 */
const fileWithDeviceSpecifiedRegex = new RegExp(`.*\\.(${deviceTypeNaming})\\.(${scriptExtensions}|${styleExtensions})$`);

/**
 * Used in getDeviceTypeOfFile(file) to get the DEVICE TYPE of a file.
 * This regex matches when the file has a DEVICE TYPE.
 * @example
 * mobile
 */
const deviceTypeRegex = new RegExp(`^(${deviceTypeNaming})$`);

/**
 * Used in compare(a,b) to sort the ROUTES containing PARAMS after the express specific ROUTES.
 * This regex matches when the file path is a ROUTE with PARAMS.
 * @example
 * /items/[id].js
 */
// eslint-disable-next-line no-useless-escape
const routeWithParamsRegex = new RegExp('.*\\[.*\\].*');

/**
 * Used in compare(a,b) to remove naming conventions from the file path
 * in order to sort the discovered files.
 * This regex matches when the file has DEVICE TYPE, VIEW, STYLE or
 * PAGE-SPECIFIC HOOKS naming convention.
 * @examples
 * home.mobile.js => home
 * home.hooks.server.js => home
 */
const basenameRegex = new RegExp('('
 + `((\\.(${deviceTypeNaming}))?\\.(${scriptExtensions}|${styleExtensions}))|`
 + `((\\.${hooksFilesIdentifier.VIEW_SPECIFIC})\\.(${scriptExtensions}))`
 + '$)', 'g');

/**
 * Used in normalizeClientName(client) to remove script or style extensions
 * from the file path to define the client name.
 * This regex matches when the file has a SCRIPT or STYLE extension
 * @examples
 * .js, .ts, .jsx, .tsx, .css, .scss
 */
const scriptOrStyleExtensionsRegex = new RegExp(`\\.(${scriptExtensions}|${styleExtensions})$`);

/**
 * Used in normalizeClientName(client) to replace 'styles' with 'index'
 * from the file path to define the client name.
 * This regex matches when the file name is 'styles'.
 * @example
 * item/styles
 */
// eslint-disable-next-line no-useless-escape
const endsWithStylesRegex = new RegExp('\\/styles$');

/**
 * Used in normalizeClientName(client) to replace 'styles.' with 'index.'
 * from the file path to define the client name.
 * This regex matches when the file name is 'styles.' for specific device styles.
 * @example
 * item/styles
 */
// eslint-disable-next-line no-useless-escape
const endsWithStylesDeviceRegex = new RegExp('\\/styles\\.');

/**
 * Used in completeBaseObject({}) to remove DEVICE TYPE from the file
 * path to define the base client name.
 * This regex matches when the file name ends with a DEVICE TYPE.
 * @example
 * item/home.desktop
 */
const endsWithDeviceTypeRegex = new RegExp(`\\.(${deviceTypeNaming})$`);

/**
 * Used in fsRoute(dir, options) to remove the naming convention
 * from the file discovered to define the express route.
 * This regex matches when the file has DEVICE TYPE, VIEW, STYLE or
 * PAGE-SPECIFIC HOOKS naming convention.
 * @examples
 * home.js, home.mobile.js, home.hooks.server.jsx => home
 */
const fileToRouteRegex = new RegExp(`(^(index|styles))?(\\.(${deviceTypeNaming}|${hooksFilesIdentifier.VIEW_SPECIFIC}))?\\.(${scriptExtensions}|${styleExtensions})$`);

/**
 * Used in fsRoute(dir, options) to remove the naming index convention from the express route.
 * This regex matches when the express route has INDEX naming convention.
 * @examples
 * home/index, home/styles => home
 */
const fileIndexToRouteRegex = new RegExp('\\/(index|styles)$');

/**
 * Used in fsRoute(dir, options) to discover SCRIPT and STYLE files.
 * This glob matches when the file has SCRIPT or STYLE extension
 * @examples
 * home.js, /home/index.ts, home.hooks.server.jsx, styles.css, _hooks.server.js
 */
const fileExtensionsToDiscover = `**/!(?(*\\.)+(spec?(s)|test))\\.{${scriptOptions},${stylesOptions}}`;

module.exports = {
  viewRegex,
  stylesRegex,
  pageHooksRegex,
  baseHooksNamingRegex,
  baseHooksInRootRegex,
  httpErrorFilesInRootRegex,
  routeWithParamsRegex,
  fileWithDeviceSpecifiedRegex,
  deviceTypeRegex,
  basenameRegex,
  scriptOrStyleExtensionsRegex,
  endsWithStylesRegex,
  endsWithStylesDeviceRegex,
  endsWithDeviceTypeRegex,
  fileToRouteRegex,
  fileIndexToRouteRegex,
  fileExtensionsToDiscover,
};

