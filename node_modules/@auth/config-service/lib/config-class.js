"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AppConfigService_app, _AppConfigService_defaultConfig;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppConfigService = void 0;
const updater_1 = require("./services/updater");
class AppConfigService {
    constructor({ app, extraParams, defaultConfig }) {
        _AppConfigService_app.set(this, void 0);
        _AppConfigService_defaultConfig.set(this, void 0);
        __classPrivateFieldSet(this, _AppConfigService_app, app, "f");
        __classPrivateFieldSet(this, _AppConfigService_defaultConfig, defaultConfig || {}, "f");
        (0, updater_1.addConfigKey)(app, extraParams);
    }
    getLatestConfig() {
        return (0, updater_1.getConfig)(__classPrivateFieldGet(this, _AppConfigService_app, "f"), __classPrivateFieldGet(this, _AppConfigService_defaultConfig, "f"));
    }
}
exports.AppConfigService = AppConfigService;
_AppConfigService_app = new WeakMap(), _AppConfigService_defaultConfig = new WeakMap();
