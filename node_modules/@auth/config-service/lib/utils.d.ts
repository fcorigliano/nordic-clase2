import type { Request } from 'express';
export declare type AnyObject = Record<string, unknown>;
export declare const deepFreeze: <T extends AnyObject = AnyObject>(obj: T) => T;
export declare const getPropFromObject: <T = unknown, P = AnyObject>(obj: P, expression: string) => T | undefined;
declare type MappedProps<Type> = {
    [Property in keyof Type]: unknown;
};
declare type MapOptions = {
    filterUndefinedValues: boolean;
};
export declare const mapObjectProps: <T = AnyObject>(obj: T, mapDict: Record<string, string>, opt?: MapOptions) => MappedProps<Record<string, string>>;
declare type Headers = Record<string, string>;
export declare const mapHeaders: (req: Request, map: Headers) => Headers;
export declare const cookiesObjectToHeader: (cookies: Record<string, string>, filterCookies: string[], bannedCookies?: string[]) => string;
export {};
