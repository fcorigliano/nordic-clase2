"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.addConfigKey = void 0;
const frontend_env_1 = require("frontend-env");
const config_1 = require("../client/config");
const utils_1 = require("../utils");
const Logger = require("frontend-logger"); // eslint-disable-line import/order
const deepmerge = require("deepmerge"); // eslint-disable-line import/order
const logger = Logger('auth-config-service');
const INITIAL_DELAY = 5 * 1000; // 5 seconds
const UPDATE_INTERVAL = 60 * 60 * 1000; // 1 hour
const currentConfig = {};
const configParams = {};
const updateConfig = () => {
    // Don't fetch configs if no keys are configured
    if (Object.keys(configParams).length === 0) {
        return;
    }
    (0, config_1.fetchConfig)(configParams)
        .then((data) => {
        Object.entries(data)
            .filter(([, val]) => typeof val === 'object')
            .forEach(([key, val]) => {
            currentConfig[key] = (0, utils_1.deepFreeze)(val);
        });
    })
        .catch((err) => {
        logger.error(`Error retrieving configuration. Error: '${err.message}'`, {
            configs: Object.keys(configParams).toString(),
        });
    });
};
const useUpdates = frontend_env_1.AUTH_CONFIG_UPDATE === 'true'
    || (frontend_env_1.PRODUCTION && !frontend_env_1.IS_CI && frontend_env_1.FURY && frontend_env_1.AUTH_CONFIG_UPDATE !== 'false');
if (useUpdates) {
    setTimeout(() => {
        updateConfig();
        setInterval(updateConfig, UPDATE_INTERVAL);
    }, INITIAL_DELAY);
}
const addConfigKey = (key, extraParams = {}) => {
    configParams[key] = deepmerge(configParams[key] || {}, extraParams);
};
exports.addConfigKey = addConfigKey;
const getConfig = (key, defaultConfig) => {
    if (!currentConfig[key]) {
        return defaultConfig;
    }
    return currentConfig[key];
};
exports.getConfig = getConfig;
