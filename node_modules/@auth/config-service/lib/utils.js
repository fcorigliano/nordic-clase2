"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cookiesObjectToHeader = exports.mapHeaders = exports.mapObjectProps = exports.getPropFromObject = exports.deepFreeze = void 0;
const cloneDeep = require("lodash.clonedeep");
const deepFreeze = (obj) => {
    Object.getOwnPropertyNames(obj)
        .filter(name => typeof obj[name] === 'object')
        .map(name => obj[name])
        .forEach(exports.deepFreeze);
    return Object.freeze(obj);
};
exports.deepFreeze = deepFreeze;
const getArrayProp = (arr, indexes) => {
    if (!arr || !Array.isArray(arr)) {
        return arr;
    }
    return getArrayProp(arr[+indexes[0]], indexes.slice(1));
};
const arrayRegex = /(.*?)(\[[[\d\]]+\])/;
const arrayIndexesRegex = /\[(\d+)\]/g;
const getPropFromObject = (obj, expression) => {
    if (!(obj && typeof expression === 'string')) {
        return undefined;
    }
    return cloneDeep(expression
        .trim()
        .split('.')
        .reduce((prev, curr) => {
        const arrayMatch = arrayRegex.exec(curr);
        if (arrayMatch) {
            const [, prop, indexes] = arrayMatch;
            const indexArr = Array.from(indexes.matchAll(arrayIndexesRegex), m => m[1]);
            return prev && getArrayProp(prev[prop], indexArr);
        }
        return prev && prev[curr];
    }, obj));
};
exports.getPropFromObject = getPropFromObject;
const mapObjectProps = (obj, mapDict, opt = { filterUndefinedValues: true }) => Object
    .entries(mapDict)
    .reduce((prev, [key, value]) => {
    const val = (0, exports.getPropFromObject)(obj, value);
    if (!opt.filterUndefinedValues || val !== undefined) {
        prev[key] = val; // eslint-disable-line no-param-reassign
    }
    return prev;
}, {});
exports.mapObjectProps = mapObjectProps;
const mapHeaders = (req, map) => Object
    .entries(map)
    .reduce((prev, [key, value]) => {
    prev[value] = req.header(key); // eslint-disable-line no-param-reassign
    return prev;
}, {});
exports.mapHeaders = mapHeaders;
const cookiesObjectToHeader = (cookies, filterCookies, bannedCookies = []) => Object
    .entries(cookies)
    .filter(([key]) => filterCookies.includes(key) && !bannedCookies.includes(key))
    .map(([key, value]) => `${key}=${value}`)
    .join('; ');
exports.cookiesObjectToHeader = cookiesObjectToHeader;
