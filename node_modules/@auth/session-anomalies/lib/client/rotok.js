"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSessionAnomalies = void 0;
const frontend_env_1 = require("frontend-env");
const frontend_restclient_1 = require("frontend-restclient");
const utils_1 = require("@auth/config-service/lib/utils");
const config_1 = require("../services/config");
const metrics_1 = require("./metrics");
const constants_1 = require("../constants");
const restClient = (0, frontend_restclient_1.RestClient)({
    timeout: 100,
});
const checkSessionAnomalies = (req, platform) => {
    const { detached_id: detachedId } = req.auth.session;
    const { 
    // eslint-disable-next-line @typescript-eslint/naming-convention
    timeouts, forward_cookies, forward_headers, forward_req_as_body, } = config_1.configService.getLatestConfig();
    const cookies = req.cookies;
    const customAPIScope = cookies[constants_1.TEST_COOKIE_NAME]?.startsWith('scope_') && cookies[constants_1.TEST_COOKIE_NAME].substring(6);
    const data = {
        ...(0, utils_1.mapObjectProps)(req, forward_req_as_body),
        platform_id: platform.id,
        site_id: platform.siteId,
    };
    const forwardHeaders = (0, utils_1.mapHeaders)(req, forward_headers);
    const cookiesHeader = (0, utils_1.cookiesObjectToHeader)(cookies, forward_cookies, constants_1.BANNED_COOKIES);
    const startTime = Date.now();
    return restClient.post(`/internal/reinforcement/session/${detachedId}`, {
        data,
        timeout: frontend_env_1.PRODUCTION ? timeouts.rotok : 3000,
        context: (0, frontend_restclient_1.buildContext)(req),
        headers: {
            ...forwardHeaders,
            ...cookiesHeader && { cookie: cookiesHeader },
            'user-agent': constants_1.CLIENT_UA,
            'content-type': 'application/json;charset=utf-8',
        },
        ...customAPIScope && { params: { version: customAPIScope } },
    })
        .then((res) => {
        (0, metrics_1.logAPICallToDatadog)({ startTime, currentTimeout: timeouts.rotok });
        return res.data;
    })
        .catch((error) => {
        (0, metrics_1.logAPICallToDatadog)({ startTime, error, currentTimeout: timeouts.rotok });
        throw error;
    });
};
exports.checkSessionAnomalies = checkSessionAnomalies;
