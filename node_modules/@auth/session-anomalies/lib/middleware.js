"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionAnomalies = void 0;
const frontend_env_1 = require("frontend-env");
const frontend_platform_detection_1 = require("frontend-platform_detection");
const frontend_logger_1 = require("frontend-logger");
const constants_1 = require("./constants");
const rotok_1 = require("./client/rotok");
const config = require("frontend-config"); // eslint-disable-line import/order
const logger = (0, frontend_logger_1.LoggerFactory)('auth-session-anomalies');
const sessionAnomalies = (req, res, next) => {
    const platform = (0, frontend_platform_detection_1.getPlatform)(req.hostname);
    const shouldCheckAnomalies = platform
        && !req.device?.webView
        && req.auth?.method === 'MELI_WEB'
        && Array.isArray(req.pendingPromises)
        && (frontend_env_1.AUTH_SESSION_ANOMALIES === 'true' || (frontend_env_1.PRODUCTION && !frontend_env_1.IS_CI));
    if (!shouldCheckAnomalies) {
        return next();
    }
    const { id: platformId, siteId } = platform;
    const middlewareEnabled = config.get('sessionAnomalies.enabled', platformId, siteId);
    if (middlewareEnabled) {
        const pendingAnomalyCheck = (0, rotok_1.checkSessionAnomalies)(req, platform)
            .then((data) => {
            if (data?.token) {
                const domain = config.get('url.mainDomain.link', platformId, siteId);
                res.cookie(constants_1.ROTOK_COOKIE_NAME, data.token, {
                    domain,
                    maxAge: data.max_age * 1000,
                    httpOnly: true,
                    secure: true,
                    sameSite: false,
                });
            }
        })
            .catch((err) => {
            logger.error(`Error when checking rotok token with Session Reinforcement API. Error "${err.message}"`, {
                platform_id: platformId,
                site_id: siteId,
                user_id: req.auth.user.id,
                user_agent: req.header('user-agent'),
                url: req.hostname + req.originalUrl,
            });
        });
        req.pendingPromises.push(pendingAnomalyCheck);
    }
    return next();
};
exports.sessionAnomalies = sessionAnomalies;
