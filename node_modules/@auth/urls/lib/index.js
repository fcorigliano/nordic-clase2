"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountAccessLiteURL = exports.getRegistrationURL = exports.getLogoutURL = exports.getLoginURL = void 0;
const frontend_logger_1 = require("frontend-logger");
const config = require("frontend-config");
const logger = (0, frontend_logger_1.LoggerFactory)('@auth/urls');
/**
 * Returns the an URL for a given baseURL and params.
 */
const getURL = (baseURL, defaultsParams, customParams) => {
    const mergedParams = { ...defaultsParams, ...customParams };
    const url = new URL(baseURL);
    // eslint-disable-next-line no-restricted-syntax
    for (const [key, value] of Object.entries(mergedParams)) {
        url.searchParams.set(key, value);
    }
    return url.toString();
};
/**
 * Returns the Login URL for a given request
 */
const getLoginURL = (req) => {
    const { platform, loginParams, headers, originalUrl, xhr, } = req;
    try {
        const baseURL = config.get('url.login.link', platform.id, platform.siteId);
        const defaultParams = {
            platform_id: platform.id,
            go: `https://${headers.host}${originalUrl}`,
            loginType: 'explicit',
        };
        if (xhr) {
            defaultParams.go = headers.referer;
        }
        return getURL(baseURL, defaultParams, loginParams);
    }
    catch (err) {
        logger.error(err.message);
        return null;
    }
};
exports.getLoginURL = getLoginURL;
/**
 * Returns the Logout URL for a given request
 */
const getLogoutURL = (req) => {
    const { platform, logoutParams } = req;
    try {
        const baseURL = config.get('url.logout.link', platform.id, platform.siteId);
        return getURL(baseURL, {}, logoutParams);
    }
    catch (err) {
        logger.error(err.message);
        return null;
    }
};
exports.getLogoutURL = getLogoutURL;
/**
 * Returns the Registration URL for a given request
 */
const getRegistrationURL = (req) => {
    const { platform, registrationParams, headers, originalUrl, } = req;
    try {
        const baseURL = config.get('url.registration.link', platform.id, platform.siteId);
        const defaultParams = { confirmation_url: `https://${headers.host}${originalUrl}` };
        return getURL(baseURL, defaultParams, registrationParams);
    }
    catch (err) {
        logger.error(err.message);
        return null;
    }
};
exports.getRegistrationURL = getRegistrationURL;
const getAccountAccessLiteURL = (req) => {
    const { accessLiteParams, headers, originalUrl, query: { dps }, xhr } = req;
    const baseURL = `https://${headers.host}/registration/lite`;
    const defaultParamas = {
        callback_url: xhr ? headers.referer : `https://${headers.host}${originalUrl}`,
        ...(dps && { dps: dps }),
    };
    return getURL(baseURL, defaultParamas, accessLiteParams);
};
exports.getAccountAccessLiteURL = getAccountAccessLiteURL;
