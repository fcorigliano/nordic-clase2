const CbtUsersService = require('./services/cbt-users');
const UsersService = require('./services/users');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const log = require('frontend-logger')('cbt-users-middleware');

const CBT_SITE = 'CBT';
const CBT_SITE_COOKIE = 'cbtSiteId';
const CBT_PARAM_KEY = 'marketplace-user';
const MERCADOPAGO_PLATFORM_ID = 'MP';
const RE_ENGINEERING_USER_TAG = 'cbt_user';

const cbtUserService = new CbtUsersService();
const userService = new UsersService();

/**
 * Get User info
 *
 * @param userId
 * @returns {Object}
 */
function getUser(userId, context) {
  return userService.get(userId, context)
    .then(data => data)
    .catch(err => log.error(err));
}

/**
 * Get CBT related users from API
 *
 * @param userId
 * @returns {Object}
 */
function getRelatedUsers(userId, cbtInfo, context) {
  if (cbtInfo && cbtInfo.siteUsers) {
    return Promise.resolve(cbtInfo.siteUsers);
  }

  return cbtUserService.get(userId, context).then(data => data.site_users).catch(err => log.error(err));
}

/**
 * If the platform is MP, we obtain the data of the users and filter the ones that do not have the internal tag "cbt_user".
 *
 * @param req
 * @param siteUsers
 * @returns {Object}
 */
async function filterUsers(req, siteUsers) {
  const { cbt: cbtInfo, platform: { id: platformID } } = req;

  if (cbtInfo && cbtInfo.siteUsers) {
    return Promise.resolve(cbtInfo.siteUsers);
  }

  if (platformID === MERCADOPAGO_PLATFORM_ID && siteUsers) {
    return await Promise.all(siteUsers.map(siteUser => getUser(siteUser.user_id, buildRestClientContext(req))))
      .then(users => (siteUsers.filter(siteUser => {
        const user = users.find(user => user.id === siteUser.user_id);
        return user.internal_tags.includes(RE_ENGINEERING_USER_TAG);
      })
      ))
      .catch(err => log.error(err));
  }
  return Promise.resolve(siteUsers);
}

/**
 * Compare if is same user
 *
 * @param siteUser
 * @param currentSiteId
 * @param currentLogisticType
 * @returns {Boolean}
 */
function isSameUser(siteUser, currentSiteId, currentLogisticType) {
  return siteUser.site_id === currentSiteId &&
    siteUser.logistic_type === currentLogisticType;
}

/**
 * Parse current site user value string and returns siteId and logisticType.
 * @param value
 * @return {null} | {Array}
 */
function splitSiteUserValue(value) {
  let currentSite = null;
  const siteUserValue = value.split('-');
  if (siteUserValue.length === 2) {
    currentSite = {
      siteId: siteUserValue[0],
      logisticType: siteUserValue[1]
    }
  }
  return currentSite;
}

/**
 * Get current site user value set by URL param or cookie. If both are set, the URL param is prioritized.
 * @param siteUsers
 * @param cookieValue
 * @param paramValue
 * @return {null} | {Object}
 */
function getCurrentSiteUserValue(siteUsers, cookieValue, paramValue) {
  let siteUserValue = null;
  let currentSiteUser = null;

  if (paramValue) {
    siteUserValue = splitSiteUserValue(paramValue);
    currentSiteUser = siteUserValue ? siteUsers.find(siteUser => isSameUser(siteUser, siteUserValue.siteId, siteUserValue.logisticType)) : null;
  }

  if (!currentSiteUser && cookieValue) {
    siteUserValue = splitSiteUserValue(cookieValue);
    currentSiteUser = siteUserValue ? siteUsers.find(siteUser => isSameUser(siteUser, siteUserValue.siteId, siteUserValue.logisticType)) : null;
  }

  return currentSiteUser;
}

/**
 * Handle mapping between CBT user and site users
 */
async function cbtUsersMiddleware(req, res, next) {
  req.customUserId = req.user ? req.user.rootId : null;
  req.customSiteId = req.platform ? req.platform.siteId : null;
  if (req.user && req.user.raw.site_id === CBT_SITE) {
    await getRelatedUsers(req.user.rootId, req.cbt, buildRestClientContext(req))
      // eslint-disable-next-line consistent-return
      .then(async (response) => {
        let siteUsers = await filterUsers(req, response);

        if (!siteUsers || !siteUsers.length) {
          if (req.xhr) {
            return next(new Error(`Empty site users for user id ${req.user.rootId}`));
          } else {
            res.redirect('https://global-selling.mercadolibre.com/selling-preferences');
            return;
          }
        }

        const firstSiteUser = siteUsers[0];
        let currentSiteId = firstSiteUser.site_id;
        let currentLogisticType = firstSiteUser.logistic_type;

        let currentSiteUser = getCurrentSiteUserValue(siteUsers, req.cookies[CBT_SITE_COOKIE], req.query[CBT_PARAM_KEY]);

        if (currentSiteUser) {
          currentSiteId = currentSiteUser.site_id;
          currentLogisticType = currentSiteUser.logistic_type;
        } else {
          currentSiteUser = Object.assign({}, firstSiteUser);
          res.clearCookie(CBT_SITE_COOKIE);
        }

        res.cookie(CBT_SITE_COOKIE, `${currentSiteId}-${currentLogisticType}`, { secure: true });

        if (req.query[CBT_PARAM_KEY]) {
          let url = new URL('https://' + req.get('host') + req.originalUrl);
          url.searchParams.delete(CBT_PARAM_KEY);
          res.redirect(url);
          return;
        }

        const siteUserId = currentSiteUser.user_id;

        req.cbt = {
          siteUsers,
          siteUserId,
          currentSiteId,
          currentLogisticType
        };
        req.customUserId = siteUserId;
        req.customSiteId = currentSiteId;

        next();
      })
      .catch(err => next(err));
  } else {
    next();
  }
}

module.exports = cbtUsersMiddleware;
