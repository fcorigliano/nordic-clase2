const getModule = () => require('./props');

const defaultProps = {
  navigationUrls: {
    someMobileUrl1: {
      link: 'someMobileUrl1Link',
      name: 'someMobileUrl1Name',
    },
    someMobileUrl2: {
      link: 'someMobileUrl2Link',
      name: 'someMobileUrl2Name',
    },
    someDesktopUrl1: {
      link: 'someDesktopUrl1Link',
      name: 'someDesktopUrl1Name',
    },
    someDesktopUrl2: {
      link: 'someDesktopUrl2Link',
      name: 'someDesktopUrl2Name',
    },
  },
  platform: {
    id: 'TC',
    siteId: 'MCO',
  },
  device: {
    mobile: true,
  },
  req: 'some-request',
};

const mockConfig = ({
  props,
}) => {
  const toReturn = props.device.mobile
    ? [
      'someMobileUrl1', {
        link: 'someMobileUrl2',
      }, {
        link: 'missingUrl1',
      }]
    : [
      'someDesktopUrl1', {
        link: 'someDesktopUrl2',
      }, {
        link: 'missingUrl1',
      }];

  const getValue = jest.fn().mockReturnValue(toReturn);
  jest.doMock('classified-navigation-config', () => ({ getValue }));

  const assertCalled = () => {
    const key = props.device.mobile ? 'mobileSecondaryFooterLinks' : 'desktopFooterLinks';
    expect(getValue).toHaveBeenCalledWith({
      key,
      platform: props.platform,
      req: props.req,
    });
  };

  return {
    assertCalled,
  };
};

describe('Classifieds Navigation', () => {
  beforeEach(() => jest.resetModules());

  describe('Footer navigation props', () => {
    it('should return mobile links', () => {
      const { assertCalled } = mockConfig({
        props: defaultProps,
      });
      const props = getModule();

      const result = props(defaultProps);

      expect(result).toEqual({
        isMobile: true,
        links: [{
          href: 'someMobileUrl1Link',
          id: 'someMobileUrl1',
          name: 'someMobileUrl1Name',
        }, {
          href: 'someMobileUrl2Link',
          id: 'someMobileUrl2',
          name: 'someMobileUrl2Name',
        }],
      });
      assertCalled();
    });

    it('should return desktop links', () => {
      const testProps = {
        ...defaultProps,
        device: {
          ...defaultProps.device,
          mobile: false,
        },
      };

      const { assertCalled } = mockConfig({
        props: testProps,
      });
      const props = getModule();

      const result = props(testProps);

      expect(result).toEqual({
        isMobile: false,
        links: [{
          href: 'someDesktopUrl1Link',
          id: 'someDesktopUrl1',
          name: 'someDesktopUrl1Name',
        }, {
          href: 'someDesktopUrl2Link',
          id: 'someDesktopUrl2',
          name: 'someDesktopUrl2Name',
        }],
      });
      assertCalled();
    });
  });
});
