const propsModule = require('./props');

const defaultProps = {
  platform: {
    id: 'TC',
    siteId: 'MLV',
  },
  cdn: {},
  feConfigEnvironment: 'production',
  browser: {},
  type: 'full',
  criticalPath: {
    key: 'critical-path-key',
  },
  embedCss: true,
};

describe('Classifieds Navigation', () => {
  describe('CSS', () => {
    describe('props', () => {
      it('should return expected props', () => {
        const props = defaultProps;
        const result = propsModule(props);

        // Assert return factory result
        expect(result.platformId).toBe(props.platform.id);
        expect(result.siteId).toBe(props.platform.siteId);
        expect(result.cdn).toBe(props.cdn);
        expect(result.feConfigEnvironment).toBe(props.feConfigEnvironment);
        expect(result.browser).toBe(props.browser);
        expect(result.firstRequestInlineStyles).toBe(true);
        expect(result.embedCss).toBe(props.embedCss);
      });

      it('should return firstRequestInlineStyles true if there\'s a critical path key', () => {
        const props = defaultProps;
        const result = propsModule(props);

        // Assert return factory result
        expect(result.firstRequestInlineStyles).toBe(true);
      });

      it('should return firstRequestInlineStyles false if there\'s no critical path key', () => {
        const props = {
          ...defaultProps,
          criticalPath: {},
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.firstRequestInlineStyles).toBe(false);
      });

      it('should return undefined platform id if there\'s no platform object', () => {
        const props = {
          ...defaultProps,
          platform: null,
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.platformId).toBeUndefined();
      });

      it('should return undefined site id if there\'s no platform object', () => {
        const props = {
          ...defaultProps,
          platform: null,
        };
        const result = propsModule(props);

        // Assert return factory result
        expect(result.siteId).toBeUndefined();
      });
    });
  });
});
