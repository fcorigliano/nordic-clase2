const React = require('react');
const Css = require('../../components/css');
const ShallowRenderer = require('react-test-renderer/shallow');
const filesCache = require('../../components/css/files-cache');

jest.mock('frontend-config', () => ({
  get: jest.fn().mockImplementation((key, platformId, siteId, environment) => {
    switch (key) {
      case 'siteSpecificCSS':
        return siteId === 'site-specific-site';
      case 'uiNavigationVersion':
        return siteId === 'site-without-ui-navigation'
          ? null
          : `1.2.3-${platformId}-${siteId}-${environment || 'no-fe-environment-config'}`;
      default:
        return null;
    }
  }),
}));

jest.mock('../../services/ui-navigation', () => {
  const platformNames = {
    ML: 'mercadolibre',
    'other-platform-id': 'other-platform-name',
  };

  // eslint-disable-next-line security/detect-object-injection
  const getPlatformName = platformId => platformNames[platformId];

  const getHref = (cdn, fileName, uiNavigationVersion, platformName) => {
    const cdnBase = (cdn || {}).link || 'https://default-cdn-link.com';

    return `${cdnBase}/frontend-assets/ui-navigation/${uiNavigationVersion}/${platformName}/${fileName}`;
  };

  return {
    getPlatformName,
    getHref,
  };
});

jest.mock('../../components/css/files-cache');

const files = [{
  name: 'navigation-desktop',
  media: '(min-width: 1024px)',
}, {
  name: 'navigation-mobile',
  media: '(max-width: 1023px)',
}];

describe('Commons', () => {
  afterAll(() => jest.clearAllMocks());

  describe('Css component', () => {
    it('should match snapshot with hidden navigation type', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          navigationType="hidden"
          files={files}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with no files', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css files={[]} />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with no ui navigation version', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          siteId="site-without-ui-navigation"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with no platform name', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          platformId="unknown-platform"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with linked styles files and default properties', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css files={files} />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with linked styles and custom properties', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          platformId="other-platform-id"
          siteId="other-site-id"
          feConfigEnvironment="other-fe-config-environment"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with linked styles and cdn configuration', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          cdn={{
            link: 'https://custom-cdn.mercadolibre.com',
          }}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot with site-specific linked styles', () => {
      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          siteId="site-specific-site"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();
    });

    it('should match snapshot for embedded styles and default properties', () => {
      filesCache.getFileContent.mockImplementation(options => `Content for:\n${JSON.stringify(options, null, 2)}`);

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          embedCss
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId: 'ML',
        siteId: 'MLA',
        environment: null,
        uiNavigationVersion: '1.2.3-ML-MLA-no-fe-environment-config',
        platformName: 'mercadolibre',
        addConfigUpdateHandler: null,
        configGetter: null,
      }));
    });

    it('should match snapshot for embedded styles and custom properties', () => {
      filesCache.getFileContent.mockImplementation(options => `Content for:\n${JSON.stringify(options, null, 2)}`);

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          embedCss
          platformId="other-platform-id"
          siteId="other-site-id"
          feConfigEnvironment="other-fe-config-environment"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId: 'other-platform-id',
        siteId: 'other-site-id',
        environment: 'other-fe-config-environment',
        uiNavigationVersion: '1.2.3-other-platform-id-other-site-id-other-fe-config-environment',
        platformName: 'other-platform-name',
        addConfigUpdateHandler: null,
        configGetter: null,
      }));
    });

    it('should match fallback snapshot for embedded styles with no file content', () => {
      filesCache.getFileContent.mockReturnValue(null);

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files}
          embedCss
          platformId="other-platform-id"
          siteId="other-site-id"
          feConfigEnvironment="other-fe-config-environment"
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId: 'other-platform-id',
        siteId: 'other-site-id',
        environment: 'other-fe-config-environment',
        uiNavigationVersion: '1.2.3-other-platform-id-other-site-id-other-fe-config-environment',
        platformName: 'other-platform-name',
        addConfigUpdateHandler: null,
        configGetter: null,
      }));
    });

    it('should match snapshot for firstRequestInlineStyles styles and default properties', () => {
      filesCache.getFileContent.mockImplementation(options => `Content for:\n${JSON.stringify(options, null, 2)}`);

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files.map(file => ({
            ...file,
            firstRequestInlineStyles: true,
          }))}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId: 'ML',
        siteId: 'MLA',
        feConfigEnvironment: null,
        uiNavigationVersion: '1.2.3-ML-MLA-no-fe-environment-config',
        platformName: 'mercadolibre',
      }));
    });

    it('should match snapshot for firstRequestInlineStyles styles and custom properties', () => {
      filesCache.getFileContent.mockImplementation(options => `Content for:\n${JSON.stringify(options, null, 2)}`);

      const platformId = 'other-platform-id';
      const siteId = 'other-site-id';
      const feConfigEnvironment = 'other-fe-config-environment';

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files.map(file => ({
            ...file,
            firstRequestInlineStyles: true,
          }))}
          platformId={platformId}
          siteId={siteId}
          feConfigEnvironment={feConfigEnvironment}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId,
        siteId,
        feConfigEnvironment,
        uiNavigationVersion: '1.2.3-other-platform-id-other-site-id-other-fe-config-environment',
        platformName: 'other-platform-name',
      }));
    });

    it('should match snapshot for firstRequestInlineStyles styles without content', () => {
      filesCache.getFileContent.mockReturnValue(null);

      const platformId = 'other-platform-id';
      const siteId = 'other-site-id';
      const feConfigEnvironment = 'other-fe-config-environment';

      const renderer = new ShallowRenderer();
      const component = (
        <Css
          files={files.map(file => ({
            ...file,
            firstRequestInlineStyles: true,
          }))}
          platformId={platformId}
          siteId={siteId}
          feConfigEnvironment={feConfigEnvironment}
        />
      );

      const renderedComponent = renderer.render(component);

      expect(renderedComponent).toMatchSnapshot();

      files.forEach(file => expect(filesCache.getFileContent).toHaveBeenCalledWith({
        fileName: `${file.name}.css`,
        platformId,
        siteId,
        feConfigEnvironment,
        uiNavigationVersion: '1.2.3-other-platform-id-other-site-id-other-fe-config-environment',
        platformName: 'other-platform-name',
      }));
    });
  });
});
