import scss from 'rollup-plugin-scss';
import { version } from './package.json';
import {
  join,
  resolve,
} from 'path';
import postcss from 'postcss';
import autoprefixer from 'autoprefixer';
import url from 'postcss-url';
import postCssBanner from 'postcss-banner';
import normalizeCharset from 'postcss-normalize-charset';
import {
  writeFileSync,
  readdirSync,
} from 'fs';
import copy from 'rollup-plugin-copy';

const isDevelopment = process.env.NODE_ENV === 'development';

const businessUnits = [
  'tucarro',
  'metroscubicos',
];

const cdnBase = isDevelopment
  ? `http://localhost:8081`
  : `https://http2.mlstatic.com`;
const urlBase = `${cdnBase}/frontend-assets/vis-web-navigation/ui-navigation/${version}`;

const businessUnitPath = 'business-unit-path/';

const getFileConfig = ({
  name,
  copyImageFiles,
  entryPointsRelativeFolder,
  entryPointsAbsoluteFolder,
  businessUnit,
}) => {
  const jsFileName = `${entryPointsRelativeFolder}/${name}.js`;

  writeFileSync(join(entryPointsAbsoluteFolder, `${name}.js`), `import './${name}.scss';`);

  const outputFolder = join(resolve('.'), `object-storage-assets/ui-navigation/${version}/${businessUnit}`);

  const bannerContent = `Navigation
@platform "${businessUnit}"
@version ${version}
@author MercadoLibre.com`;

  return {
    input: jsFileName,
    output: {
      file: join(outputFolder, `${name}.js`),
      format: 'esm',
    },
    plugins: [
      scss({
        processor: () => postcss([
          autoprefixer({
            overrideBrowserslist: [
              'chrome >= 22',
              'firefox >= 24',
              'android >= 4.4',
              'safari >= 7',
              'ie 11',
              'not dead',
            ],
            flexbox: 'no-2009',
          }),
          url([{
            filter: `${businessUnitPath}*`,
            url: asset => `${urlBase}/${businessUnit}/${asset.url.slice(businessUnitPath.length)}`,
          }]),
          postCssBanner({
            banner: bannerContent,
          }),
          normalizeCharset(true),
        ]),
        outputStyle: 'compressed',
      }),
    ].concat(copyImageFiles
      ? copy({
        targets: [
          { src: `src/images/${businessUnit}/*`, dest: outputFolder },
        ]
      })
      : []
    ),
  };
};

const fileExtension = '.scss';


const entryPoints = businessUnits.reduce((tempEntryPoints, businessUnit) => {
  const entryPointsRelativeFolder = `./src/css/${businessUnit}/entry-points`;
  const entryPointsAbsoluteFolder = join(resolve('.'), entryPointsRelativeFolder);

  const buEntryPoints = readdirSync(entryPointsAbsoluteFolder, { withFileTypes: true })
    .filter((entry) => !entry.isDirectory() && entry.name.endsWith(fileExtension))
    .map(({ name }, index) => getFileConfig({
      name: name.slice(0, - fileExtension.length),
      copyImageFiles: !index,
      entryPointsRelativeFolder,
      entryPointsAbsoluteFolder,
      businessUnit,
    }));

  if (!buEntryPoints.length) {
    throw new Error('No scss files where found');
  }

  return tempEntryPoints.concat(buEntryPoints);
}, []);

export default entryPoints;