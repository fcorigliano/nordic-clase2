describe('build', () => {
  beforeEach(() => {
    jest.resetModules();
  });

  test('should call index.js generateBuildFiles function', () => {
    const generateBuildFiles = jest.fn();
    jest.doMock('.', () => ({ generateBuildFiles }));
    require('./build');
    expect(generateBuildFiles).toHaveBeenCalled();
  });

  test('should call index.js generateBuildFiles function and fails by an error', () => {
    const generateBuildFiles = jest.fn().mockImplementation(() => { throw new Error(); });
    const mockExit = jest.spyOn(process, 'exit').mockImplementation(() => { throw new Error('Mock'); });
    const mockLogError = jest.spyOn(console, 'error').mockImplementation(() => { });
    jest.doMock('.', () => ({ generateBuildFiles }));
    expect(() => {
      require('./build');
    }).toThrow();
    expect(mockExit).toHaveBeenCalled();
    expect(mockLogError).toHaveBeenCalledWith(expect.any(String));
  });
});
