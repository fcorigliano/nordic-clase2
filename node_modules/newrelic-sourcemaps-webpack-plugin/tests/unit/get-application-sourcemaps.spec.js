jest.mock('@newrelic/publish-sourcemap');

const getApplicationSourcemaps = require('../../lib/get-application-sourcemaps');

const fakeOptions = {
  apiKey: 'xxx',
  applicationId: '111',
};

describe('getApplicationSourcemaps', () => {
  test('should return a map of application sourcemaps', async () => {
    require('@newrelic/publish-sourcemap').__mockSourcemaps(null, {
      sourcemaps: [
        {
          id: '123',
          javascriptUrl: 'https://http2.mlstatic.com/frontend-assets/frontend/123.js',
          createdAt: '2021-07-01T01:00:00.000Z',
        },
      ],
    });

    const maps = await getApplicationSourcemaps(fakeOptions);
    const expected = new Map();
    expected.set('https://http2.mlstatic.com/frontend-assets/frontend/123.js', {
      createdAt: '2021-07-01T01:00:00.000Z',
      id: '123',
    });
    expect(maps).toEqual(expected);
  });

  test('should return an empty Map when no credentials are present', async () => {
    require('@newrelic/publish-sourcemap').__mockSourcemaps(null, {
      sourcemaps: [
        {
          id: '123',
          javascriptUrl: 'https://http2.mlstatic.com/frontend-assets/frontend/123.js',
          createdAt: '2021-07-01T01:00:00.000Z',
        },
      ],
    });

    const maps = await getApplicationSourcemaps({});
    expect(maps).toEqual(new Map());
  });

  test('should not throw an error when New Relic API call fails', async () => {
    require('@newrelic/publish-sourcemap').__mockSourcemaps(new Error('Connection error'));

    expect(async () => { await getApplicationSourcemaps(fakeOptions); }).not.toThrow();
  });
});
