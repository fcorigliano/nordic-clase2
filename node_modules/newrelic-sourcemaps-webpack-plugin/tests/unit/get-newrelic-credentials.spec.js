jest.mock('https');

const fakeCredentials = {
  applicationName: 'home',
  applicationId: ['123'],
  apiKey: 'NRAK-123',
};
const sampleData = [{ name: 'mla.home', id: '111' }, { name: 'mlb.home', id: '222' }];

describe('getNewrelicCredentials', () => {
  const originalEnv = process.env;

  beforeEach(() => {
    jest.resetModules();
    process.env = { ...originalEnv };
  });

  afterEach(() => {
    process.env = originalEnv;
  });

  test('should return the list of associated applications using the api key from env', async () => {
    require('https').__mockResponse(200, {
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        browser_applications: sampleData,
      }),
    });

    process.env.NR_ADMIN_KEY = 'NRAK-12345';

    const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');
    const credentials = await getNewrelicCredentials(fakeCredentials.applicationName);
    expect(credentials.applicationId).toEqual(['111', '222']);
    expect(credentials.apiKey.length).toBeGreaterThan(0);
    expect(credentials.applicationName).toEqual('home');
  });

  test('should return the list of applications using the custom api key', async () => {
    require('https').__mockResponse(200, {
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        browser_applications: sampleData,
      }),
    });

    const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');
    const credentials = await getNewrelicCredentials(fakeCredentials.applicationName, undefined, fakeCredentials.apiKey);
    expect(credentials.applicationId).toEqual(['111', '222']);
    expect(credentials.apiKey).toEqual(fakeCredentials.apiKey);
  });

  test('should not throw when New Relic API call fails', async () => {
    require('https').__mockResponse(500, {
      headers: {},
      body: JSON.stringify({}),
    });

    const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');
    const credentials = await getNewrelicCredentials(fakeCredentials.applicationName);
    expect(credentials.applicationId).toEqual(null);
    expect(credentials.applicationName).toEqual(fakeCredentials.applicationName);
  });

  test('should not trow when New Relic responds with malformed body', async () => {
    require('https').__mockResponse(200, {
      headers: {},
      body: '{function}',
    });

    const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');
    const credentials = await getNewrelicCredentials(fakeCredentials.applicationName);
    expect(credentials.applicationId).toEqual(null);
    expect(credentials.applicationName).toEqual(fakeCredentials.applicationName);
  });

  test('should not make a call to New Relic when credentials are already resolved for particular app', async () => {
    const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');
    const credentials = await getNewrelicCredentials(fakeCredentials.applicationName, fakeCredentials.applicationId);
    expect(credentials.applicationId).toEqual(fakeCredentials.applicationId);
    expect(credentials.applicationName).toEqual(fakeCredentials.applicationName);
  });
});
