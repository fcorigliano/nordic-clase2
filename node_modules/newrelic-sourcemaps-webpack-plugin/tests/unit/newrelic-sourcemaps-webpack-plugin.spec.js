const NewrelicSourcemapsPlugin = require('../../index');

jest.mock('../../lib/get-newrelic-credentials');
const getNewrelicCredentials = require('../../lib/get-newrelic-credentials');

const compiler = {
  hooks: {
    done: {
      tapPromise: jest.fn(),
    },
  },
};

beforeEach(() => {
  jest.clearAllMocks();
});

test('it doesnt throw an error if there is no application id if noop is true', () => {
  const testFn = () => {
    new NewrelicSourcemapsPlugin({
      noop: true,
    });
  };
  expect(testFn).not.toThrowError();
});

test('it throw an error if there is no publicPath', () => {
  const testFn = () => {
    new NewrelicSourcemapsPlugin({
      noop: false,
    });
  };
  expect(testFn).toThrowError('publicPath is required');
});

test('it accepts a user defined staticAssetUrlBuilder', () => {
  const staticAssetUrlBuilder = () => 'custom.js';
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    publicPath: 'url',
    staticAssetUrlBuilder,
  });
  expect(nr.staticAssetUrlBuilder).toBe(staticAssetUrlBuilder);
});

test('it defaults the staticAssetUrlBuilder to the module', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    publicPath: 'url',
  });
  expect(nr.staticAssetUrlBuilder).toBe(require('../../lib/default-asset-url-builder'));
});

test('it accepts a user defined extensionRegex', () => {
  const extensionRegex = /test/;
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    publicPath: 'url',
    extensionRegex,
  });
  expect(nr.extensionRegex).toBe(extensionRegex);
});

test('it defaults the extensionRegex to /.js$/', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    publicPath: 'url',
  });
  expect(nr.extensionRegex).toEqual(/\.js$/);
});

test('if noop it returns an instance with an apply method', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: true,
    publicPath: 'url',
  });
  expect(nr.apply).toEqual(expect.any(Function));
});

test('if noop is passed it sets apply to a noop', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: true,
    publicPath: 'url',
  });
  nr.apply();
  expect(getNewrelicCredentials).not.toBeCalled();
});

test('apply adds a callback to the compiler done event', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    publicPath: 'url',
  });
  nr.apply(compiler);
  expect(compiler.hooks.done.tapPromise).toBeCalledWith('NewrelicSourcemapsPlugin', expect.any(Function));
});

it('passes needed configs to getNewrelicCredentials', () => {
  const nr = new NewrelicSourcemapsPlugin({
    noop: false,
    applicationName: 'name',
    applicationId: 'id',
    apiKey: 'key',
    publicPath: 'url',
  });
  const stats = {
    compilation: {
      assets: {},
      outputOptions: {
        publicPath: 'path',
      },
    },
  };
  compiler.hooks.done.tapPromise.mockImplementation((name, cb) => {
    cb(stats);
  });
  nr.apply(compiler);
  expect(getNewrelicCredentials).toBeCalledWith('name', 'id', 'key');
});
