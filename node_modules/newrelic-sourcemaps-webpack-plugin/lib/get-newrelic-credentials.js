const https = require('https');

const DEFAULT_NR_ADMIN_KEY = process.env.NR_ADMIN_KEY;

module.exports = async function newrelicCredentials(applicationName, applicationId, apiKey) {
  const credentials = {
    applicationId: null,
    applicationName: null,
    apiKey: null,
  };

  return new Promise((resolve) => { // eslint-disable-line consistent-return
    if (typeof applicationName !== 'undefined') {
      credentials.applicationName = applicationName;
    }
    if (typeof applicationId !== 'undefined') {
      credentials.applicationId = applicationId;
    }
    if (typeof apiKey !== 'undefined') {
      credentials.apiKey = apiKey;
    }

    credentials.apiKey = credentials.apiKey || DEFAULT_NR_ADMIN_KEY;
    credentials.applicationName = credentials.applicationName || process.env.APPLICATION || process.env.npm_package_name;

    // When credentials is already resolved avoid additional requests to NewRelic API by returning them immediately
    if (credentials.applicationId && credentials.apiKey && (!applicationName || applicationName === credentials.applicationName)) {
      return resolve(credentials);
    }

    // Insufficient parameters to make a call to NewRelic API
    if (!credentials.apiKey || !credentials.applicationName) {
      return resolve(credentials);
    }

    // https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/add-or-list-browser-apps-api-v2/
    const options = {
      hostname: 'api.newrelic.com',
      port: 443,
      path: `/v2/browser_applications.json?filter[name]=.${credentials.applicationName}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Api-Key': credentials.apiKey,
      },
    };

    const req = https.request(options, (res) => { // eslint-disable-line consistent-return
      res.setEncoding('utf8');

      if (res.statusCode !== 200) {
        return resolve(credentials);
      }

      const body = [];

      res.on('data', (chunk) => {
        body.push(chunk);
      });

      res.on('end', () => {
        try {
          const data = JSON.parse(body.join(''));
          if (Array.isArray(data.browser_applications)) {
            credentials.applicationId = data.browser_applications
              .filter(app => !/.*test.*\..+/.test(app.name)) // By default avoid test scopes to minimize the quantity of apps to upload to
              .map(app => app.id);
          }
          resolve(credentials);
        } catch (e) {
          console.log('Cannot fetch credentials from NewRelic API', e);
          resolve(credentials);
        }
      });
    });

    req.on('error', (e) => {
      console.error(e);
    });

    req.end();
  });
};
