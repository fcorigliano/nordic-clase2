const https = jest.createMockFromModule('https');
const http = require('http');
const { EventEmitter } = require('events');

const { IncomingMessage } = http;

let responseData = Object.create(null);

/**
 *
 * @param status {number} Status code for response
 * @param data {object} Response data
 * @param data.headers {object} A map of response headers
 * @param data.body {string} Response body
 * @private
 */
function __mockResponse(status = 200, data = {}) {
  responseData.status = status;
  responseData.headers = data.headers || {};
  responseData.body = data.body || '';
}

function request(opts, cb) {
  const req = new EventEmitter();
  const res = new IncomingMessage(new EventEmitter());

  req.res = res;
  res.method = opts.method || 'GET';
  res.statusCode = Number(responseData.status) || 200;
  res.statusMessage = responseData.statusText || http.STATUS_CODES[res.statusCode];
  res.url = opts.href || `https://${opts.hostname}:${opts.port}${opts.path}`;
  res.headers = {};
  res.rawHeaders = [];

  Object.keys(responseData.headers).forEach((k) => {
    res.headers[k.toLowerCase()] = responseData.headers[k];
    res.rawHeaders.push(k, responseData.headers[k]);
  });

  req.end = function () {
    res.emit('data', responseData.body);
    res.emit('end', null);
  };

  ['setEncoding', 'setKeepAlive', 'setNoDelay'].forEach((key) => {
    req[key] = function () {};
  });

  cb(res);

  return req;
}

https.__mockResponse = __mockResponse;
https.request = request;

module.exports = https;
