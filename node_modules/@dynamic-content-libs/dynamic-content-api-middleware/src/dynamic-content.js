const restClient = require('frontend-restclient');
const buildRestClientContext = require('frontend-restclient/src/build-context');
const {
  TEST,
  TESTING_MY_MODULE_RENDER_DYNAMIC_CONTENT,
  APPLICATION,
  SCOPE,
  IS_CI,
  FURY,
  NODE_ENV,
} = require('frontend-env');
const { getDynamicContent } = require('@dynamic-content-libs/dynamic-content-handler');
const feConfig = require('frontend-config');
const { NONE } = require('@dynamic-content-libs/common/src/constants/response-types');
const { getUserId } = require('./services/users');
const { isExampleApplication } = require('./services/applications');
const { getExperimentsData } = require('./services/dynamic-content');
const { userPreferences: userPreferencesNameSpace } = require('./constants/namespaces');
const {
  cookiesPreferencesPromiseError,
  dynamicContentAPIError,
} = require('./constants/statsd');
const { error: logError } = require('./logger');
const { send: sendStat } = require('./statsd');
const { dynamicContent: requestConstants } = require('./constants/requests');

const clientInstance = restClient(requestConstants.restClientConfig);

let layoutVersion;
const getLayoutVersion = () => {
  if (layoutVersion === undefined) {
    try {
      // eslint-disable-next-line global-require, import/no-extraneous-dependencies
      layoutVersion = require('frontend-layout/package.json').version;
    } catch (e) {
      layoutVersion = null;
    }
  }

  return layoutVersion;
};

const resolveTypeNone = Promise.resolve({
  type: NONE,
});

const isExampleApp = isExampleApplication();

const getRequestPromise = ({
  req,
  dynamicContentData,
}) => {
  if (isExampleApp && req.query.fallback === 'true') {
    return Promise.reject();
  }

  const {
    scopeHeader,
    labCookie,
    localScopeHeaderValue,
    localBaseUrl,
    url,
  } = requestConstants;

  const scopeHeaderValue = req.headers[scopeHeader];

  const isCompanyRequest = req.cookies[labCookie];

  const headersOverride = isCompanyRequest && scopeHeaderValue
    ? {
      headers: {
        [scopeHeader]: scopeHeaderValue,
      },
    }
    : null;

  const baseUrlOverride = isCompanyRequest && isExampleApp && scopeHeaderValue === localScopeHeaderValue
    ? { baseURL: localBaseUrl }
    : null;

  return clientInstance.post(url, {
    context: buildRestClientContext(req),
    data: dynamicContentData,
    ...headersOverride,
    ...baseUrlOverride,
  });
};

const get = (req, dynamicContentOptions) => {
  if (
    (TEST || IS_CI || TESTING_MY_MODULE_RENDER_DYNAMIC_CONTENT === 'false')
    && (TESTING_MY_MODULE_RENDER_DYNAMIC_CONTENT !== 'true')
  ) {
    return resolveTypeNone;
  }

  try {
    const requestUserPreferences = req[userPreferencesNameSpace];
    const userPreferencesPromise = requestUserPreferences && requestUserPreferences.getCookiesUserPreferences();

    const platformWithDefault = req.platform || {};
    const platformId = platformWithDefault.id || null;
    const siteId = platformWithDefault.siteId || null;

    const feConfigEnvironment = feConfig.getEnvironment(req);

    const domain = platformWithDefault.domain || null;

    if (!platformId || !siteId || !domain) {
      // TODO - log kibana ddog
      return resolveTypeNone;
    }

    return userPreferencesPromise
      .then((userPreferences) => {
        const {
          cookie,
          ...headers
        } = req.headers;

        const platform = {
          id: platformId,
          siteId,
          domain,
        };

        const envVariables = {
          IS_CI,
          FURY,
          NODE_ENV,
        };

        const dynamicContentData = {
          dynamicContentOptions,
          userId: getUserId(req),
          userPreferences,
          applicationId: APPLICATION || null,
          scopeId: SCOPE || null,
          headers,
          cookies: req.cookies,
          device: req.device || null,
          browser: req.browser || null,
          feConfigEnvironment,
          layoutVersion: getLayoutVersion(),
          platform,
          experiments: getExperimentsData(req),
          envVariables,
          originalUrl: req.originalUrl,
        };

        const requestPromise = getRequestPromise({
          req,
          dynamicContentData,
        });

        return requestPromise
          // eslint-disable-next-line arrow-body-style
          .then(response => {
            return response.data;
          })
          .catch((error) => {
            // dynamic content API error
            sendStat(dynamicContentAPIError, req);
            logError('Error getting dynamic content from API', {
              req,
              error,
            });

            return getDynamicContent({
              ...dynamicContentData,
              mocks: (isExampleApp && req.dynamicContentMocks) || null,
              isFallback: true,
            });
          });
      })

      // cookies-preferences API error - do not log as it was logged by that middleware itself
      .catch(() => resolveTypeNone);
  } catch (error) {
    // Error getting cookies-preferences promise
    sendStat(cookiesPreferencesPromiseError, req);
    logError('Error getting cookies-preferences promise', {
      req,
      error,
    });

    return resolveTypeNone;
  }
};

module.exports = {
  get,
};
