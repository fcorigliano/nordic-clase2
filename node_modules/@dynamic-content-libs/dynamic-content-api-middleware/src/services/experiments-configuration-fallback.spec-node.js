const { seedSources } = require('../constants/experiments');
const { configurationFallbackUnknownError } = require('../constants/statsd');

const getService = () => require('./experiments-configuration-fallback');

const defaultResult = {};

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
  user: {
    id: 'some-id',
  },
};

const experimentConfig = {
  name: 'some-experiment-name',
  preferredSeedSource: 'some-seed',
  configurationKeys: [
    'some-configuration-key-1',
    'some-configuration-key-2',
  ],
  variantsFallback: {
    variants: [{
      id: 6183,
      configuration: {
        variant: 'bottom',
      },
    }, {
      id: 6184,
      configuration: {
        variant: 'modal',
      },
    }, {
      id: 6686,
      configuration: {
        variant: 'disclaimer',
      },
    }],
    exposure: {
      default: {
        6183: 0,
        6184: 0,
        6686: 100,
      },
      sites: {
        MPE: [{
          platforms: null,
          variants: {
            6183: 2,
            6184: 2,
            6686: 96,
          },
        }],
        MLA: [{
          platforms: null,
          variants: {
            6183: 100,
            6184: 0,
            6686: 0,
          },
        }],
      },
    },
  },
};

const seedSource = seedSources.uid;

const platform = {
  id: 'MP',
  siteId: 'MLB',
  domain: 'mercadopago.com.br',
};

const cookies = {
  'some-other-cookie': 'some-other-cookie-value',
};

const headers = {
  'some-other-header': 'some-other-header-value',
};

const userId = 'some-other-user-id';

const defaultSeed = 'some-seed';

const mockSeedsService = () => {
  const getSeed = jest.fn().mockReturnValue(defaultSeed);
  jest.doMock('./seeds', () => ({ getSeed }));

  const assertSeedsCalled = ({
    seedSource: assertSeedSource,
    req: assertReq,
    headers: assertHeaders,
    cookies: assertCookies,
    userId: assertUserId,
  } = {}) => {
    expect(getSeed).toHaveBeenCalledWith({
      seedSource: assertSeedSource,
      req: assertReq,
      headers: assertHeaders,
      cookies: assertCookies,
      userId: assertUserId,
    });
  };

  return {
    assertSeedsCalled,
  };
};

const mockHashsingService = ({ selectedVariant }) => {
  const getApplicableVariant = jest.fn().mockReturnValue(selectedVariant);
  jest.doMock('./experiments-hashing-service', () => ({ getApplicableVariant }));

  const assertHashingCalled = ({
    experimentHashingServiceConfiguration: config,
    userId: assertUserId,
  } = {}) => {
    expect(getApplicableVariant).toHaveBeenCalledWith(defaultSeed, config, null, null, assertUserId);
  };

  return {
    assertHashingCalled,
  };
};

describe('Experiments configuration fallback service', () => {
  beforeEach(() => jest.resetModules());

  describe('getConfigurationFallback', () => {
    it('should return the default configuration if there is no experimentConfig', () => {
      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({ experimentConfig: null });

      expect(result).toEqual(defaultResult);
    });

    it('should return the default configuration if there is no experimentConfig variantsFallback', () => {
      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig: {
          ...experimentConfig,
          variantsFallback: null,
        },
      });

      expect(result).toEqual(defaultResult);
    });

    it('should return the default configuration if there is no site id on provided platform', () => {
      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        platform: {
          ...platform,
          siteId: null,
        },
        req,
      });

      expect(result).toEqual(defaultResult);
    });

    it('should return the default configuration if there is no site id on req platform', () => {
      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req: {
          ...req,
          platform: {
            ...req.platform,
            siteId: null,
          },
        },
      });

      expect(result).toEqual(defaultResult);
    });

    // eslint-disable-next-line max-len
    it('should return the default configuration if there is no selected variant from hashing service passing a site id with custom configuration', () => {
      const {
        assertSeedsCalled,
      } = mockSeedsService();

      const { assertHashingCalled } = mockHashsingService({ selectedVariant: null });

      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });

      expect(result).toEqual(defaultResult);
      assertSeedsCalled({
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });
      assertHashingCalled({
        userId,
        experimentHashingServiceConfiguration: {
          name: experimentConfig.name,
          variants: [{
            exposure: 100,
            id: 6183,
            whitelisted_seeds: [],
          }, {
            exposure: 0,
            id: 6184,
            whitelisted_seeds: [],
          }, {
            exposure: 0,
            id: 6686,
            whitelisted_seeds: [],
          }],
        },
      });
    });

    // eslint-disable-next-line max-len
    it('should return the default configuration if there is no selected variant from hashing service passing a site id with default configuration', () => {
      const {
        assertSeedsCalled,
      } = mockSeedsService();

      const { assertHashingCalled } = mockHashsingService({ selectedVariant: null });

      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req,
        seedSource,
        headers,
        cookies,
        userId,
        platform,
      });

      expect(result).toEqual(defaultResult);
      assertSeedsCalled({
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });
      assertHashingCalled({
        userId,
        experimentHashingServiceConfiguration: {
          name: experimentConfig.name,
          variants: [{
            exposure: 0,
            id: 6183,
            whitelisted_seeds: [],
          }, {
            exposure: 0,
            id: 6184,
            whitelisted_seeds: [],
          }, {
            exposure: 100,
            id: 6686,
            whitelisted_seeds: [],
          }],
        },
      });
    });

    it('should return the default configuration if the hashing service selected variant is not found', () => {
      const {
        assertSeedsCalled,
      } = mockSeedsService();

      const { assertHashingCalled } = mockHashsingService({
        selectedVariant: {
          id: 'some-unknown-id',
        },
      });

      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req,
        seedSource,
        headers,
        cookies,
        userId,
        platform,
      });

      expect(result).toEqual(defaultResult);
      assertSeedsCalled({
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });
      assertHashingCalled({
        userId,
        experimentHashingServiceConfiguration: {
          name: experimentConfig.name,
          variants: [{
            exposure: 0,
            id: 6183,
            whitelisted_seeds: [],
          }, {
            exposure: 0,
            id: 6184,
            whitelisted_seeds: [],
          }, {
            exposure: 100,
            id: 6686,
            whitelisted_seeds: [],
          }],
        },
      });
    });

    it('should return the default configuration if the hashing service selected variant is not found', () => {
      const {
        assertSeedsCalled,
      } = mockSeedsService();

      const selectedVariant = experimentConfig.variantsFallback.variants[0];
      const { assertHashingCalled } = mockHashsingService({
        selectedVariant: {
          id: selectedVariant.id,
        },
      });

      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req,
        seedSource,
        headers,
        cookies,
        userId,
        platform,
      });

      expect(result).toEqual(selectedVariant.configuration);
      assertSeedsCalled({
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });
      assertHashingCalled({
        userId,
        experimentHashingServiceConfiguration: {
          name: experimentConfig.name,
          variants: [{
            exposure: 0,
            id: 6183,
            whitelisted_seeds: [],
          }, {
            exposure: 0,
            id: 6184,
            whitelisted_seeds: [],
          }, {
            exposure: 100,
            id: 6686,
            whitelisted_seeds: [],
          }],
        },
      });
    });

    it('should return the default configuration if something fails', () => {
      const errorObject = new Error('some message');
      const getSeed = jest.fn().mockImplementation(() => {
        throw errorObject;
      });

      jest.doMock('./seeds', () => ({ getSeed }));

      const error = jest.fn();
      jest.doMock('./logger', () => ({ error }));

      const send = jest.fn();
      jest.doMock('./statsd', () => ({ send }));

      const { getConfigurationFallback } = getService();

      const result = getConfigurationFallback({
        experimentConfig,
        req,
        seedSource,
        headers,
        cookies,
        userId,
      });

      expect(result).toEqual(defaultResult);
      expect(getSeed).toHaveBeenCalledWith({
        seedSource,
        req,
        headers,
        cookies,
        userId,
      });

      expect(error).toHaveBeenCalledWith('Error getting configuration fallback', {
        platformId: req.platform.id,
        siteId: req.platform.siteId,
        error: errorObject,
      });

      expect(send).toHaveBeenCalledWith(configurationFallbackUnknownError);
    });
  });
});
