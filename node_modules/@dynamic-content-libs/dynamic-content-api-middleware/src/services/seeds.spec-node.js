const { seedSources } = require('../constants/experiments');

const getService = () => require('./seeds');

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
  user: {
    id: 'some-id',
  },
};

const cookies = {
  'some-other-cookie': 'some-other-cookie-value',
};

const headers = {
  'some-other-header': 'some-other-header-value',
};

const userId = 'some-user-id';

const defaultD2id = 'some-d2id';

const mockD2idService = () => {
  const getD2Id = jest.fn().mockReturnValue(defaultD2id);
  jest.doMock('./d2id', () => ({ getD2Id }));

  const assertD2idCalled = ({
    req: assertReq,
    headers: assertHeaders,
    cookies: assertCookies,
  } = {}) => {
    expect(getD2Id).toHaveBeenCalledWith({
      req: assertReq,
      headers: assertHeaders,
      cookies: assertCookies,
    });
  };

  return {
    assertD2idCalled,
  };
};

const mockUsersService = () => {
  const getUserId = jest.fn().mockReturnValue(req.user.id);
  jest.doMock('./users', () => ({ getUserId }));

  const assertUsersCalled = () => expect(getUserId).toHaveBeenCalledWith(req);

  return {
    assertUsersCalled,
  };
};

describe('Seeds service', () => {
  beforeEach(() => jest.resetModules());

  describe('getSeed', () => {
    describe('d2id', () => {
      it('should return a d2id if seed source is uid', () => {
        const { assertD2idCalled } = mockD2idService();

        const { getSeed } = getService();

        const result = getSeed({
          seedSource: seedSources.uid,
          req,
          headers,
          cookies,
          userId,
        });

        expect(result).toEqual(defaultD2id);
        assertD2idCalled({
          req,
          headers,
          cookies,
        });
      });
    });

    describe('userId', () => {
      it('should return provided userId if seed source is user id', () => {
        const { getSeed } = getService();

        const result = getSeed({
          seedSource: seedSources.userId,
          req,
          headers,
          cookies,
          userId,
        });

        expect(result).toEqual(userId);
      });

      it('should return request userId if seed source is user id', () => {
        const { assertUsersCalled } = mockUsersService();
        const { getSeed } = getService();

        const result = getSeed({
          seedSource: seedSources.userId,
          req,
          headers,
          cookies,
        });

        expect(result).toEqual(req.user.id);
        assertUsersCalled();
      });

      it('should return null if seed source is user id and req was not provided', () => {
        const { getSeed } = getService();

        const result = getSeed({
          seedSource: seedSources.userId,
          req: null,
          headers,
          cookies,
        });

        expect(result).toEqual(null);
      });
    });

    describe('unknown seed source', () => {
      it('should return null if seed source is unknown', () => {
        const { getSeed } = getService();

        const result = getSeed({
          seedSource: 'some-other-seed-source',
          req,
          headers,
          cookies,
        });

        expect(result).toEqual(null);
      });
    });
  });
});
