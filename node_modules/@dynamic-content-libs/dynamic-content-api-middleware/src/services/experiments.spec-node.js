const { seedSources } = require('../constants/experiments');

const getService = () => require('./experiments');

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
  user: {
    id: 'some-id',
  },
};

const experimentConfig = {
  name: 'some-experiment-name',
  preferredSeedSource: 'some-seed-source',
  configurationKeys: [
    'some-configuration-key-1',
    'some-configuration-key-2',
  ],
};

const cookies = {
  'some-other-cookie': 'some-other-cookie-value',
};

const headers = {
  'some-other-header': 'some-other-header-value',
};

const device = {
  type: 'desktop',
};

const platform = {
  id: 'MP',
  siteId: 'MLB',
  domain: 'mercadolivre.com.br',
};

const userId = 'some-other-user-id';

const getValue = key => `${key}-value`;

const mockExperimentsService = () => {
  const getConfig = jest.fn();
  experimentConfig.configurationKeys
    .forEach(key => getConfig.mockReturnValueOnce(getValue(key)));
  const factory = jest.fn().mockReturnValue({ getConfig });
  jest.doMock('frontend-melidata/src/services/experiment', () => factory);

  const assertExperimentsCalled = ({
    experimentConfig: assertExperimentConfig,
    req: assertRequest,
  } = {}) => {
    expect(factory).toHaveBeenCalledWith();
    const config = assertExperimentConfig || experimentConfig;
    const request = assertRequest || req;
    config.configurationKeys.forEach(key => {
      expect(getConfig).toHaveBeenCalledWith(request, config.name, null, key, config.preferredSeedSource);
    });
  };

  const assertExperimentsNotCalled = () => {
    expect(factory).toHaveBeenCalledWith();
    expect(getConfig).not.toHaveBeenCalled();
  };

  return {
    assertExperimentsCalled,
    assertExperimentsNotCalled,
  };
};

const mockFallbackService = ({ returnValue }) => {
  const getConfigurationFallback = jest.fn().mockReturnValue(returnValue);
  jest.doMock('./experiments-configuration-fallback', () => ({ getConfigurationFallback }));

  const assertFallbackCalled = ({
    experimentConfig: assertExperimentConfig,
    req: assertRequest,
    seedSource: assertSeedSource,
    platform: assertPlatform,
    device: assertDevice,
    userId: assertUserId,
    headers: assertHeaders,
    cookies: assertCookies,
  } = {}) => {
    expect(getConfigurationFallback).toHaveBeenCalledWith({
      experimentConfig: assertExperimentConfig,
      req: assertRequest,
      seedSource: assertSeedSource,
      platform: assertPlatform,
      device: assertDevice,
      userId: assertUserId,
      headers: assertHeaders,
      cookies: assertCookies,
    });
  };

  return {
    assertFallbackCalled,
  };
};

describe('Experiments service', () => {
  beforeEach(() => jest.resetModules());

  describe('getExperimentConfiguration', () => {
    it('should return null if there is no experimentConfig', () => {
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({ req });

      expect(result).toBeNull();
    });

    it('should return null if there is no experimentConfig name', () => {
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({
        req,
        experimentConfig: {
          ...experimentConfig,
          name: null,
        },
      });

      expect(result).toBeNull();
    });

    it('should return null if there is no experimentConfig preferred seed source', () => {
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({
        req,
        experimentConfig: {
          ...experimentConfig,
          preferredSeedSource: null,
        },
      });

      expect(result).toBeNull();
    });

    it('should return null if there is no experimentConfig configuration keys', () => {
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({
        req,
        experimentConfig: {
          ...experimentConfig,
          configurationKeys: null,
        },
      });

      expect(result).toBeNull();
    });

    it('should return null if there is an empty experimentConfig configuration keys array', () => {
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({
        req,
        experimentConfig: {
          ...experimentConfig,
          configurationKeys: [],
        },
      });

      expect(result).toBeNull();
    });

    it('should return configurations with custom seed', () => {
      const { assertExperimentsCalled } = mockExperimentsService();
      const { getExperimentConfiguration } = getService();

      const result = getExperimentConfiguration({
        req,
        experimentConfig,
      });

      const expectedResult = experimentConfig.configurationKeys
        .reduce((tempExpectedResult, key) => ({
          ...tempExpectedResult,
          [key]: getValue(key),
        }), {});

      expect(result).toEqual(expectedResult);
      assertExperimentsCalled();
    });

    it('should return configurations with user id seed source', () => {
      const { assertExperimentsCalled } = mockExperimentsService();
      const { getExperimentConfiguration } = getService();

      const testExperimentConfig = {
        ...experimentConfig,
        preferredSeedSource: seedSources.userId,
      };
      const result = getExperimentConfiguration({
        req,
        experimentConfig: testExperimentConfig,
      });

      const expectedResult = experimentConfig.configurationKeys
        .reduce((tempExpectedResult, key) => ({
          ...tempExpectedResult,
          [key]: getValue(key),
        }), {});

      expect(result).toEqual(expectedResult);
      assertExperimentsCalled({
        experimentConfig: testExperimentConfig,
      });
    });

    it('should return configurations with uid if preferred seed source is user id but the user is not logged', () => {
      const { assertExperimentsCalled } = mockExperimentsService();
      const { getExperimentConfiguration } = getService();

      const testExperimentConfig = {
        ...experimentConfig,
        preferredSeedSource: seedSources.userId,
      };
      const testReq = {
        ...req,
        user: null,
      };
      const result = getExperimentConfiguration({
        req: testReq,
        experimentConfig: testExperimentConfig,
      });

      const expectedResult = experimentConfig.configurationKeys
        .reduce((tempExpectedResult, key) => ({
          ...tempExpectedResult,
          [key]: getValue(key),
        }), {});

      expect(result).toEqual(expectedResult);
      assertExperimentsCalled({
        experimentConfig: {
          ...testExperimentConfig,
          preferredSeedSource: seedSources.uid,
        },
        req: testReq,
      });
    });

    it('should return configurations only from fallback', () => {
      const { assertExperimentsNotCalled } = mockExperimentsService();
      const fallbackConfig = {
        'some-configuration-key-1': 'some-other-configuration-value-1',
        'some-configuration-key-2': 'some-other-configuration-value-2',
      };
      const { assertFallbackCalled } = mockFallbackService({
        returnValue: fallbackConfig,
      });

      const { getExperimentConfiguration } = getService();

      const testExperimentConfig = {
        ...experimentConfig,
        preferredSeedSource: seedSources.userId,
      };
      const result = getExperimentConfiguration({
        req,
        experimentConfig: testExperimentConfig,
        platform,
        device,
        userId,
        headers,
        cookies,
        doNotConsumeMelidataService: true,
      });

      expect(result).toEqual(fallbackConfig);
      assertExperimentsNotCalled();
      assertFallbackCalled({
        experimentConfig: testExperimentConfig,
        req,
        seedSource: seedSources.userId,
        platform,
        device,
        userId,
        headers,
        cookies,
      });
    });
  });
});
