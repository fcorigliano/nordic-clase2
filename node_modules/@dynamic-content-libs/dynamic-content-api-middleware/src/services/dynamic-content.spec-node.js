const { dynamicContentExperiments } = require('../constants/configurations');

const getService = () => require('./dynamic-content');

const req = {
  platform: {
    id: 'ML',
    siteId: 'MLA',
    domain: 'mercadolibre.com.ar',
  },
};

const configResults = [{
  name: 'name-1',
}, {
  name: 'name-2',
}];
const mockConfigService = () => {
  const feConfigEnvironment = 'some-environment';

  const getEnvironment = jest.fn().mockReturnValue(feConfigEnvironment);
  const get = jest.fn().mockReturnValue(configResults);
  jest.doMock('frontend-config', () => ({
    getEnvironment,
    get,
  }));

  const assertConfigCalled = ({
    req: assertReq,
  } = {}) => {
    expect(getEnvironment).toHaveBeenCalledWith(assertReq);
    expect(get).toHaveBeenCalledWith(
      dynamicContentExperiments,
      assertReq.platform.id,
      assertReq.platform.siteId,
      feConfigEnvironment,
    );
  };

  return {
    assertConfigCalled,
  };
};

const mockExperimentsService = () => {
  const getExperimentConfiguration = jest.fn().mockImplementation(options => ({
    someConfig: options.experimentConfig.name,
  }));
  jest.doMock('./experiments', () => ({ getExperimentConfiguration }));

  const assertExperimentsCalled = ({
    req: assertReq,
  } = {}) => {
    configResults.forEach(configResult => expect(getExperimentConfiguration).toHaveBeenCalledWith({
      req: assertReq,
      experimentConfig: configResult,
    }));
  };

  return {
    assertExperimentsCalled,
  };
};

describe('Dynamic content service', () => {
  beforeEach(() => jest.resetModules());

  describe('getExperimentsData', () => {
    it('should return empty configuration if there is no platform', () => {
      const { getExperimentsData } = getService();

      const result = getExperimentsData({
        ...req,
        platform: null,
      });

      expect(result).toEqual({});
    });

    it('should return empty configuration if there is no platform id', () => {
      const { getExperimentsData } = getService();

      const result = getExperimentsData({
        ...req,
        platform: {
          ...req.platform,
          id: null,
        },
      });

      expect(result).toEqual({});
    });

    it('should return empty configuration if there is no platform id', () => {
      const { getExperimentsData } = getService();

      const result = getExperimentsData({
        ...req,
        platform: {
          ...req.platform,
          siteId: null,
        },
      });

      expect(result).toEqual({});
    });

    it('should return configurations from experiments service', () => {
      const { assertConfigCalled } = mockConfigService();
      const { assertExperimentsCalled } = mockExperimentsService();

      const { getExperimentsData } = getService();

      const result = getExperimentsData(req);

      assertConfigCalled({ req });
      assertExperimentsCalled({ req });

      const expectedResult = configResults.reduce((hash, configResult) => ({
        ...hash,
        [configResult.name]: {
          someConfig: configResult.name,
        },
      }), {});
      expect(result).toEqual(expectedResult);
    });
  });
});
