const getService = () => require('./experiments-hashing-service');

describe('Experiments hashing service', () => {
  beforeEach(() => jest.resetModules());

  describe('getBase', () => {
    it('should return the base value', () => {
      const { getBase } = getService();

      const result = getBase();

      expect(result).toEqual(1000);
    });
  });

  describe('getWhitelistedVariant', () => {
    const id = 'some-id';
    const userId = 'some-user-id';
    const experiment = {
      variants: [{
        whitelisted_seeds: [],
      }],
    };

    it('should return null if there is no variants array', () => {
      const { getWhitelistedVariant } = getService();

      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: null,
      });

      expect(result).toEqual(null);
    });

    it('should return undefined if there is no variants on array', () => {
      const { getWhitelistedVariant } = getService();

      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [],
      });

      expect(result).toEqual(undefined);
    });

    it('should return undefined if there is no variants with whitelisted_seeds', () => {
      const { getWhitelistedVariant } = getService();

      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [{}],
      });

      expect(result).toEqual(undefined);
    });

    it('should return undefined if there is no variants with fulfilled whitelisted_seeds', () => {
      const { getWhitelistedVariant } = getService();

      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [{
          whitelisted_seeds: [],
        }],
      });

      expect(result).toEqual(undefined);
    });

    it('should return undefined if there is no variants with known whitelisted_seeds', () => {
      const { getWhitelistedVariant } = getService();

      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [{
          whitelisted_seeds: ['some-other-id'],
        }],
      });

      expect(result).toEqual(undefined);
    });

    it('should return the variant if there is a variant that match with d2id', () => {
      const { getWhitelistedVariant } = getService();

      const variant = {
        whitelisted_seeds: [id],
      };
      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [variant],
      });

      expect(result).toEqual(variant);
    });

    it('should return the variant if there is a variant that match with userId', () => {
      const { getWhitelistedVariant } = getService();

      const variant = {
        whitelisted_seeds: [userId],
      };
      const result = getWhitelistedVariant(id, userId, {
        ...experiment,
        variants: [variant],
      });

      expect(result).toEqual(variant);
    });
  });

  describe('getApplicableVariant', () => {
    const id = 'some-id';
    const variant1 = {
      id: 'variant-id-1',
      whitelisted_seeds: [],
      exposure: 100,
    };
    const variant2 = {
      id: 'variant-id-2',
      whitelisted_seeds: [],
      exposure: 0,
    };
    const experiment = {
      name: 'some-name',
      variants: [
        variant1,
        variant2,
      ],
    };
    const siteId = 'MLA';
    const platformId = 'ML';
    const userId = 'some-user-id';

    it('should return null if theres no id', () => {
      const service = getService();

      const result = service.getApplicableVariant(null, experiment, siteId, platformId, userId);

      expect(result).toEqual(null);
    });

    it('should return whitelisted variant if theres no id', () => {
      const service = getService();

      const expectedVariant = {
        ...variant2,
        whitelisted_seeds: [userId],
      };
      const testExperiment = {
        ...experiment,
        variants: [
          variant1,
          expectedVariant,
        ],
      };
      const result = service.getApplicableVariant(id, testExperiment, siteId, platformId, userId);

      expect(result).toEqual(expectedVariant);
    });

    it('should return a variant', () => {
      const service = getService();

      const result = service.getApplicableVariant(id, experiment, siteId, platformId, userId);

      expect(result).toEqual(variant1);
    });
  });

  describe('getVariantExposure', () => {
    const site = 'MLA';
    const platform = 'ML';

    const defaultExposure = 100;
    const specificExposure = 50;

    const variant = {
      exposure: defaultExposure,
      exposure_configuration: [{
        key: `${site}-${platform}`,
        exposure: specificExposure,
      }],
    };

    it('should return variant default exposure', () => {
      const service = getService();

      const testVariant = {
        ...variant,
        exposure_configuration: null,
      };
      const result = service.getVariantExposure(testVariant, site, platform);

      expect(result).toEqual(defaultExposure);
    });

    it('should return variant exposure by site and platform', () => {
      const service = getService();

      const result = service.getVariantExposure(variant, site, platform);

      expect(result).toEqual(specificExposure);
    });

    it('should return variant exposure by site', () => {
      const service = getService();

      const testVariant = {
        ...variant,
        exposure_configuration: [{
          key: site,
          exposure: specificExposure,
        }],
      };
      const result = service.getVariantExposure(testVariant, site, platform);

      expect(result).toEqual(specificExposure);
    });

    it('should return variant exposure by platform', () => {
      const service = getService();

      const testVariant = {
        ...variant,
        exposure_configuration: [{
          key: platform,
          exposure: specificExposure,
        }],
      };
      const result = service.getVariantExposure(testVariant, site, platform);

      expect(result).toEqual(specificExposure);
    });
  });
});
