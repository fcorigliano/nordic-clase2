const HashsingService = require('./experiments-hashing-service');
const { getSeed } = require('./seeds');
const { getUserId } = require('./users');
const { error } = require('./logger');
const { send } = require('./statsd');
const { configurationFallbackUnknownError } = require('../constants/statsd');

const getVariantExposure = ({
  siteId,
  variant,
  experimentConfig,
  device,
}) => {
  const variantId = variant.id;
  const siteConfigs = experimentConfig.variantsFallback.exposure.sites[siteId];
  if (siteConfigs) {
    const deviceWithFallback = device || {};
    const matchConfig = siteConfigs.find(siteConfig =>
      // eslint-disable-next-line implicit-arrow-linebreak
      (!siteConfig.platforms || siteConfig.platforms.some(platformId => deviceWithFallback[platformId]))
      && (siteConfig.variants[variantId] || siteConfig.variants[variantId] === 0));
    if (matchConfig) {
      return matchConfig.variants[variantId];
    }
  }

  return experimentConfig.variantsFallback.exposure.default[variantId] || 0;
};

const defaultResult = {};

const getConfigurationFallback = ({
  req,
  experimentConfig,
  seedSource,
  platform,
  device,
  userId,
  headers,
  cookies,
}) => {
  const currentPlatform = platform || (req && req.platform) || {};
  try {
    if (!experimentConfig || !experimentConfig.variantsFallback) {
      return defaultResult;
    }

    const { siteId } = currentPlatform;
    if (!siteId) {
      return defaultResult;
    }

    const seed = getSeed({
      seedSource,
      req,
      headers,
      cookies,
      userId,
    });

    const { hash, variantsConfig } = experimentConfig.variantsFallback.variants.reduce((temp, variantConfig) => {
      temp.hash[variantConfig.id] = variantConfig;
      temp.variantsConfig.push({
        id: variantConfig.id,
        whitelisted_seeds: variantConfig.whitelistedSeeds || [],
        exposure: getVariantExposure({
          siteId,
          variant: variantConfig,
          experimentConfig,
          device: device || req.device,
        }),
      });
      return temp;
    }, {
      hash: {},
      variantsConfig: [],
    });
    const experimentHashingServiceConfiguration = {
      name: experimentConfig.name,
      variants: variantsConfig,
    };

    const currentUserId = userId || getUserId(req);
    const selectedVariant = HashsingService
      .getApplicableVariant(seed, experimentHashingServiceConfiguration, null, null, currentUserId);

    return ((selectedVariant && hash[selectedVariant.id]) || {}).configuration || defaultResult;
  } catch (e) {
    error('Error getting configuration fallback', {
      platformId: currentPlatform.id,
      siteId: currentPlatform.siteId,
      error: e,
    });
    send(configurationFallbackUnknownError);
    return defaultResult;
  }
};

module.exports = {
  getConfigurationFallback,
};
