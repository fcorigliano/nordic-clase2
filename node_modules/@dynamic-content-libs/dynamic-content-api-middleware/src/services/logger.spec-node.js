const getService = () => require('./logger');

const message = 'sample message';

const mockLogger = () => {
  const errorMock = jest.fn();
  const loggerInstance = {
    error: errorMock,
  };
  const loggerMock = jest.fn().mockReturnValue(loggerInstance);
  jest.doMock('frontend-logger', () => loggerMock);

  const assertCalled = (expectedMessage, expectedTags) => {
    expect(loggerMock).toHaveBeenCalledWith('@dynamic-content-libs/dynamic-content-api-middleware');
    expect(errorMock).toHaveBeenCalledWith(expectedMessage, expectedTags);
  };

  return {
    assertCalled,
  };
};

describe('Logger service', () => {
  beforeEach(() => jest.resetModules());

  describe('error', () => {
    it('should log message', () => {
      const { assertCalled } = mockLogger();

      const { error } = getService();

      error(message);

      assertCalled(`${message}: No error message`, {
        platformId: null,
        siteId: null,
        domain: null,
      });
    });

    it('should log message with tags', () => {
      const { assertCalled } = mockLogger();

      const { error } = getService();

      const options = {
        platformId: 'MLA',
        siteId: 'ML',
        domain: 'mercadolibre.com.ar',
        extraTags: {
          'some-key': 'some-value',
        },
      };
      error(message, options);

      const {
        extraTags,
        ...otherTags
      } = options;

      assertCalled(`${message}: No error message`, {
        ...otherTags,
        ...extraTags,
      });
    });

    it('should log message with error', () => {
      const { assertCalled } = mockLogger();

      const { error } = getService();

      const errorMessage = 'some error message';
      error(message, {
        error: new Error(errorMessage),
      });

      assertCalled(`${message}: ${errorMessage}`, {
        platformId: null,
        siteId: null,
        domain: null,
      });
    });
  });
});
