const config = require('frontend-config');
const logger = require('frontend-logger');

const log = logger('first-party-detection');

const HOSTNAME_REGEX = /\bcentrode(proveedores|fornecedores)\./;
const MARKETPLACE_PLATFORM_ID = 'ML';
const WHITELIST_PATHS = [
  '/privacy-preferences/cookies',
  '/privacy-preferences/api/cookies-preferences',
  '/privacy-preferences/cookies?mode=embed',
];

/**
 * Checks if given user has vendor tag
 *
 * @param user
 * @returns {Boolean}
 */
function firstPartyUserValidation(user) {
  return user.raw.internal_tags.indexOf('vendor') !== -1;
}

/**
 * Checks if given hostname corresponds to First Party flow
 *
 * @param req
 * @returns {Boolean}
 */
function firstPartyURLvalidation(req) {
  const { hostname, platform } = req;

  if (platform.id !== MARKETPLACE_PLATFORM_ID) return false;
  return HOSTNAME_REGEX.test(hostname);
}

/**
 * Checks if given request should skip middleware validation
 *
 * @param req
 * @returns {Boolean}
 */
function shouldSkipValidation(req) {
  const { originalUrl = '' } = req;

  return WHITELIST_PATHS.includes(originalUrl);
}

module.exports = function firstPartyDetection(req, res, next) {
  try {
    const { platform } = req;

    if (!platform) return next();

    if (shouldSkipValidation(req)) return next();

    let isFirstPartyUser = false;
    const isFirstPartyURL = firstPartyURLvalidation(req);

    if (req.user) {
      const { siteId, id: platformId } = platform;

      isFirstPartyUser = firstPartyUserValidation(req.user);

      // Non First-party user entering First-party application
      if (!isFirstPartyUser && isFirstPartyURL) {
        const redirectURL = config.get('url.home.link', platformId, siteId);
        if (!redirectURL) return next();
        return res.redirect(redirectURL);
      }

      // First-party user entering non First-party application
      if (isFirstPartyUser && !isFirstPartyURL) {
        const redirectURL = config.get('url.firstPartyFallbackUrl.link', platformId, siteId);
        if (!redirectURL) return next(new Error('Error while getting firstPartyFallbackUrl url'));
        return res.redirect(redirectURL);
      }
    }

    req.firstParty = {
      isFirstPartyUser,
      isFirstPartyURL,
      isFirstPartyMarketplaceFlow: isFirstPartyURL,
    };

    return next();
  } catch (err) {
    const errorFallback = err || {};

    log.error('Error detecting First Party information.', {
      message: errorFallback.message,
      stack: errorFallback.stack,
    });

    return next();
  }
};
