/* eslint-disable max-len */
const httpMocks = require('node-mocks-http');

const middleware = require('../src/middleware');

const mockedNonVendorUser = { raw: { internal_tags: [] } };
const mockedVendorUser = { raw: { internal_tags: ['vendor'] } };

const mockedMLPlatform = { id: 'ML', siteId: 'MLA' };
const mockedMPPlatform = { id: 'MP', siteId: 'MLA' };

jest.mock('frontend-config', () => ({
  get: jest.fn().mockImplementation((key) => {
    switch (key) {
      case 'url.firstPartyFallbackUrl.link':
        return 'https://centrodeproveedores.mercadolibre.com.ar/forbidden';
      case 'url.home.link':
        return 'https://www.mercadolibre.com.ar';
      default:
        return null;
    }
  }),
}));

describe('first party detection middleware', () => {
  let req;
  const res = httpMocks.createResponse({ redirect: jest.fn() });
  const next = () => {};

  afterEach(() => { jest.clearAllMocks(); });

  test.each`
  hostname                                            | platform            | expected
  ${'centrodeproveedores.mercadolibre.com.ar'}        | ${mockedMLPlatform} | ${true}
  ${'centrodeproveedores.mercadolibre.com.ar'}        | ${mockedMLPlatform} | ${true}
  ${'centrodefornecedores.mercadolivre.com.br'}       | ${mockedMLPlatform} | ${true}
  ${'centrodeproveedores.mercadolivre.com.br'}        | ${mockedMLPlatform} | ${true}
  ${'dev.centrodeproveedores.mercadolibre.com.ar'}    | ${mockedMLPlatform} | ${true}
  ${'dev.centrodeproveedores.mercadolibre.com.ar'}    | ${mockedMLPlatform} | ${true}
  ${'centrodeproveedoresalgoomas.mercadolibre.com.ar'}| ${mockedMPPlatform} | ${false}
  ${'www.mercadolibre.com.ar'}                        | ${mockedMLPlatform} | ${false}
  ${'www.mercadoshops.com.ar'}                        | ${mockedMLPlatform} | ${false}
  ${'www.mercadolibre.com.ar'}                        | ${mockedMLPlatform} | ${false}
  ${'www.mercadolivre.com.br'}                        | ${mockedMLPlatform} | ${false}
  ${'www.proveedores.mercadolivre.com.br'}            | ${mockedMLPlatform} | ${false}
  ${'www.listado.mercadolibre.com.ar'}                | ${mockedMLPlatform} | ${false}
  ${'www.myaccount.mercadolivre.com.br'}              | ${mockedMLPlatform} | ${false}
  ${'www.mercadopago.com.ar'}                         | ${mockedMPPlatform} | ${false}

`('it should define isFirstPartyUrl correctly', ({ hostname, platform, expected }) => {
    req = httpMocks.createRequest({
      hostname,
      platform,
    });

    middleware(req, res, next);
    expect(req.firstParty.isFirstPartyURL).toBe(expected);
  });

  test.each`
  user                  | hostname                                     | expected
  ${mockedNonVendorUser}| ${'mercadolibre.com.ar'}                     | ${false}
  ${mockedVendorUser}   | ${'centrodeproveedores.mercadolibre.com.ar'} | ${true}

  `('it should define isFirstPartyUser correctly', ({ user, hostname, expected }) => {
    req = httpMocks.createRequest({
      user,
      hostname,
      platform: mockedMLPlatform,
    });

    middleware(req, res, next);
    expect(req.firstParty.isFirstPartyUser).toBe(expected);
  });

  it('should not define req.firstparty nor redirect when req.platform is undefined', () => {
    req = httpMocks.createRequest({
      hostname: '',
      platform: undefined,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middleware(req, res, next);
    expect(redirectSpy).toBeCalledTimes(0);
    expect(req.firstParty).toBeUndefined();
  });

  it('should define firstPartyFlow when URL matches First Party Subdomain', () => {
    req = httpMocks.createRequest({
      hostname: 'centrodeproveedores.mercadolibre.com.ar',
      platform: mockedMLPlatform,
    });

    middleware(req, res, next);
    expect(req.firstParty).toMatchObject({
      isFirstPartyUser: false,
      isFirstPartyURL: true,
      isFirstPartyMarketplaceFlow: true,
    });
  });

  it('should redirect when non vendor user is entering First Party Subdomain', () => {
    req = httpMocks.createRequest({
      hostname: 'centrodeproveedores.mercadolibre.com.ar',
      user: mockedNonVendorUser,
      platform: mockedMLPlatform,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middleware(req, res, next);

    expect(redirectSpy).toBeCalledTimes(1);
    expect(redirectSpy).toHaveBeenCalledWith('https://www.mercadolibre.com.ar');
    expect(req.firstParty).toBeUndefined();
  });

  it('should redirect when vendor user is entering non First Party Subdomain', () => {
    req = httpMocks.createRequest({
      hostname: 'mercadolibre.com.ar/publicaciones',
      user: mockedVendorUser,
      platform: mockedMLPlatform,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middleware(req, res, next);

    expect(redirectSpy).toBeCalledTimes(1);
    expect(redirectSpy).toHaveBeenCalledWith('https://centrodeproveedores.mercadolibre.com.ar/forbidden');
    expect(req.firstParty).toBeUndefined();
  });

  it('should not redirect vendor when feconfig.get returns undefined', () => {
    jest.resetAllMocks();
    jest.doMock('frontend-config', () => ({
      get: jest.fn().mockImplementation((key) => {
        switch (key) {
          case 'url.firstPartyFallbackUrl.link':
            return undefined;
          default:
            return null;
        }
      }),
    }));

    // eslint-disable-next-line global-require
    const middlewareReImport = require('../src/middleware');

    req = httpMocks.createRequest({
      hostname: 'mercadolibre.com.ar/publicaciones',
      user: mockedVendorUser,
      platform: mockedMLPlatform,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middlewareReImport(req, res, next);

    expect(redirectSpy).toBeCalledTimes(0);
    expect(req.firstParty).toBeUndefined();
  });

  it('should not redirect non vendor when feconfig.get returns undefined', () => {
    jest.resetAllMocks();
    jest.doMock('frontend-config', () => ({
      get: jest.fn().mockImplementation((key) => {
        switch (key) {
          case 'url.home.link':
            return undefined;
          default:
            return null;
        }
      }),
    }));

    // eslint-disable-next-line global-require
    const middlewareReImport = require('../src/middleware');

    req = httpMocks.createRequest({
      hostname: 'centrodeproveedores.mercadolibre.com.ar/',
      user: mockedNonVendorUser,
      platform: mockedMLPlatform,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middlewareReImport(req, res, next);

    expect(redirectSpy).toBeCalledTimes(0);
    expect(req.firstParty).toBeUndefined();
  });

  it('should not redirect nor define req.firstparty when error is thrown', () => {
    jest.resetAllMocks();
    jest.resetModules();

    jest.doMock('frontend-config', () => ({
      get: jest.fn().mockImplementation((key) => {
        switch (key) {
          case 'url.firstPartyFallbackUrl.link':
            throw (new Error('Error getting firstPartyFallbackUrl'));
          default:
            return null;
        }
      }),
    }));

    const errorMock = jest.fn();

    jest.doMock('frontend-logger', () => jest.fn().mockReturnValue({ error: errorMock }));

    // eslint-disable-next-line global-require
    const middlewareReImport = require('../src/middleware');

    req = httpMocks.createRequest({
      hostname: 'mercadolibre.com.ar/publicaciones',
      user: mockedVendorUser,
      platform: mockedMLPlatform,
    });

    const redirectSpy = jest.spyOn(res, 'redirect');

    middlewareReImport(req, res, next);

    expect(errorMock).toBeCalledTimes(1);
    expect(errorMock).toBeCalledWith(
      'Error detecting First Party information.',
      expect.objectContaining({
        message: 'Error getting firstPartyFallbackUrl',
        stack: expect.any(String),
      }),
    );
    expect(redirectSpy).toBeCalledTimes(0);
    expect(req.firstParty).toBeUndefined();
  });

  describe('check whitelist url', () => {
    describe('when mockedNonVendorUser', () => {
      it('should does not redirect when vendor user is entering First Party Subdomain privacy preferences cookies', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolibre.com.ar',
          user: mockedNonVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/cookies',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party Subdomain privacy preference cookies with embed mode', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolivre.com.br',
          user: mockedNonVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/cookies?mode=embed',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party Subdomain privacy-preference api', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolibre.com.ar',
          user: mockedNonVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/api/cookies-preferences',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party MLB Subdomain privacy-preference api', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolivre.com.br',
          user: mockedNonVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/api/cookies-preferences',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });
    });

    describe('when mockedVendorUser', () => {
      it('should does not redirect when vendor user is entering First Party Subdomain privacy preferences cookies', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolibre.com.ar',
          user: mockedVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/cookies',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party Subdomain privacy preference cookies with embed mode', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolivre.com.br',
          user: mockedVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/cookies?mode=embed',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party Subdomain privacy-preference api', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolibre.com.ar',
          user: mockedVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/api/cookies-preferences',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });

      it('should does not redirect when vendor user is entering First Party MLB Subdomain privacy-preference api', () => {
        req = httpMocks.createRequest({
          hostname: 'mercadolivre.com.br',
          user: mockedVendorUser,
          platform: mockedMLPlatform,
          originalUrl: '/privacy-preferences/api/cookies-preferences',
        });

        middleware(req, res, next);
        expect(req.firstParty).toBeUndefined();
      });
    });
  });
});
